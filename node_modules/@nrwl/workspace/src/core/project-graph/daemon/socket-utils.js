"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.killSocketOrPath = exports.FULL_OS_SOCKET_PATH = exports.isWindows = void 0;
const app_root_1 = require("@nrwl/tao/src/utils/app-root");
const os_1 = require("os");
const path_1 = require("path");
const fs_1 = require("fs");
/**
 * For IPC with the daemon server we use unix sockets or windows named pipes, depending on the user's operating system.
 *
 * See https://nodejs.org/dist/latest-v14.x/docs/api/net.html#net_identifying_paths_for_ipc_connections for a full breakdown
 * of OS differences between Unix domain sockets and named pipes.
 *
 * We currently create the socket/pipe based on a path within the current workspace so that we maintain one unique daemon per
 * workspace to ensure that subtle differences between Nx workspaces cannot cause issues.
 */
const workspaceSocketPath = path_1.join(app_root_1.appRootPath, './nx-daemon.sock');
exports.isWindows = os_1.platform() === 'win32';
exports.FULL_OS_SOCKET_PATH = exports.isWindows
    ? '\\\\.\\pipe\\nx\\' + path_1.resolve(workspaceSocketPath)
    : path_1.resolve(workspaceSocketPath);
function killSocketOrPath() {
    try {
        fs_1.unlinkSync(exports.FULL_OS_SOCKET_PATH);
    }
    catch (_a) { }
}
exports.killSocketOrPath = killSocketOrPath;
//# sourceMappingURL=socket-utils.js.map