"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const workspace_1 = require("@nrwl/workspace");
const utils_1 = require("../../utils");
const sync_packages_with_demos_1 = require("../sync-packages-with-demos");
let name;
let npmPackageName;
function default_1(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        name = workspace_1.stringUtils.dasherize(schema.name);
        utils_1.prerun(tree);
        npmPackageName = schema.isScoped ? `${utils_1.getNpmScope()}/${name}` : name;
        addPackageFiles(tree);
        workspace_1.addProjectToNxJsonInTree(name, {});
        updateWorkspaceConfig(tree);
        updateWorkspaceScripts(tree);
        utils_1.updateReadMe(tree);
        sync_packages_with_demos_1.default(tree, {
            packages: name,
        }, '../sync-packages-with-demos/', true);
        console.log(`"${npmPackageName}" created and added to all demo apps. Ready to develop!`);
    });
}
exports.default = default_1;
function addPackageFiles(tree) {
    // set default package values
    let repo = `https://github.com/NativeScript/plugins`;
    let gitAuthorName = `NativeScript`;
    let gitAuthorEmail = `oss@nativescript.org`;
    // check for custom package settings
    const toolsPackageSettingsPath = 'tools/package-settings.json';
    if (tree.exists(toolsPackageSettingsPath)) {
        const packageSettings = devkit_1.readJson(tree, toolsPackageSettingsPath);
        if (packageSettings) {
            if (packageSettings.repository && packageSettings.repository.url) {
                repo = packageSettings.repository.url.replace('.git', '');
            }
            if (packageSettings.author && packageSettings.author.name) {
                gitAuthorName = packageSettings.author.name;
            }
            if (packageSettings.author && packageSettings.author.email) {
                gitAuthorEmail = packageSettings.author.email;
            }
        }
    }
    devkit_1.generateFiles(tree, devkit_1.joinPathFragments(__dirname, 'files'), `./packages/${name}`, {
        name,
        npmPackageName,
        npmScope: utils_1.getNpmScope(),
        repo,
        gitAuthorName,
        gitAuthorEmail,
        stringUtils: workspace_1.stringUtils,
        tmpl: '',
        dot: '.'
    });
}
function updateWorkspaceConfig(tree) {
    var _a, _b, _c;
    devkit_1.addProjectConfiguration(tree, name, {
        root: `packages/${name}`,
        projectType: 'library',
        sourceRoot: `packages/${name}`,
        targets: {
            build: {
                executor: '@nrwl/node:package',
                options: {
                    outputPath: `dist/packages/${name}`,
                    tsConfig: `packages/${name}/tsconfig.json`,
                    packageJson: `packages/${name}/package.json`,
                    main: `packages/${name}/index.d.ts`,
                    assets: [
                        `packages/${name}/*.md`,
                        `packages/${name}/index.d.ts`,
                        'LICENSE',
                        {
                            glob: '**/*',
                            input: `packages/${name}/platforms/`,
                            output: './platforms/',
                        },
                    ],
                },
            },
            'build.all': {
                executor: '@nrwl/workspace:run-commands',
                options: {
                    commands: [`nx run ${name}:build`, `node tools/scripts/build-finish.ts ${name}`],
                    parallel: false,
                },
            },
            focus: {
                executor: '@nrwl/workspace:run-commands',
                options: {
                    commands: [`nx g @nativescript/plugin-tools:focus-packages ${name}`],
                    parallel: false,
                },
            },
        },
        tags: []
    });
    const allConfig = devkit_1.readProjectConfiguration(tree, 'all');
    if (allConfig) {
        let commands = [];
        if ((_c = (_b = (_a = allConfig.targets) === null || _a === void 0 ? void 0 : _a.build) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.commands) {
            commands = allConfig.targets.build.options.commands;
            commands.push(`nx run ${name}:build.all`);
        }
        devkit_1.updateProjectConfiguration(tree, 'all', Object.assign(Object.assign({}, allConfig), { targets: {
                build: {
                    executor: allConfig.targets.build.executor,
                    outputs: ['dist/packages'],
                    options: {
                        commands,
                        parallel: false
                    },
                },
                focus: allConfig.targets.focus
            } }));
    }
}
function updateWorkspaceScripts(tree) {
    const workspaceScriptPath = 'tools/workspace-scripts.js';
    let workspaceScripts = tree.read(workspaceScriptPath).toString('utf-8');
    // Add package as build option
    const buildSectionIndex = workspaceScripts.indexOf(`'build-all':`);
    const buildStart = workspaceScripts.substring(0, buildSectionIndex);
    const buildEnd = workspaceScripts.substring(buildSectionIndex, workspaceScripts.length);
    const newBuild = `// ${npmPackageName}
			'${name}': {
				build: {
					script: 'nx run ${name}:build.all',
					description: '${npmPackageName}: Build',
				},
			},
`;
    workspaceScripts = `${buildStart}${newBuild}			${buildEnd}`;
    // Add package as focus option
    const focusSectionIndex = workspaceScripts.indexOf(`reset:`);
    const focusStart = workspaceScripts.substring(0, focusSectionIndex);
    const focusEnd = workspaceScripts.substring(focusSectionIndex, workspaceScripts.length);
    const newFocus = `'${name}': {
				script: 'nx run ${name}:focus',
				description: 'Focus on ${npmPackageName}',
			},
`;
    workspaceScripts = `${focusStart}${newFocus}			${focusEnd}`;
    // console.log(workspaceScripts);
    tree.write(workspaceScriptPath, workspaceScripts);
    return tree;
}
//# sourceMappingURL=index.js.map