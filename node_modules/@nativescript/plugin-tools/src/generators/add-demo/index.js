"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const workspace_1 = require("@nrwl/workspace");
const utils_1 = require("../../utils");
const sync_packages_with_demos_1 = require("../sync-packages-with-demos");
function default_1(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        utils_1.prerun(tree);
        const demoName = `demo-${schema.type}`;
        const appPath = `apps/${demoName}/package.json`;
        if (tree.exists(appPath)) {
            throw new Error(`Your workspace already contains a "demo-${schema.type}" app. Plugin workspaces should contain only 1 demo app for any particular flavor integration for simplicity and ease of maintenance.`);
        }
        else {
            utils_1.prerun(tree);
            addAppFiles(tree, schema.type);
            workspace_1.addProjectToNxJsonInTree(demoName, {});
            updateWorkspaceConfig(tree, demoName, schema.type);
            updateWorkspaceScripts(tree, schema.type);
            if (schema.type === 'react') {
                // handle patches
                handlePatches(tree);
            }
            updateRootPackageDeps(tree, schema.type);
            updateRootTSConfig(tree, schema.type);
            sync_packages_with_demos_1.default(tree, null, '../sync-packages-with-demos/');
            console.log('\n');
            console.log(`"apps/${demoName}" created!`);
            console.log('\n');
            console.log('IMPORTANT: Before trying your new demo, run this first to ensure dependencies are installed properly:');
            console.log('    npm run setup');
            console.log('\n');
        }
    });
}
exports.default = default_1;
function addAppFiles(tree, type) {
    devkit_1.generateFiles(tree, devkit_1.joinPathFragments(__dirname, `files_${type}`), `./apps/demo-${type}`, { npmScope: utils_1.getNpmScope(), stringUtils: workspace_1.stringUtils, tmpl: '', dot: '.' });
}
function handlePatches(tree) {
    devkit_1.generateFiles(tree, devkit_1.joinPathFragments(__dirname, 'files_react_patches'), `./patches`, { npmScope: utils_1.getNpmScope(), stringUtils: workspace_1.stringUtils, tmpl: '', dot: '.' });
}
function updateRootPackageDeps(tree, type) {
    devkit_1.updateJson(tree, 'package.json', (json) => {
        let devDependencies = {};
        switch (type) {
            case 'react':
                json.scripts = json.scripts || {};
                if (json.scripts.postinstall && json.scripts.postinstall.indexOf('patch-package') === -1) {
                    json.scripts.postinstall = json.scripts.postinstall + ' && patch-package';
                }
                devDependencies = {
                    '@pmmmwh/react-refresh-webpack-plugin': '~0.4.0-beta.5',
                    '@react-navigation/core': '^5.15.3',
                    '@types/react': '16.9.34',
                    'patch-package': '~6.4.0',
                    react: '~16.13.1',
                    'react-nativescript': '^3.0.0-beta.1',
                    'react-nativescript-navigation': '3.0.0-beta.2',
                    'react-refresh': '~0.8.3',
                };
                break;
            case 'svelte':
                devDependencies = {
                    svelte: '~3.35.0',
                    'svelte-loader-hot': '~0.3.1',
                    'svelte-native-preprocessor': '^0.2.0',
                    'svelte-native': '~0.9.5',
                    'svelte-preprocess': '^4.7.0',
                };
                break;
            case 'vue':
                devDependencies = {
                    vue: '~2.6.12',
                };
                break;
        }
        json.devDependencies = Object.assign(Object.assign({}, json.devDependencies), devDependencies);
        return json;
    });
}
function updateRootTSConfig(tree, type) {
    switch (type) {
        case 'react':
            devkit_1.updateJson(tree, 'tsconfig.base.json', (json) => {
                json.compilerOptions.jsx = 'react';
                return json;
            });
            break;
    }
}
function updateWorkspaceConfig(tree, name, type) {
    const srcFolder = utils_1.getSrcFolderForType(type);
    devkit_1.addProjectConfiguration(tree, name, {
        root: `apps/${name}/`,
        projectType: 'application',
        sourceRoot: `apps/${name}/${srcFolder}`,
        targets: {
            build: {
                executor: '@nativescript/nx:build',
                options: {
                    noHmr: true,
                    production: true,
                    uglify: true,
                    release: true,
                    forDevice: true,
                },
            },
            ios: {
                executor: '@nativescript/nx:build',
                options: {
                    platform: 'ios',
                },
            },
            android: {
                executor: '@nativescript/nx:build',
                options: {
                    platform: 'android',
                },
            },
            clean: {
                executor: '@nativescript/nx:build',
                options: {
                    clean: true,
                },
            },
        },
        tags: [],
    });
}
function updateWorkspaceScripts(tree, type) {
    const workspaceScriptPath = 'tools/workspace-scripts.js';
    let workspaceScripts = tree.read(workspaceScriptPath).toString('utf-8');
    // Add package as build option
    const appsSectionIndex = workspaceScripts.indexOf(`apps:`);
    const starting = workspaceScripts.substring(0, appsSectionIndex);
    const appsEndIndex = workspaceScripts.indexOf(`'‚öôÔ∏è':`);
    const ending = workspaceScripts.substring(appsEndIndex, workspaceScripts.length);
    const demoReact = `'...React...': {
    script: 'npx cowsay "You like your TS with an X..."',
    description: ' üîª React',
  },
  'demo-react': {
    clean: {
      script: 'nx run demo-react:clean',
      description: '‚öÜ  Clean  üßπ',
    },
    ios: {
      script: 'nx run demo-react:ios',
      description: '‚öÜ  Run iOS  Ô£ø',
    },
    android: {
      script: 'nx run demo-react:android',
      description: '‚öÜ  Run Android  ü§ñ',
    },
  },`;
    const demoSvelte = `'...Svelte...': {
    script: 'npx cowsay "You are a minimalist!"',
    description: ' üîª Svelte',
  },
  'demo-svelte': {
    clean: {
      script: 'nx run demo-svelte:clean',
      description: '‚öÜ  Clean  üßπ',
    },
    ios: {
      script: 'nx run demo-svelte:ios',
      description: '‚öÜ  Run iOS  Ô£ø',
    },
    android: {
      script: 'nx run demo-svelte:android',
      description: '‚öÜ  Run Android  ü§ñ',
    },
  },`;
    const demoVue = `'...Vue...': {
    script: 'npx cowsay "You like the vue here..."',
    description: ' üîª Vue',
  },
  'demo-vue': {
    clean: {
      script: 'nx run demo-vue:clean',
      description: '‚öÜ  Clean  üßπ',
    },
    ios: {
      script: 'nx run demo-vue:ios',
      description: '‚öÜ  Run iOS  Ô£ø',
    },
    android: {
      script: 'nx run demo-vue:android',
      description: '‚öÜ  Run Android  ü§ñ',
    },
  },`;
    const newDemoApps = `apps: {
        '...Vanilla...': {
          script: 'npx cowsay "Nothing wrong with vanilla üç¶"',
          description: ' üîª Vanilla',
        },
        demo: {
          clean: {
            script: 'nx run demo:clean',
            description: '‚öÜ  Clean  üßπ',
          },
          ios: {
            script: 'nx run demo:ios',
            description: '‚öÜ  Run iOS  Ô£ø',
          },
          android: {
            script: 'nx run demo:android',
            description: '‚öÜ  Run Android  ü§ñ',
          },
        },
        '...Angular...': {
          script: 'npx cowsay "Test all the Angles!"',
          description: ' üîª Angular',
        },
        'demo-angular': {
          clean: {
            script: 'nx run demo-angular:clean',
            description: '‚öÜ  Clean  üßπ',
          },
          ios: {
            script: 'nx run demo-angular:ios',
            description: '‚öÜ  Run iOS  Ô£ø',
          },
          android: {
            script: 'nx run demo-angular:android',
            description: '‚öÜ  Run Android  ü§ñ',
          },
        },
        ${type === 'react' ? demoReact : ''}
        ${type === 'svelte' ? demoSvelte : ''}
        ${type === 'vue' ? demoVue : ''}
  },
`;
    // console.log('starting ---', starting);
    // console.log('newDemoApps ---', newDemoApps);
    // console.log('ending ---', ending);
    workspaceScripts = `${starting}${newDemoApps}
    ${ending}`;
    // console.log(workspaceScripts);
    tree.write(workspaceScriptPath, workspaceScripts);
    return tree;
}
//# sourceMappingURL=index.js.map