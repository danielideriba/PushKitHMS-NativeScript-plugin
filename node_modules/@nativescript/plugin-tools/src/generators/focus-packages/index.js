"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utils_1 = require("../../utils");
const ngcli_adapter_1 = require("@nrwl/devkit/ngcli-adapter");
let focusPackages;
let allPackages;
function default_1(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        focusPackages = utils_1.sanitizeCollectionArgs(schema.name);
        utils_1.prerun(tree);
        // Focus workspace
        const nstudioFocus = ngcli_adapter_1.wrapAngularDevkitSchematic('@nstudio/focus', 'mode');
        yield nstudioFocus(tree, {
            name: schema.name,
        });
        utils_1.setPackageNamesToUpdate(focusPackages);
        allPackages = utils_1.getAllPackages(tree);
        const npmPackageNames = utils_1.getNpmPackageNames();
        // console.log('allPackages:', allPackages);
        // Isolate code in demo apps by default based on focus
        if (!schema.ignoreDemos) {
            // adjust demo shared index for focusing
            utils_1.updateDemoSharedIndex(tree, allPackages, focusPackages);
            // apps
            const appFolders = tree.children('apps');
            for (const dir of appFolders) {
                // console.log(`demoAppRoot: ${demoAppRoot}`);
                const demoType = utils_1.getDemoTypeFromName(dir);
                const demoViewsPath = `apps/${dir}/${utils_1.getPluginDemoPath(demoType)}`;
                const demoAppRoot = `apps/${dir}`;
                // console.log(`demoType: ${demoType}`);
                utils_1.updateDemoDependencies(tree, demoType, demoAppRoot, allPackages, true);
                // add `_off` suffix on ts,xml files for those that not being focused on
                // this removes those from the app build
                for (const p of allPackages) {
                    switch (demoType) {
                        case 'xml':
                            const xmlView = `${demoViewsPath}/${p}.xml`;
                            // console.log('xmlView:', xmlView);
                            const tsClass = `${demoViewsPath}/${p}.ts`;
                            // console.log('tsClass:', tsClass);
                            if (focusPackages.length === 0 || focusPackages.includes(p)) {
                                // resetting all demos back on if no specified focus or
                                // focus on specified packages by ensuring their demos are not off
                                // console.log('remove _off for', p);
                                if (tree.exists(`${xmlView}_off`)) {
                                    tree.rename(`${xmlView}_off`, xmlView);
                                }
                                if (tree.exists(`${tsClass}_off`)) {
                                    tree.rename(`${tsClass}_off`, tsClass);
                                }
                            }
                            else {
                                // Turns package demos off when not focusing on them
                                if (tree.exists(xmlView)) {
                                    tree.rename(xmlView, `${xmlView}_off`);
                                }
                                if (tree.exists(tsClass)) {
                                    tree.rename(tsClass, `${tsClass}_off`);
                                }
                            }
                            break;
                    }
                }
                // cleanup index listing to only have buttons for what is being focused on
                utils_1.resetIndexForDemoType(tree, demoType);
            }
        }
        const isFocusing = focusPackages && focusPackages.length > 0;
        const focusTargets = (focusPackages && focusPackages.length ? focusPackages : allPackages).map((n) => `\n${npmPackageNames[n]}`).join('');
        console.log(`${isFocusing ? 'Focusing workspace on:' : 'Resetting workspace for:'}\n${focusTargets}\n\n`);
        if (!schema.ignoreDemos) {
            console.log(` > NOTE: Clean the demo app you plan to test with before running now that the demo code has been updated.\n`);
        }
    });
}
exports.default = default_1;
//# sourceMappingURL=index.js.map