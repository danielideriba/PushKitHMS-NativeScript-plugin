"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const utils_1 = require("../../utils");
const versions_1 = require("../../utils/versions");
function default_1(options) {
    if (!options.name) {
        throw new schematics_1.SchematicsException(utils_1.missingArgument('name', 'Provide a name for your NativeScript app.', 'nx g @nativescript/nx:app name'));
    }
    return schematics_1.chain([
        utils_1.prerun(options, true),
        utils_1.PluginHelpers.applyAppNamingConvention(options, 'nativescript'),
        (tree, context) => addAppFiles(options, options.name),
        // add extra files per options
        (tree, context) => (options.routing && ['angular'].includes(options.framework) ? addAppFiles(options, options.name, 'routing') : schematics_1.noop()),
        // add app resources
        (tree, context) => schematics_1.externalSchematic('@nativescript/nx', 'app-resources', {
            path: `apps/${options.directory ? options.directory + '/' : ''}${options.name}`,
        }, { interactive: false })(tree, context),
        utils_1.PluginHelpers.updateRootDeps(options),
        // PluginHelpers.updatePrettierIgnore(),
        utils_1.PluginHelpers.addPackageInstallTask(options),
        (tree, context) => {
            const directory = options.directory ? `${options.directory}/` : '';
            const appPath = `apps/${directory}${options.name}`;
            let frontendFrameworkConfig = {};
            switch (options.framework) {
                case 'angular':
                    frontendFrameworkConfig = {
                        build: {
                            builder: '@nativescript/nx:build',
                            options: {
                                noHmr: true,
                                production: true,
                                uglify: true,
                                release: true,
                                forDevice: true,
                            },
                            configurations: {
                                prod: {
                                    fileReplacements: [
                                        {
                                            replace: `./src/environments/environment.ts`,
                                            with: `./src/environments/environment.prod.ts`,
                                        },
                                    ],
                                },
                            },
                        },
                    };
                    break;
            }
            return workspace_1.updateWorkspace((workspace) => {
                workspace.projects.add({
                    name: `${options.name}`,
                    root: `${appPath}/`,
                    sourceRoot: `${appPath}/src`,
                    projectType: 'application',
                    prefix: utils_1.getPrefix(),
                    targets: Object.assign(Object.assign({}, frontendFrameworkConfig), { ios: {
                            builder: '@nativescript/nx:build',
                            options: {
                                platform: 'ios',
                            },
                            configurations: {
                                build: {
                                    copyTo: './dist/build.ipa',
                                },
                                prod: {
                                    combineWithConfig: 'build:prod',
                                },
                            },
                        }, android: {
                            builder: '@nativescript/nx:build',
                            options: {
                                platform: 'android',
                            },
                            configurations: {
                                build: {
                                    copyTo: './dist/build.apk',
                                },
                                prod: {
                                    combineWithConfig: 'build:prod',
                                },
                            },
                        }, clean: {
                            builder: '@nativescript/nx:build',
                            options: {
                                clean: true,
                            },
                        }, lint: {
                            builder: '@nrwl/linter:eslint',
                            options: {
                                lintFilePatterns: [`${appPath}/**/*.ts`, `${appPath}/src/**/*.html`],
                            },
                        }, test: {
                            builder: '@nrwl/jest:jest',
                            options: {
                                jestConfig: `${appPath}/jest.config.js`,
                                tsConfig: `${appPath}/tsconfig.spec.json`,
                                passWithNoTests: true,
                                setupFile: `${appPath}/src/test-setup.ts`,
                            },
                        } }),
                });
            });
        },
        (tree) => {
            const projects = {};
            projects[`${options.name}`] = {
                tags: options.tags ? options.tags.split(',') : [],
            };
            return utils_1.updateNxProjects(tree, projects);
        },
    ]);
}
exports.default = default_1;
function addAppFiles(options, appName, extra = '') {
    const appname = utils_1.getAppName(options, 'nativescript');
    const directory = options.directory ? `${options.directory}/` : '';
    const framework = options.framework || utils_1.getFrontendFramework();
    return schematics_1.branchAndMerge(schematics_1.mergeWith(schematics_1.apply(schematics_1.url(`./files${framework ? '_' + framework : ''}${extra ? '_' + extra : ''}`), [
        schematics_1.template(Object.assign(Object.assign(Object.assign({}, options), utils_1.getDefaultTemplateOptions()), { appname, directoryAppPath: `${directory}${options.name}`, pathOffset: directory ? '../../../' : '../../', libFolderName: utils_1.PluginHelpers.getLibFoldername('nativescript'), angularVersion: versions_1.angularVersion,
            nsAngularVersion: versions_1.nsAngularVersion,
            nsCoreVersion: versions_1.nsCoreVersion,
            nsWebpackVersion: versions_1.nsWebpackVersion,
            nsNgToolsVersion: versions_1.nsNgToolsVersion,
            rxjsVersion: versions_1.rxjsVersion,
            zonejsVersion: versions_1.zonejsVersion,
            typescriptVersion: versions_1.typescriptVersion,
            nsIOSRuntimeVersion: versions_1.nsIOSRuntimeVersion,
            nsAndroidRuntimeVersion: versions_1.nsAndroidRuntimeVersion })),
        schematics_1.move(`apps/${directory}${appName}`),
    ])));
}
//# sourceMappingURL=application.js.map