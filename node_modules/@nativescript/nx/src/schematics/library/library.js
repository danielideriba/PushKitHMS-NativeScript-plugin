"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const utils_1 = require("../../utils");
function default_1(options) {
    return schematics_1.chain([
        utils_1.prerun(options, true),
        utils_1.PluginHelpers.applyAppNamingConvention(options, 'nativescript'),
        (tree, context) => schematics_1.externalSchematic('@nrwl/workspace', 'library', Object.assign({}, options)),
        (tree, context) => {
            // add extra files
            return addExtraLibFiles(options);
        },
        (tree, context) => {
            // update library tsconfig for {N} development
            const directory = options.directory ? `${options.directory}/` : '';
            const tsConfigPath = `libs/${directory}${options.name}/tsconfig.json`;
            const tsConfigJson = utils_1.getJsonFromFile(tree, tsConfigPath);
            if (tsConfigJson && tsConfigJson.files) {
                tsConfigJson.files.push('./references.d.ts');
            }
            if (tsConfigJson && tsConfigJson.include) {
                tsConfigJson.include.push('**/*.ts');
            }
            return utils_1.updateJsonFile(tree, tsConfigPath, tsConfigJson);
        },
    ]);
}
exports.default = default_1;
function addExtraLibFiles(options) {
    const directory = options.directory ? `${options.directory}/` : '';
    return schematics_1.branchAndMerge(schematics_1.mergeWith(schematics_1.apply(schematics_1.url(`./files`), [
        schematics_1.template(Object.assign(Object.assign(Object.assign({}, options), utils_1.getDefaultTemplateOptions()), { pathOffset: directory ? '../../../' : '../../' })),
        schematics_1.move(`libs/${directory}${options.name}`),
    ])));
}
function getLibName(options) {
}
//# sourceMappingURL=library.js.map