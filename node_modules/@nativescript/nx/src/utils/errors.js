"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generatorError = exports.generateOptionError = exports.unsupportedFrameworkError = exports.missingArgument = void 0;
const workspace_1 = require("@nrwl/workspace");
const general_1 = require("./general");
function missingArgument(argName, description = '', example = '') {
    return `Missing ${argName} argument. ${description} ${example ? 'Example: ' + example : ''}`;
}
exports.missingArgument = missingArgument;
function unsupportedFrameworkError(framework) {
    return `${framework} is currently not a supported framework. Supported at the moment: ${general_1.supportedFrameworks.map((f) => workspace_1.stringUtils.capitalize(f))}. Please request support for this framework if you'd like and/or submit a PR which we would greatly appreciate.`;
}
exports.unsupportedFrameworkError = unsupportedFrameworkError;
function generateOptionError(type, missingFeature) {
    const exampleCommand = `nx g ${type} my-${type} --feature=foo`;
    if (missingFeature) {
        return `You did not specify the name of the feature you'd like your ${type} to be a part of. For example: ${exampleCommand}`;
    }
    else {
        return `You did not specify the name of the ${type} you'd like to generate. For example: ${exampleCommand}`;
    }
}
exports.generateOptionError = generateOptionError;
function generatorError(type) {
    return `If this is an app specific ${type}, please specify app names to generate the ${type} for with --apps=name,name2,etc. If you want to generate the ${type} for use across many apps, just specify the platforms you wish to build the ${type} for with --platforms=web,nativescript,etc.${type !== 'feature'
        ? ' and the feature you want them a part of with --feature=foo'
        : ''}`;
}
exports.generatorError = generatorError;
//# sourceMappingURL=errors.js.map