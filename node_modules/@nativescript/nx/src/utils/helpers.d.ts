import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';
import { FrameworkTypes, IPluginSettings, PlatformTypes } from './general';
export declare namespace PluginHelpers {
    interface Schema {
        /**
         * Target frameworks
         */
        framework?: string;
        /**
         * The prefix to apply to generated selectors.
         */
        prefix?: string;
        /**
         * Skip formatting
         */
        skipFormat?: boolean;
        /**
         * Skip dependent platform files
         */
        skipDependentPlatformFiles?: boolean;
        useXplat?: boolean;
        /**
         * Skip install
         */
        skipInstall?: boolean;
        /**
         * group by name
         */
        groupByName?: boolean;
        /**
         * testing helper
         */
        isTesting?: boolean;
    }
    interface NgAddSchema {
        /**
         * Target platforms
         */
        platforms?: string;
        /**
         * Target frameworks
         */
        framework?: string;
        /**
         * The prefix to apply to generated selectors.
         */
        prefix?: string;
    }
    interface IPluginGeneratorOptions {
        featureName?: string;
        projectNames?: Array<string>;
        platforms: Array<PlatformTypes>;
    }
    function getFrameworksFromOptions(frameworkArgument: string): "angular"[];
    function getFrameworkChoice(frameworkArgument: string, frameworks?: Array<FrameworkTypes>): "angular";
    function updateRootDeps(options: PluginHelpers.Schema): (tree: Tree, context: SchematicContext) => import("@angular-devkit/schematics/src/tree/interface").Tree;
    function getUpdatedPluginSettings(options: Schema): IPluginSettings;
    /**
     * Returns a name with the platform.
     *
     * @example (app, nativescript) => nativescript-app or app-nativescript
     * @param name
     * @param platform
     */
    function getPlatformName(name: string, platform: PlatformTypes): string;
    /**
     * Returns libs folder name dependent on settings.
     *
     * @example ('web', 'angular') => 'web-angular' if no default framework otherwise just 'web'
     * @param platform
     * @param framework
     */
    function getLibFoldername(platform: PlatformTypes, framework?: FrameworkTypes): string;
    function getExternalChainsForGenerator(options: Schema, generator: string, packagesToRunXplat: Array<string>): any[];
    function getExternalChainsForApplication(options: Schema, generator: string, packagesToRun: Array<string>): any[];
    function applyAppNamingConvention(options: any, platform: PlatformTypes): Rule;
    function getAppNamingConvention(options: any, platform: PlatformTypes): {
        name: string;
        directory: string;
    };
    function updatePackageForWorkspace(options: Schema, updates: {
        dependencies?: {
            [key: string]: string;
        };
        devDependencies?: {
            [key: string]: string;
        };
    }): (tree: Tree, context: SchematicContext) => import("@angular-devkit/schematics/src/tree/interface").Tree;
    function updateGitIgnore(): (tree: Tree) => void;
    function updatePrettierIgnore(content: string, checkExisting: string): (tree: Tree) => import("@angular-devkit/schematics/src/tree/interface").Tree;
    function addPackageInstallTask(options: Schema): (tree: Tree, context: SchematicContext) => void;
}
export declare namespace PluginComponentHelpers {
    interface Schema {
        name: string;
        /**
         * Target feature. Default is 'ui' if none specified.
         */
        feature?: string;
        /**
         * Group it in a subfolder of the target feature
         */
        subFolder?: string;
        /**
         * Target apps
         */
        projects?: string;
        /**
         * Only generate for specified projects and ignore shared code
         */
        onlyProject?: boolean;
        /**
         * Target framework
         */
        framework?: string;
        /**
         * Create a base component for maximum cross platform sharing
         */
        createBase?: boolean;
        /**
         * Schematic processing helpers
         */
        needsIndex?: boolean;
        /**
         * Skip formatting
         */
        skipFormat?: boolean;
        /**
         * testing helper
         */
        isTesting?: boolean;
    }
    function prepare(options: Schema): PluginHelpers.IPluginGeneratorOptions;
}
export declare namespace PluginFeatureHelpers {
    interface Schema {
        name: string;
        /**
         * Target apps
         */
        projects?: string;
        /**
         * Target platforms
         */
        platforms?: string;
        framework?: string;
        /**
         * Only generate for specified projects and ignore shared code
         */
        onlyProject?: boolean;
        /**
         * Only generate the module and ignore default component creation
         */
        onlyModule?: boolean;
        /**
         * Configure routing
         */
        routing?: boolean;
        /**
         * Create base component for maximum code sharing
         */
        createBase?: boolean;
        /**
         * Add link to route for sandbox
         */
        adjustSandbox?: boolean;
        /**
         * Skip formatting
         */
        skipFormat?: boolean;
        /**
         * testing helper
         */
        isTesting?: boolean;
    }
    function prepare(options: Schema): PluginHelpers.IPluginGeneratorOptions;
    function addFiles(options: Schema, target?: string, projectName?: string, extra?: string, framework?: FrameworkTypes): Rule;
    function adjustBarrelIndex(options: Schema, indexFilePath: string): Rule;
    function getTemplateOptions(options: Schema, platform: string, framework?: FrameworkTypes): any;
    function getMoveTo(options: Schema, platform: string, projectName?: string, framework?: FrameworkTypes): string;
}
