import { Rule, Tree, SchematicContext } from '@angular-devkit/schematics';
export interface IPluginSettings {
    prefix?: string;
    groupByName?: boolean;
    framework?: FrameworkTypes;
}
export declare type PlatformTypes = 'nativescript';
export declare const supportedPlatforms: Array<PlatformTypes>;
export declare type FrameworkTypes = 'angular';
export declare const supportedFrameworks: Array<FrameworkTypes>;
export declare const supportedSandboxPlatforms: Array<PlatformTypes>;
export declare const packageSettingKeys: {
    nativescriptNx: string;
    xplat: string;
};
export declare function getNpmScope(): string;
export declare function getPrefix(): string;
export declare function getFrontendFramework(): "angular";
export declare function getGroupByName(): boolean;
export declare function getAppName(options: any, platform: PlatformTypes): any;
export declare function isXplatWorkspace(): boolean;
export declare function applyAppNamingConvention(options: any, platform: PlatformTypes): Rule;
export declare function getAppNamingConvention(options: any, platform: PlatformTypes): {
    name: string;
    directory: string;
};
export declare function getPlatformName(name: string, platform: PlatformTypes): string;
export declare function getDefaultTemplateOptions(): {
    tmpl: string;
    utils: {
        decamelize(str: string): string;
        dasherize(str?: string): string;
        camelize(str: string): string;
        classify(str: string): string;
        underscore(str: string): string;
        capitalize(str: string): string;
        group(name: string, group: string): string;
        featurePath(group: boolean, flat: boolean, path: string, name: string): string;
        sanitize: (str: string) => string;
    };
    npmScope: string;
    prefix: string;
    dot: string;
};
export declare function prerun(options?: any, init?: boolean): (tree: Tree) => import("@angular-devkit/schematics/src/tree/interface").Tree;
export declare function addInstallTask(options?: any): (host: Tree, context: SchematicContext) => import("@angular-devkit/schematics/src/tree/interface").Tree;
export declare function jsonParse(content: string): any;
export declare function getJsonFromFile(tree: Tree, path: string): any;
export declare function updateJsonFile(tree: Tree, path: string, jsonData: any): import("@angular-devkit/schematics/src/tree/interface").Tree;
export declare function updateFile(tree: Tree, path: string, content: string): import("@angular-devkit/schematics/src/tree/interface").Tree;
export declare function updatePackageScripts(tree: Tree, scripts: any): import("@angular-devkit/schematics/src/tree/interface").Tree;
export declare function readWorkspaceJson(tree: Tree): any;
export declare function updateWorkspace(updates: any): any;
export declare function updateNxProjects(tree: Tree, projects: any): import("@angular-devkit/schematics/src/tree/interface").Tree;
export declare function getNxWorkspaceConfig(tree: Tree): any;
export declare function sanitizeCommaDelimitedArg(input: string): Array<string>;
/**
 * Sanitizes a given string by removing all characters that
 * are not letters or digits.
 *
 ```javascript
 sanitize('nativescript-app');  // 'nativescriptapp'
 sanitize('action_name');       // 'actioname'
 sanitize('css-class-name');    // 'cssclassname'
 sanitize('my favorite items'); // 'myfavoriteitems'
 ```

 @method sanitize
 @param {String} str The string to sanitize.
 @return {String} the sanitized string.
*/
export declare const sanitize: (str: string) => string;
export declare const stringUtils: {
    decamelize(str: string): string;
    dasherize(str?: string): string;
    camelize(str: string): string;
    classify(str: string): string;
    underscore(str: string): string;
    capitalize(str: string): string;
    group(name: string, group: string): string;
    featurePath(group: boolean, flat: boolean, path: string, name: string): string;
    sanitize: (str: string) => string;
};
