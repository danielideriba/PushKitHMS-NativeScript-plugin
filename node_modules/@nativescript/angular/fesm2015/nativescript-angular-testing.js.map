{"version":3,"file":"nativescript-angular-testing.js","sources":["../../testing/src/lib/test-root-view.ts","../../testing/src/lib/nativescript_test_component_renderer.ts","../../testing/src/lib/nativescript-testing.module.ts","../../testing/src/lib/util.ts","../../testing/src/nativescript-angular-testing.ts"],"sourcesContent":["import { LayoutBase, GridLayout, Frame, View } from '@nativescript/core';\n\nconst TESTING_ROOT_ID = '__testing_container';\n\n/**\n * Get a reference to the fixtures container.\n */\nexport function testingRootView(): LayoutBase {\n  const rootPageLayout = Frame.topmost().currentPage.content as LayoutBase;\n\n  let testingRoot: LayoutBase;\n  rootPageLayout.eachChild((child: View) => {\n    if (child.id === TESTING_ROOT_ID) {\n      testingRoot = child as LayoutBase;\n      // rootPageLayout.removeChild(child);\n      return false;\n    }\n    return true;\n  });\n\n  if (!testingRoot) {\n    testingRoot = new GridLayout();\n    testingRoot.id = TESTING_ROOT_ID;\n    GridLayout.setColumnSpan(testingRoot, 100);\n    GridLayout.setRowSpan(testingRoot, 100);\n    rootPageLayout.addChild(testingRoot);\n  }\n\n  return testingRoot;\n}\n","import { Injectable } from '@angular/core';\nimport { TestComponentRenderer } from '@angular/core/testing';\nimport { ProxyViewContainer } from '@nativescript/core';\nimport { testingRootView } from './test-root-view';\n\n/**\n * A NativeScript based implementation of the TestComponentRenderer.\n */\n@Injectable()\nexport class NativeScriptTestComponentRenderer extends TestComponentRenderer {\n  insertRootElement(rootElId: string) {\n    const layout = new ProxyViewContainer();\n    layout.id = rootElId;\n\n    const rootLayout = testingRootView();\n    while (rootLayout.getChildrenCount() > 0) {\n      rootLayout.removeChild(rootLayout.getChildAt(0));\n    }\n    rootLayout.addChild(layout);\n  }\n}\n","import { NgModule, Provider } from '@angular/core';\nimport { TestComponentRenderer } from '@angular/core/testing';\nimport { COMMON_PROVIDERS, APP_ROOT_VIEW, NativeScriptModule } from '@nativescript/angular';\nimport { NativeScriptTestComponentRenderer } from './nativescript_test_component_renderer';\nimport { testingRootView } from './test-root-view';\n\nif (typeof Node === 'undefined' && !global.Node) {\n  class DummyNode {}\n  global.Node = DummyNode as any;\n}\n\n/**\n * Providers array is exported for cases where a custom module has to be constructed\n * to test a particular piece of code. This can happen, for example, if you are trying\n * to test dynamic component loading and need to specify an entryComponent for the testing\n * module.\n */\nexport const NATIVESCRIPT_TESTING_PROVIDERS: Provider[] = [...COMMON_PROVIDERS, { provide: APP_ROOT_VIEW, useFactory: testingRootView }, { provide: TestComponentRenderer, useClass: NativeScriptTestComponentRenderer }];\n\n/**\n * NativeScript testing support module. Enables use of TestBed for angular components, directives,\n * pipes, and services.\n */\n@NgModule({\n  exports: [NativeScriptModule],\n  providers: NATIVESCRIPT_TESTING_PROVIDERS,\n})\nexport class NativeScriptTestingModule {}\n","import { NativeScriptModule } from '@nativescript/angular';\nimport { View, Frame, LayoutBase, GridLayout } from '@nativescript/core';\nimport { NgModule, Type } from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { CommonModule } from '@angular/common';\nimport { platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';\n// import { NS_COMPILER_PROVIDERS } from \"../../platform\";\nimport { NATIVESCRIPT_TESTING_PROVIDERS, NativeScriptTestingModule } from './nativescript-testing.module';\nimport { testingRootView } from './test-root-view';\n\n/**\n * Declared test contexts. When the suite is done this map should be empty if all lifecycle\n * calls have happened as expected.\n * @private\n */\nconst activeTestFixtures: ComponentFixture<any>[][] = [];\n\n/**\n * Return a promise that resolves after (durationMs) milliseconds\n */\nexport function promiseWait(durationMs: number) {\n  return () => new Promise<void>((resolve) => setTimeout(() => resolve(), durationMs));\n}\n\n/**\n * Perform basic TestBed environment initialization. Call this once in the main entry point to your tests.\n * @deprecated\n */\nexport function nsTestBedInit() {\n  TestBed.initTestEnvironment(\n    NativeScriptTestingModule,\n    platformBrowserDynamicTesting() // NS_COMPILER_PROVIDERS)\n  );\n}\n\n/**\n * Helper for configuring a TestBed instance for rendering components for test. Ideally this\n * would not be needed, and in truth it's just a wrapper to eliminate some boilerplate. It\n * exists because when you need to specify `entryComponents` for a test the setup becomes quite\n * a bit more complex than if you're just doing a basic component test.\n *\n * More about entryComponents complexity: https://github.com/angular/angular/issues/12079\n *\n * Use:\n * ```\n *   beforeEach(nsTestBedBeforeEach([MyComponent,MyFailComponent]));\n * ```\n *\n * **NOTE*** Remember to pair with {@see nsTestBedAfterEach}\n *\n * @deprecated\n * @param components Any components that you will create during the test\n * @param providers Any services your tests depend on\n * @param imports Any module imports your tests depend on\n * @param entryComponents Any entry components that your tests depend on\n */\nexport function nsTestBedBeforeEach(components: any[], providers: any[] = [], imports: any[] = [], entryComponents: any[] = []) {\n  return (done) => {\n    activeTestFixtures.push([]);\n    // If there are no entry components we can take the simple path.\n    if (entryComponents.length === 0) {\n      TestBed.configureTestingModule({\n        declarations: [...components],\n        providers: [...providers],\n        imports: [NativeScriptModule, ...imports],\n      });\n    } else {\n      // If there are entry components, we have to reset the testing platform.\n      //\n      // There's got to be a better way... (o_O)\n      // TestBed.resetTestEnvironment();\n      // @NgModule({\n      //     declarations: entryComponents,\n      //     exports: entryComponents,\n      //     entryComponents: entryComponents\n      // })\n      // class EntryComponentsTestModule {\n      // }\n      // TestBed.initTestEnvironment(\n      //     EntryComponentsTestModule,\n      //     platformBrowserDynamicTesting(NS_COMPILER_PROVIDERS)\n      // );\n      // TestBed.configureTestingModule({\n      //     declarations: components,\n      //     imports: [\n      //         NativeScriptModule, NativeScriptTestingModule, CommonModule,\n      //         ...imports\n      //     ],\n      //     providers: [...providers, ...NATIVESCRIPT_TESTING_PROVIDERS],\n      // });\n    }\n    TestBed.compileComponents()\n      .then(() => done())\n      .catch((e) => {\n        console.log(`Failed to instantiate test component with error: ${e}`);\n        console.log(e.stack);\n        done();\n      });\n  };\n}\n\n/**\n * Helper for a basic component TestBed clean up.\n * @param resetEnv When true the testing environment will be reset\n * @param resetFn When resetting the environment, use this init function\n * @deprecated\n */\nexport function nsTestBedAfterEach(resetEnv = true, resetFn = nsTestBedInit) {\n  return () => {\n    if (activeTestFixtures.length === 0) {\n      throw new Error(`There are no more declared fixtures.` + `Did you call \"nsTestBedBeforeEach\" and \"nsTestBedAfterEach\" an equal number of times?`);\n    }\n    const root = testingRootView() as LayoutBase;\n    const fixtures = activeTestFixtures.pop();\n    fixtures.forEach((fixture) => {\n      const fixtureView = <View>fixture.nativeElement;\n      if (fixtureView.parent === root) {\n        root.removeChild(fixtureView);\n      }\n      fixture.destroy();\n    });\n    TestBed.resetTestingModule();\n    if (resetEnv) {\n      TestBed.resetTestEnvironment();\n      resetFn();\n    }\n  };\n}\n\n/**\n * Render a component using the TestBed helper, and return a promise that resolves when the\n * ComponentFixture is fully initialized.\n * @deprecated\n */\nexport function nsTestBedRender<T>(componentType: Type<T>): Promise<ComponentFixture<T>> {\n  const fixture = TestBed.createComponent(componentType);\n  fixture.detectChanges();\n  return (\n    fixture\n      .whenRenderingDone()\n      // TODO(jd): it seems that the whenStable and whenRenderingDone utilities of ComponentFixture\n      //           do not work as expected. I looked at how to fix it and it's not clear how to provide\n      //           a {N} specific subclass, because ComponentFixture is newed directly rather than injected\n      // What to do about it? Maybe fakeAsync can help? For now just setTimeout for 100ms (x_X)\n      .then(promiseWait(100))\n      .then(() => {\n        const list = activeTestFixtures[activeTestFixtures.length - 1];\n        if (!list) {\n          console.warn('nsTestBedRender called without nsTestBedBeforeEach/nsTestBedAfter each. ' + \"You are responsible for calling 'fixture.destroy()' when your test is done \" + 'in order to clean up the components that are created.');\n        } else {\n          list.push(fixture);\n        }\n        return fixture;\n      })\n  );\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}