import { LayoutBase } from '@nativescript/core';
import { InvisibleNode } from '../views/invisible-nodes';
export const elementMap = new Map();
const camelCaseSplit = /([a-z0-9])([A-Z])/g;
const defaultViewMeta = { skipAddToDom: false };
export function registerElement(elementName, resolver, meta) {
    const entry = { resolver, meta };
    elementMap.set(elementName, entry);
    elementMap.set(elementName.toLowerCase(), entry);
    elementMap.set(elementName.replace(camelCaseSplit, '$1-$2').toLowerCase(), entry);
}
export function getViewClass(elementName) {
    const entry = elementMap.get(elementName) || elementMap.get(elementName.toLowerCase());
    if (!entry) {
        throw new TypeError(`No known component for element ${elementName}.`);
    }
    try {
        return entry.resolver();
    }
    catch (e) {
        throw new TypeError(`Could not load view for: ${elementName}.${e}`);
    }
}
export function getViewMeta(nodeName) {
    const entry = elementMap.get(nodeName) || elementMap.get(nodeName.toLowerCase());
    return (entry && entry.meta) || defaultViewMeta;
}
export function isKnownView(elementName) {
    return elementMap.has(elementName) || elementMap.has(elementName.toLowerCase());
}
export function extractSingleViewRecursive(nodes, nestLevel) {
    const actualNodes = nodes.filter((node) => !(node instanceof InvisibleNode));
    if (actualNodes.length === 0) {
        throw new Error(`No suitable views found in list template! ` + `Nesting level: ${nestLevel}`);
    }
    else if (actualNodes.length > 1) {
        throw new Error(`More than one view found in list template!` + `Nesting level: ${nestLevel}`);
    }
    const rootLayout = actualNodes[0];
    if (!rootLayout) {
        return extractSingleViewRecursive(rootLayout.children, nestLevel + 1);
    }
    const parentLayout = rootLayout.parent;
    if (parentLayout instanceof LayoutBase) {
        const node = rootLayout.parentNode;
        parentLayout.removeChild(rootLayout);
        rootLayout.parentNode = node;
    }
    return rootLayout;
}
/**
 * @deprecated getSingleViewRecursive is deprecated, use extractSingleViewRecursive
 */
export function getSingleViewRecursive(nodes, nestLevel) {
    return extractSingleViewRecursive(nodes, nestLevel);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2VsZW1lbnQtcmVnaXN0cnkvcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBUSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUt6RCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQTRELENBQUM7QUFDOUYsTUFBTSxjQUFjLEdBQUcsb0JBQW9CLENBQUM7QUFDNUMsTUFBTSxlQUFlLEdBQWtCLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBRS9ELE1BQU0sVUFBVSxlQUFlLENBQUMsV0FBbUIsRUFBRSxRQUFzQixFQUFFLElBQW9CO0lBQy9GLE1BQU0sS0FBSyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO0lBQ2pDLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25DLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pELFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEYsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsV0FBbUI7SUFDOUMsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZGLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDVixNQUFNLElBQUksU0FBUyxDQUFDLGtDQUFrQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZFO0lBRUQsSUFBSTtRQUNGLE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3pCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixNQUFNLElBQUksU0FBUyxDQUFDLDRCQUE0QixXQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNyRTtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLFFBQWdCO0lBQzFDLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNqRixPQUFPLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxlQUFlLENBQUM7QUFDbEQsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsV0FBbUI7SUFDN0MsT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDbEYsQ0FBQztBQUVELE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxLQUFpQixFQUFFLFNBQWlCO0lBQzdFLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLFlBQVksYUFBYSxDQUFDLENBQUMsQ0FBQztJQUU3RSxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLEdBQUcsa0JBQWtCLFNBQVMsRUFBRSxDQUFDLENBQUM7S0FDL0Y7U0FBTSxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLEdBQUcsa0JBQWtCLFNBQVMsRUFBRSxDQUFDLENBQUM7S0FDL0Y7SUFFRCxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNmLE9BQU8sMEJBQTBCLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDdkU7SUFFRCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ3ZDLElBQUksWUFBWSxZQUFZLFVBQVUsRUFBRTtRQUN0QyxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDO1FBQ25DLFlBQVksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckMsVUFBVSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7S0FDOUI7SUFFRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsS0FBaUIsRUFBRSxTQUFpQjtJQUN6RSxPQUFPLDBCQUEwQixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN0RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGF5b3V0QmFzZSwgVmlldyB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBJbnZpc2libGVOb2RlIH0gZnJvbSAnLi4vdmlld3MvaW52aXNpYmxlLW5vZGVzJztcbmltcG9ydCB7IFZpZXdDbGFzc01ldGEgfSBmcm9tICcuLi92aWV3cy92aWV3LXR5cGVzJztcblxuZXhwb3J0IHR5cGUgVmlld1Jlc29sdmVyID0gKCkgPT4gYW55O1xuXG5leHBvcnQgY29uc3QgZWxlbWVudE1hcCA9IG5ldyBNYXA8c3RyaW5nLCB7IHJlc29sdmVyOiBWaWV3UmVzb2x2ZXI7IG1ldGE/OiBWaWV3Q2xhc3NNZXRhIH0+KCk7XG5jb25zdCBjYW1lbENhc2VTcGxpdCA9IC8oW2EtejAtOV0pKFtBLVpdKS9nO1xuY29uc3QgZGVmYXVsdFZpZXdNZXRhOiBWaWV3Q2xhc3NNZXRhID0geyBza2lwQWRkVG9Eb206IGZhbHNlIH07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckVsZW1lbnQoZWxlbWVudE5hbWU6IHN0cmluZywgcmVzb2x2ZXI6IFZpZXdSZXNvbHZlciwgbWV0YT86IFZpZXdDbGFzc01ldGEpOiB2b2lkIHtcbiAgY29uc3QgZW50cnkgPSB7IHJlc29sdmVyLCBtZXRhIH07XG4gIGVsZW1lbnRNYXAuc2V0KGVsZW1lbnROYW1lLCBlbnRyeSk7XG4gIGVsZW1lbnRNYXAuc2V0KGVsZW1lbnROYW1lLnRvTG93ZXJDYXNlKCksIGVudHJ5KTtcbiAgZWxlbWVudE1hcC5zZXQoZWxlbWVudE5hbWUucmVwbGFjZShjYW1lbENhc2VTcGxpdCwgJyQxLSQyJykudG9Mb3dlckNhc2UoKSwgZW50cnkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Vmlld0NsYXNzKGVsZW1lbnROYW1lOiBzdHJpbmcpOiBhbnkge1xuICBjb25zdCBlbnRyeSA9IGVsZW1lbnRNYXAuZ2V0KGVsZW1lbnROYW1lKSB8fCBlbGVtZW50TWFwLmdldChlbGVtZW50TmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIGtub3duIGNvbXBvbmVudCBmb3IgZWxlbWVudCAke2VsZW1lbnROYW1lfS5gKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJ5LnJlc29sdmVyKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBDb3VsZCBub3QgbG9hZCB2aWV3IGZvcjogJHtlbGVtZW50TmFtZX0uJHtlfWApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWaWV3TWV0YShub2RlTmFtZTogc3RyaW5nKTogVmlld0NsYXNzTWV0YSB7XG4gIGNvbnN0IGVudHJ5ID0gZWxlbWVudE1hcC5nZXQobm9kZU5hbWUpIHx8IGVsZW1lbnRNYXAuZ2V0KG5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICByZXR1cm4gKGVudHJ5ICYmIGVudHJ5Lm1ldGEpIHx8IGRlZmF1bHRWaWV3TWV0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzS25vd25WaWV3KGVsZW1lbnROYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGVsZW1lbnRNYXAuaGFzKGVsZW1lbnROYW1lKSB8fCBlbGVtZW50TWFwLmhhcyhlbGVtZW50TmFtZS50b0xvd2VyQ2FzZSgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RTaW5nbGVWaWV3UmVjdXJzaXZlKG5vZGVzOiBBcnJheTxhbnk+LCBuZXN0TGV2ZWw6IG51bWJlcik6IFZpZXcge1xuICBjb25zdCBhY3R1YWxOb2RlcyA9IG5vZGVzLmZpbHRlcigobm9kZSkgPT4gIShub2RlIGluc3RhbmNlb2YgSW52aXNpYmxlTm9kZSkpO1xuXG4gIGlmIChhY3R1YWxOb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHN1aXRhYmxlIHZpZXdzIGZvdW5kIGluIGxpc3QgdGVtcGxhdGUhIGAgKyBgTmVzdGluZyBsZXZlbDogJHtuZXN0TGV2ZWx9YCk7XG4gIH0gZWxzZSBpZiAoYWN0dWFsTm9kZXMubGVuZ3RoID4gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTW9yZSB0aGFuIG9uZSB2aWV3IGZvdW5kIGluIGxpc3QgdGVtcGxhdGUhYCArIGBOZXN0aW5nIGxldmVsOiAke25lc3RMZXZlbH1gKTtcbiAgfVxuXG4gIGNvbnN0IHJvb3RMYXlvdXQgPSBhY3R1YWxOb2Rlc1swXTtcbiAgaWYgKCFyb290TGF5b3V0KSB7XG4gICAgcmV0dXJuIGV4dHJhY3RTaW5nbGVWaWV3UmVjdXJzaXZlKHJvb3RMYXlvdXQuY2hpbGRyZW4sIG5lc3RMZXZlbCArIDEpO1xuICB9XG5cbiAgY29uc3QgcGFyZW50TGF5b3V0ID0gcm9vdExheW91dC5wYXJlbnQ7XG4gIGlmIChwYXJlbnRMYXlvdXQgaW5zdGFuY2VvZiBMYXlvdXRCYXNlKSB7XG4gICAgY29uc3Qgbm9kZSA9IHJvb3RMYXlvdXQucGFyZW50Tm9kZTtcbiAgICBwYXJlbnRMYXlvdXQucmVtb3ZlQ2hpbGQocm9vdExheW91dCk7XG4gICAgcm9vdExheW91dC5wYXJlbnROb2RlID0gbm9kZTtcbiAgfVxuXG4gIHJldHVybiByb290TGF5b3V0O1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIGdldFNpbmdsZVZpZXdSZWN1cnNpdmUgaXMgZGVwcmVjYXRlZCwgdXNlIGV4dHJhY3RTaW5nbGVWaWV3UmVjdXJzaXZlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTaW5nbGVWaWV3UmVjdXJzaXZlKG5vZGVzOiBBcnJheTxhbnk+LCBuZXN0TGV2ZWw6IG51bWJlcik6IFZpZXcge1xuICByZXR1cm4gZXh0cmFjdFNpbmdsZVZpZXdSZWN1cnNpdmUobm9kZXMsIG5lc3RMZXZlbCk7XG59XG4iXX0=