import { ContentView, LayoutBase, ProxyViewContainer, View } from '@nativescript/core';
import { InvisibleNode } from './invisible-nodes';
export function isDetachedElement(element) {
    return element && element.meta && element.meta.skipAddToDom;
}
export function isView(view) {
    return view instanceof View;
}
export function isInvisibleNode(view) {
    return view instanceof InvisibleNode;
}
export function isLayout(view) {
    return view instanceof LayoutBase;
}
export function isContentView(view) {
    return view instanceof ContentView;
}
export function getFirstNativeLikeView(view, extractFromNSParent = false) {
    if (view instanceof ProxyViewContainer) {
        if (view.getChildrenCount() === 0) {
            return null;
        }
        return getFirstNativeLikeView(view.getChildAt(0));
    }
    if (extractFromNSParent) {
        // const node = view.parentNode;
        detachViewFromParent(view);
        // view.parentNode = node;
    }
    return view;
}
export function detachViewFromParent(view) {
    const parent = view === null || view === void 0 ? void 0 : view.parent;
    if (!parent) {
        return;
    }
    if (parent.meta && parent.meta.removeChild) {
        parent.meta.removeChild(parent, view);
    }
    else if (isLayout(parent)) {
        parent.removeChild(view);
    }
    else if (isContentView(parent) && parent.content === view) {
        parent.content = null;
    }
    else if (isView(parent)) {
        parent._removeView(view);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3ZpZXdzL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUdsRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsT0FBc0I7SUFDdEQsT0FBTyxPQUFPLElBQWEsT0FBUSxDQUFDLElBQUksSUFBYSxPQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztBQUNsRixDQUFDO0FBRUQsTUFBTSxVQUFVLE1BQU0sQ0FBQyxJQUFhO0lBQ2xDLE9BQU8sSUFBSSxZQUFZLElBQUksQ0FBQztBQUM5QixDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxJQUFhO0lBQzNDLE9BQU8sSUFBSSxZQUFZLGFBQWEsQ0FBQztBQUN2QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxJQUFhO0lBQ3BDLE9BQU8sSUFBSSxZQUFZLFVBQVUsQ0FBQztBQUNwQyxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxJQUFhO0lBQ3pDLE9BQU8sSUFBSSxZQUFZLFdBQVcsQ0FBQztBQUNyQyxDQUFDO0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLElBQVUsRUFBRSxtQkFBbUIsR0FBRyxLQUFLO0lBQzVFLElBQUksSUFBSSxZQUFZLGtCQUFrQixFQUFFO1FBQ3RDLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLHNCQUFzQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNuRDtJQUVELElBQUksbUJBQW1CLEVBQUU7UUFDdkIsZ0NBQWdDO1FBQ2hDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLDBCQUEwQjtLQUMzQjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxJQUFVO0lBQzdDLE1BQU0sTUFBTSxHQUFXLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxNQUFNLENBQUM7SUFDcEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLE9BQU87S0FDUjtJQUNELElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDdkM7U0FBTSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUMzQixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzFCO1NBQU0sSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7UUFDM0QsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7S0FDdkI7U0FBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN6QixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzFCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRlbnRWaWV3LCBMYXlvdXRCYXNlLCBQcm94eVZpZXdDb250YWluZXIsIFZpZXcgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgSW52aXNpYmxlTm9kZSB9IGZyb20gJy4vaW52aXNpYmxlLW5vZGVzJztcbmltcG9ydCB0eXBlIHsgTmdDb250ZW50VmlldywgTmdMYXlvdXRCYXNlLCBOZ1ZpZXcgfSBmcm9tICcuL3ZpZXctdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEZXRhY2hlZEVsZW1lbnQoZWxlbWVudDogVmlldyB8IE5nVmlldyk6IGJvb2xlYW4ge1xuICByZXR1cm4gZWxlbWVudCAmJiAoPE5nVmlldz5lbGVtZW50KS5tZXRhICYmICg8TmdWaWV3PmVsZW1lbnQpLm1ldGEuc2tpcEFkZFRvRG9tO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWaWV3KHZpZXc6IHVua25vd24pOiB2aWV3IGlzIE5nVmlldyB7XG4gIHJldHVybiB2aWV3IGluc3RhbmNlb2YgVmlldztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSW52aXNpYmxlTm9kZSh2aWV3OiB1bmtub3duKTogdmlldyBpcyBJbnZpc2libGVOb2RlIHtcbiAgcmV0dXJuIHZpZXcgaW5zdGFuY2VvZiBJbnZpc2libGVOb2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMYXlvdXQodmlldzogdW5rbm93bik6IHZpZXcgaXMgTmdMYXlvdXRCYXNlIHtcbiAgcmV0dXJuIHZpZXcgaW5zdGFuY2VvZiBMYXlvdXRCYXNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb250ZW50Vmlldyh2aWV3OiB1bmtub3duKTogdmlldyBpcyBOZ0NvbnRlbnRWaWV3IHtcbiAgcmV0dXJuIHZpZXcgaW5zdGFuY2VvZiBDb250ZW50Vmlldztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpcnN0TmF0aXZlTGlrZVZpZXcodmlldzogVmlldywgZXh0cmFjdEZyb21OU1BhcmVudCA9IGZhbHNlKSB7XG4gIGlmICh2aWV3IGluc3RhbmNlb2YgUHJveHlWaWV3Q29udGFpbmVyKSB7XG4gICAgaWYgKHZpZXcuZ2V0Q2hpbGRyZW5Db3VudCgpID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGdldEZpcnN0TmF0aXZlTGlrZVZpZXcodmlldy5nZXRDaGlsZEF0KDApKTtcbiAgfVxuXG4gIGlmIChleHRyYWN0RnJvbU5TUGFyZW50KSB7XG4gICAgLy8gY29uc3Qgbm9kZSA9IHZpZXcucGFyZW50Tm9kZTtcbiAgICBkZXRhY2hWaWV3RnJvbVBhcmVudCh2aWV3KTtcbiAgICAvLyB2aWV3LnBhcmVudE5vZGUgPSBub2RlO1xuICB9XG4gIHJldHVybiB2aWV3O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGV0YWNoVmlld0Zyb21QYXJlbnQodmlldzogVmlldykge1xuICBjb25zdCBwYXJlbnQgPSA8TmdWaWV3PnZpZXc/LnBhcmVudDtcbiAgaWYgKCFwYXJlbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmVudC5tZXRhICYmIHBhcmVudC5tZXRhLnJlbW92ZUNoaWxkKSB7XG4gICAgcGFyZW50Lm1ldGEucmVtb3ZlQ2hpbGQocGFyZW50LCB2aWV3KTtcbiAgfSBlbHNlIGlmIChpc0xheW91dChwYXJlbnQpKSB7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKHZpZXcpO1xuICB9IGVsc2UgaWYgKGlzQ29udGVudFZpZXcocGFyZW50KSAmJiBwYXJlbnQuY29udGVudCA9PT0gdmlldykge1xuICAgIHBhcmVudC5jb250ZW50ID0gbnVsbDtcbiAgfSBlbHNlIGlmIChpc1ZpZXcocGFyZW50KSkge1xuICAgIHBhcmVudC5fcmVtb3ZlVmlldyh2aWV3KTtcbiAgfVxufVxuIl19