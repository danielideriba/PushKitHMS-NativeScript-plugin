import { NSLocationStrategy } from './ns-location-strategy';
import { PlatformLocation } from '@angular/common';
import { Injectable } from '@angular/core';
import { NativeScriptDebug } from '../../trace';
export class NativescriptPlatformLocation extends PlatformLocation {
    constructor(locationStrategy) {
        super();
        this.locationStrategy = locationStrategy;
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.routerLog('NativescriptPlatformLocation.constructor()');
        }
    }
    getState() {
        return undefined;
    }
    getBaseHrefFromDOM() {
        return '/';
    }
    onPopState(fn) {
        this.locationStrategy.onPopState(fn);
        return () => { };
    }
    onHashChange(_fn) {
        return () => { };
    }
    get search() {
        return '';
    }
    get hash() {
        return '';
    }
    get pathname() {
        return this.locationStrategy.path();
    }
    set pathname(_newPath) {
        throw new Error('NativescriptPlatformLocation set pathname - not implemented');
    }
    pushState(state, title, url) {
        this.locationStrategy.pushState(state, title, url, null);
    }
    replaceState(state, title, url) {
        this.locationStrategy.replaceState(state, title, url, null);
    }
    forward() {
        throw new Error('NativescriptPlatformLocation.forward() - not implemented');
    }
    back() {
        this.locationStrategy.back();
    }
}
NativescriptPlatformLocation.decorators = [
    { type: Injectable }
];
NativescriptPlatformLocation.ctorParameters = () => [
    { type: NSLocationStrategy }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtcGxhdGZvcm0tbG9jYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2xlZ2FjeS9yb3V0ZXIvbnMtcGxhdGZvcm0tbG9jYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUEwQixNQUFNLGlCQUFpQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR2hELE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxnQkFBZ0I7SUFDaEUsWUFBb0IsZ0JBQW9DO1FBQ3RELEtBQUssRUFBRSxDQUFDO1FBRFUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFvQjtRQUV0RCxJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3BDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1NBQzNFO0lBQ0gsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBT0Qsa0JBQWtCO1FBQ2hCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELFVBQVUsQ0FBQyxFQUEwQjtRQUNuQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRCxZQUFZLENBQUMsR0FBMkI7UUFDdEMsT0FBTyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUNELElBQUksSUFBSTtRQUNOLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUNELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFDRCxJQUFJLFFBQVEsQ0FBQyxRQUFnQjtRQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLDZEQUE2RCxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFVLEVBQUUsS0FBYSxFQUFFLEdBQVc7UUFDOUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQVUsRUFBRSxLQUFhLEVBQUUsR0FBVztRQUNqRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCxPQUFPO1FBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQywwREFBMEQsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQy9CLENBQUM7OztZQTFERixVQUFVOzs7WUFMRixrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOU0xvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tICcuL25zLWxvY2F0aW9uLXN0cmF0ZWd5JztcbmltcG9ydCB7IFBsYXRmb3JtTG9jYXRpb24sIExvY2F0aW9uQ2hhbmdlTGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0RGVidWcgfSBmcm9tICcuLi8uLi90cmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uIGV4dGVuZHMgUGxhdGZvcm1Mb2NhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYXRpb25TdHJhdGVneTogTlNMb2NhdGlvblN0cmF0ZWd5KSB7XG4gICAgc3VwZXIoKTtcbiAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgIE5hdGl2ZVNjcmlwdERlYnVnLnJvdXRlckxvZygnTmF0aXZlc2NyaXB0UGxhdGZvcm1Mb2NhdGlvbi5jb25zdHJ1Y3RvcigpJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0U3RhdGUoKTogYW55IHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmVhZG9ubHkgaG9zdG5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgaHJlZjogc3RyaW5nO1xuICByZWFkb25seSBwb3J0OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHByb3RvY29sOiBzdHJpbmc7XG5cbiAgZ2V0QmFzZUhyZWZGcm9tRE9NKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcvJztcbiAgfVxuXG4gIG9uUG9wU3RhdGUoZm46IExvY2F0aW9uQ2hhbmdlTGlzdGVuZXIpOiBWb2lkRnVuY3Rpb24ge1xuICAgIHRoaXMubG9jYXRpb25TdHJhdGVneS5vblBvcFN0YXRlKGZuKTtcbiAgICByZXR1cm4gKCkgPT4ge307XG4gIH1cblxuICBvbkhhc2hDaGFuZ2UoX2ZuOiBMb2NhdGlvbkNoYW5nZUxpc3RlbmVyKTogVm9pZEZ1bmN0aW9uIHtcbiAgICByZXR1cm4gKCkgPT4ge307XG4gIH1cblxuICBnZXQgc2VhcmNoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGdldCBoYXNoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGdldCBwYXRobmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kucGF0aCgpO1xuICB9XG4gIHNldCBwYXRobmFtZShfbmV3UGF0aDogc3RyaW5nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uIHNldCBwYXRobmFtZSAtIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgcHVzaFN0YXRlKHN0YXRlOiBhbnksIHRpdGxlOiBzdHJpbmcsIHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5sb2NhdGlvblN0cmF0ZWd5LnB1c2hTdGF0ZShzdGF0ZSwgdGl0bGUsIHVybCwgbnVsbCk7XG4gIH1cblxuICByZXBsYWNlU3RhdGUoc3RhdGU6IGFueSwgdGl0bGU6IHN0cmluZywgdXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kucmVwbGFjZVN0YXRlKHN0YXRlLCB0aXRsZSwgdXJsLCBudWxsKTtcbiAgfVxuXG4gIGZvcndhcmQoKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uLmZvcndhcmQoKSAtIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgYmFjaygpOiB2b2lkIHtcbiAgICB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kuYmFjaygpO1xuICB9XG59XG4iXX0=