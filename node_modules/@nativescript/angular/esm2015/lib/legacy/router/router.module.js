import { NgModule, NO_ERRORS_SCHEMA, Optional, SkipSelf } from '@angular/core';
import { RouterModule, RouteReuseStrategy } from '@angular/router';
import { LocationStrategy, PlatformLocation } from '@angular/common';
import { NSRouterLink } from './ns-router-link';
import { NSRouterLinkActive } from './ns-router-link-active';
import { PageRouterOutlet } from './page-router-outlet';
import { NSLocationStrategy } from './ns-location-strategy';
import { NativescriptPlatformLocation } from './ns-platform-location';
import { NSRouteReuseStrategy } from './ns-route-reuse-strategy';
import { RouterExtensions } from './router-extensions';
import { FrameService } from '../frame.service';
import { NSEmptyOutletComponent } from './ns-empty-outlet.component';
import { NativeScriptCommonModule } from '../../nativescript-common.module';
import { START_PATH } from '../../tokens';
export { PageRoute } from './page-router-outlet';
export { RouterExtensions } from './router-extensions';
export { Outlet, defaultNavOptions } from './ns-location-utils';
export { NSRouterLink } from './ns-router-link';
export { NSRouterLinkActive } from './ns-router-link-active';
export { PageRouterOutlet } from './page-router-outlet';
export { NSLocationStrategy } from './ns-location-strategy';
export { NSEmptyOutletComponent } from './ns-empty-outlet.component';
export function provideLocationStrategy(locationStrategy, frameService, startPath) {
    return locationStrategy ? locationStrategy : new NSLocationStrategy(frameService, startPath);
}
export class NativeScriptRouterModule {
    static forRoot(routes, config) {
        return {
            ngModule: NativeScriptRouterModule,
            providers: [
                ...RouterModule.forRoot(routes, config).providers,
                {
                    provide: NSLocationStrategy,
                    useFactory: provideLocationStrategy,
                    deps: [[NSLocationStrategy, new Optional(), new SkipSelf()], FrameService, [new Optional(), START_PATH]],
                },
                { provide: LocationStrategy, useExisting: NSLocationStrategy },
                NativescriptPlatformLocation,
                { provide: PlatformLocation, useExisting: NativescriptPlatformLocation },
                RouterExtensions,
                NSRouteReuseStrategy,
                { provide: RouteReuseStrategy, useExisting: NSRouteReuseStrategy },
            ],
        };
    }
    static forChild(routes) {
        return { ngModule: NativeScriptRouterModule, providers: RouterModule.forChild(routes).providers };
    }
}
NativeScriptRouterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent],
                entryComponents: [NSEmptyOutletComponent],
                imports: [RouterModule, NativeScriptCommonModule],
                exports: [RouterModule, NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent],
                schemas: [NO_ERRORS_SCHEMA],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbGVnYWN5L3JvdXRlci9yb3V0ZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEcsT0FBTyxFQUFFLFlBQVksRUFBd0Isa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxNQUFNLEVBQW9DLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxnQkFBb0MsRUFBRSxZQUEwQixFQUFFLFNBQWlCO0lBQ3pILE9BQU8sZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvRixDQUFDO0FBU0QsTUFBTSxPQUFPLHdCQUF3QjtJQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWMsRUFBRSxNQUFxQjtRQUNsRCxPQUFPO1lBQ0wsUUFBUSxFQUFFLHdCQUF3QjtZQUNsQyxTQUFTLEVBQUU7Z0JBQ1QsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxTQUFTO2dCQUNqRDtvQkFDRSxPQUFPLEVBQUUsa0JBQWtCO29CQUMzQixVQUFVLEVBQUUsdUJBQXVCO29CQUNuQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixFQUFFLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQ3pHO2dCQUNELEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRTtnQkFDOUQsNEJBQTRCO2dCQUM1QixFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsNEJBQTRCLEVBQUU7Z0JBQ3hFLGdCQUFnQjtnQkFDaEIsb0JBQW9CO2dCQUNwQixFQUFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUU7YUFDbkU7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBYztRQUM1QixPQUFPLEVBQUUsUUFBUSxFQUFFLHdCQUF3QixFQUFFLFNBQVMsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3BHLENBQUM7OztZQTlCRixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLENBQUMsWUFBWSxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLHNCQUFzQixDQUFDO2dCQUMxRixlQUFlLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztnQkFDekMsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLHdCQUF3QixDQUFDO2dCQUNqRCxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLHNCQUFzQixDQUFDO2dCQUNuRyxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQzthQUM1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOT19FUlJPUlNfU0NIRU1BLCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSwgUm91dGVzLCBFeHRyYU9wdGlvbnMsIFJvdXRlUmV1c2VTdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBMb2NhdGlvblN0cmF0ZWd5LCBQbGF0Zm9ybUxvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5TUm91dGVyTGluayB9IGZyb20gJy4vbnMtcm91dGVyLWxpbmsnO1xuaW1wb3J0IHsgTlNSb3V0ZXJMaW5rQWN0aXZlIH0gZnJvbSAnLi9ucy1yb3V0ZXItbGluay1hY3RpdmUnO1xuaW1wb3J0IHsgUGFnZVJvdXRlck91dGxldCB9IGZyb20gJy4vcGFnZS1yb3V0ZXItb3V0bGV0JztcbmltcG9ydCB7IE5TTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJy4vbnMtbG9jYXRpb24tc3RyYXRlZ3knO1xuaW1wb3J0IHsgTmF0aXZlc2NyaXB0UGxhdGZvcm1Mb2NhdGlvbiB9IGZyb20gJy4vbnMtcGxhdGZvcm0tbG9jYXRpb24nO1xuaW1wb3J0IHsgTlNSb3V0ZVJldXNlU3RyYXRlZ3kgfSBmcm9tICcuL25zLXJvdXRlLXJldXNlLXN0cmF0ZWd5JztcbmltcG9ydCB7IFJvdXRlckV4dGVuc2lvbnMgfSBmcm9tICcuL3JvdXRlci1leHRlbnNpb25zJztcbmltcG9ydCB7IEZyYW1lU2VydmljZSB9IGZyb20gJy4uL2ZyYW1lLnNlcnZpY2UnO1xuaW1wb3J0IHsgTlNFbXB0eU91dGxldENvbXBvbmVudCB9IGZyb20gJy4vbnMtZW1wdHktb3V0bGV0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHRDb21tb25Nb2R1bGUgfSBmcm9tICcuLi8uLi9uYXRpdmVzY3JpcHQtY29tbW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBTVEFSVF9QQVRIIH0gZnJvbSAnLi4vLi4vdG9rZW5zJztcblxuZXhwb3J0IHsgUGFnZVJvdXRlIH0gZnJvbSAnLi9wYWdlLXJvdXRlci1vdXRsZXQnO1xuZXhwb3J0IHsgUm91dGVyRXh0ZW5zaW9ucyB9IGZyb20gJy4vcm91dGVyLWV4dGVuc2lvbnMnO1xuZXhwb3J0IHsgT3V0bGV0LCBOYXZpZ2F0aW9uT3B0aW9ucywgTG9jYXRpb25TdGF0ZSwgZGVmYXVsdE5hdk9wdGlvbnMgfSBmcm9tICcuL25zLWxvY2F0aW9uLXV0aWxzJztcbmV4cG9ydCB7IE5TUm91dGVyTGluayB9IGZyb20gJy4vbnMtcm91dGVyLWxpbmsnO1xuZXhwb3J0IHsgTlNSb3V0ZXJMaW5rQWN0aXZlIH0gZnJvbSAnLi9ucy1yb3V0ZXItbGluay1hY3RpdmUnO1xuZXhwb3J0IHsgUGFnZVJvdXRlck91dGxldCB9IGZyb20gJy4vcGFnZS1yb3V0ZXItb3V0bGV0JztcbmV4cG9ydCB7IE5TTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJy4vbnMtbG9jYXRpb24tc3RyYXRlZ3knO1xuZXhwb3J0IHsgTlNFbXB0eU91dGxldENvbXBvbmVudCB9IGZyb20gJy4vbnMtZW1wdHktb3V0bGV0LmNvbXBvbmVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTG9jYXRpb25TdHJhdGVneShsb2NhdGlvblN0cmF0ZWd5OiBOU0xvY2F0aW9uU3RyYXRlZ3ksIGZyYW1lU2VydmljZTogRnJhbWVTZXJ2aWNlLCBzdGFydFBhdGg6IHN0cmluZyk6IE5TTG9jYXRpb25TdHJhdGVneSB7XG4gIHJldHVybiBsb2NhdGlvblN0cmF0ZWd5ID8gbG9jYXRpb25TdHJhdGVneSA6IG5ldyBOU0xvY2F0aW9uU3RyYXRlZ3koZnJhbWVTZXJ2aWNlLCBzdGFydFBhdGgpO1xufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOU1JvdXRlckxpbmssIE5TUm91dGVyTGlua0FjdGl2ZSwgUGFnZVJvdXRlck91dGxldCwgTlNFbXB0eU91dGxldENvbXBvbmVudF0sXG4gIGVudHJ5Q29tcG9uZW50czogW05TRW1wdHlPdXRsZXRDb21wb25lbnRdLFxuICBpbXBvcnRzOiBbUm91dGVyTW9kdWxlLCBOYXRpdmVTY3JpcHRDb21tb25Nb2R1bGVdLFxuICBleHBvcnRzOiBbUm91dGVyTW9kdWxlLCBOU1JvdXRlckxpbmssIE5TUm91dGVyTGlua0FjdGl2ZSwgUGFnZVJvdXRlck91dGxldCwgTlNFbXB0eU91dGxldENvbXBvbmVudF0sXG4gIHNjaGVtYXM6IFtOT19FUlJPUlNfU0NIRU1BXSxcbn0pXG5leHBvcnQgY2xhc3MgTmF0aXZlU2NyaXB0Um91dGVyTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3Qocm91dGVzOiBSb3V0ZXMsIGNvbmZpZz86IEV4dHJhT3B0aW9ucyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TmF0aXZlU2NyaXB0Um91dGVyTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOYXRpdmVTY3JpcHRSb3V0ZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgLi4uUm91dGVyTW9kdWxlLmZvclJvb3Qocm91dGVzLCBjb25maWcpLnByb3ZpZGVycyxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5TTG9jYXRpb25TdHJhdGVneSxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBwcm92aWRlTG9jYXRpb25TdHJhdGVneSxcbiAgICAgICAgICBkZXBzOiBbW05TTG9jYXRpb25TdHJhdGVneSwgbmV3IE9wdGlvbmFsKCksIG5ldyBTa2lwU2VsZigpXSwgRnJhbWVTZXJ2aWNlLCBbbmV3IE9wdGlvbmFsKCksIFNUQVJUX1BBVEhdXSxcbiAgICAgICAgfSxcbiAgICAgICAgeyBwcm92aWRlOiBMb2NhdGlvblN0cmF0ZWd5LCB1c2VFeGlzdGluZzogTlNMb2NhdGlvblN0cmF0ZWd5IH0sXG4gICAgICAgIE5hdGl2ZXNjcmlwdFBsYXRmb3JtTG9jYXRpb24sXG4gICAgICAgIHsgcHJvdmlkZTogUGxhdGZvcm1Mb2NhdGlvbiwgdXNlRXhpc3Rpbmc6IE5hdGl2ZXNjcmlwdFBsYXRmb3JtTG9jYXRpb24gfSxcbiAgICAgICAgUm91dGVyRXh0ZW5zaW9ucyxcbiAgICAgICAgTlNSb3V0ZVJldXNlU3RyYXRlZ3ksXG4gICAgICAgIHsgcHJvdmlkZTogUm91dGVSZXVzZVN0cmF0ZWd5LCB1c2VFeGlzdGluZzogTlNSb3V0ZVJldXNlU3RyYXRlZ3kgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JDaGlsZChyb3V0ZXM6IFJvdXRlcyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TmF0aXZlU2NyaXB0Um91dGVyTW9kdWxlPiB7XG4gICAgcmV0dXJuIHsgbmdNb2R1bGU6IE5hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZSwgcHJvdmlkZXJzOiBSb3V0ZXJNb2R1bGUuZm9yQ2hpbGQocm91dGVzKS5wcm92aWRlcnMgfTtcbiAgfVxufVxuIl19