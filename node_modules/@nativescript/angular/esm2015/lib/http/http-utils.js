import { path } from '@nativescript/core';
import { Observable } from 'rxjs';
export function isLocalRequest(url) {
    return url.indexOf('~') === 0 || url.indexOf('/') === 0;
}
export function getAbsolutePath(url, nsFileSystem) {
    url = url.replace('~', '').replace('/', '');
    url = path.join(nsFileSystem.currentApp().path, url);
    return url;
}
export function processLocalFileRequest(url, nsFileSystem, successResponse, errorResponse) {
    url = getAbsolutePath(url, nsFileSystem);
    // request from local app resources
    return new Observable((observer) => {
        if (nsFileSystem.fileExists(url)) {
            const localFile = nsFileSystem.fileFromPath(url);
            localFile.readText().then((data) => {
                try {
                    const json = JSON.parse(data);
                    observer.next(successResponse(url, json, 200));
                    observer.complete();
                }
                catch (error) {
                    // Even though the response status was 2xx, this is still an error.
                    // The parse error contains the text of the body that failed to parse.
                    const errorResult = { error, text: data };
                    observer.error(errorResponse(url, errorResult, 200));
                }
            }, (err) => {
                observer.error(errorResponse(url, err, 400));
            });
        }
        else {
            observer.error(errorResponse(url, 'Not Found', 404));
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvaHR0cC9odHRwLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsVUFBVSxFQUFZLE1BQU0sTUFBTSxDQUFDO0FBTTVDLE1BQU0sVUFBVSxjQUFjLENBQUMsR0FBVztJQUN4QyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQVcsRUFBRSxZQUEwQjtJQUNyRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM1QyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3JELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FBSSxHQUFXLEVBQUUsWUFBMEIsRUFBRSxlQUF1QyxFQUFFLGFBQStCO0lBQzFKLEdBQUcsR0FBRyxlQUFlLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRXpDLG1DQUFtQztJQUNuQyxPQUFPLElBQUksVUFBVSxDQUFDLENBQUMsUUFBcUIsRUFBRSxFQUFFO1FBQzlDLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNoQyxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pELFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQ3ZCLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ1AsSUFBSTtvQkFDRixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUM5QixRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQy9DLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztpQkFDckI7Z0JBQUMsT0FBTyxLQUFLLEVBQUU7b0JBQ2QsbUVBQW1FO29CQUNuRSxzRUFBc0U7b0JBQ3RFLE1BQU0sV0FBVyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztvQkFDMUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUN0RDtZQUNILENBQUMsRUFDRCxDQUFDLEdBQVcsRUFBRSxFQUFFO2dCQUNkLFFBQVEsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMvQyxDQUFDLENBQ0YsQ0FBQztTQUNIO2FBQU07WUFDTCxRQUFRLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDdEQ7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXRoIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOU0ZpbGVTeXN0ZW0gfSBmcm9tICcuLi9maWxlLXN5c3RlbS9ucy1maWxlLXN5c3RlbSc7XG5cbmV4cG9ydCB0eXBlIGh0dHBSZXNwb25zZUZhY3Rvcnk8VD4gPSAodXJsOiBzdHJpbmcsIGJvZHk6IGFueSwgc3RhdHVzOiBudW1iZXIpID0+IFQ7XG5leHBvcnQgdHlwZSBodHRwRXJyb3JGYWN0b3J5ID0gKHVybDogc3RyaW5nLCBib2R5OiBhbnksIHN0YXR1czogbnVtYmVyKSA9PiBhbnk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xvY2FsUmVxdWVzdCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gdXJsLmluZGV4T2YoJ34nKSA9PT0gMCB8fCB1cmwuaW5kZXhPZignLycpID09PSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWJzb2x1dGVQYXRoKHVybDogc3RyaW5nLCBuc0ZpbGVTeXN0ZW06IE5TRmlsZVN5c3RlbSk6IHN0cmluZyB7XG4gIHVybCA9IHVybC5yZXBsYWNlKCd+JywgJycpLnJlcGxhY2UoJy8nLCAnJyk7XG4gIHVybCA9IHBhdGguam9pbihuc0ZpbGVTeXN0ZW0uY3VycmVudEFwcCgpLnBhdGgsIHVybCk7XG4gIHJldHVybiB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzTG9jYWxGaWxlUmVxdWVzdDxUPih1cmw6IHN0cmluZywgbnNGaWxlU3lzdGVtOiBOU0ZpbGVTeXN0ZW0sIHN1Y2Nlc3NSZXNwb25zZTogaHR0cFJlc3BvbnNlRmFjdG9yeTxUPiwgZXJyb3JSZXNwb25zZTogaHR0cEVycm9yRmFjdG9yeSk6IE9ic2VydmFibGU8VD4ge1xuICB1cmwgPSBnZXRBYnNvbHV0ZVBhdGgodXJsLCBuc0ZpbGVTeXN0ZW0pO1xuXG4gIC8vIHJlcXVlc3QgZnJvbSBsb2NhbCBhcHAgcmVzb3VyY2VzXG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+KSA9PiB7XG4gICAgaWYgKG5zRmlsZVN5c3RlbS5maWxlRXhpc3RzKHVybCkpIHtcbiAgICAgIGNvbnN0IGxvY2FsRmlsZSA9IG5zRmlsZVN5c3RlbS5maWxlRnJvbVBhdGgodXJsKTtcbiAgICAgIGxvY2FsRmlsZS5yZWFkVGV4dCgpLnRoZW4oXG4gICAgICAgIChkYXRhKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChzdWNjZXNzUmVzcG9uc2UodXJsLCBqc29uLCAyMDApKTtcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEV2ZW4gdGhvdWdoIHRoZSByZXNwb25zZSBzdGF0dXMgd2FzIDJ4eCwgdGhpcyBpcyBzdGlsbCBhbiBlcnJvci5cbiAgICAgICAgICAgIC8vIFRoZSBwYXJzZSBlcnJvciBjb250YWlucyB0aGUgdGV4dCBvZiB0aGUgYm9keSB0aGF0IGZhaWxlZCB0byBwYXJzZS5cbiAgICAgICAgICAgIGNvbnN0IGVycm9yUmVzdWx0ID0geyBlcnJvciwgdGV4dDogZGF0YSB9O1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3JSZXNwb25zZSh1cmwsIGVycm9yUmVzdWx0LCAyMDApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIChlcnI6IE9iamVjdCkgPT4ge1xuICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yUmVzcG9uc2UodXJsLCBlcnIsIDQwMCkpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYnNlcnZlci5lcnJvcihlcnJvclJlc3BvbnNlKHVybCwgJ05vdCBGb3VuZCcsIDQwNCkpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=