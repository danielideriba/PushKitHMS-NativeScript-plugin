import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class NativeScriptLoadingService {
    constructor() {
        this.mainModuleReady$ = new BehaviorSubject(false);
        this.readyToDestroy$ = new BehaviorSubject(true);
        this.onMainModuleReady$ = this.mainModuleReady$.pipe(filter((ready) => ready));
    }
    /**
     * delays destroying this module until `notifyReadyToDestroy()`.
     * remember to call `notifyReadyToDestroy()` when done!
     */
    waitUntilNotified() {
        this.readyToDestroy$.next(false);
    }
    /**
     * notifies this module is ready to be destroyed
     */
    notifyReadyToDestroy() {
        this.readyToDestroy$.next(true);
    }
    isMainModuleReady() {
        return this.mainModuleReady$.value;
    }
    ngOnDestroy() {
        this.readyToDestroy$.complete();
        this.mainModuleReady$.complete();
    }
    /**
     * This funcion is called by the bootstrap code when the app is ready
     * @internal
     */
    _notifyMainModuleReady() {
        this.mainModuleReady$.next(true);
    }
}
NativeScriptLoadingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NativeScriptLoadingService_Factory() { return new NativeScriptLoadingService(); }, token: NativeScriptLoadingService, providedIn: "root" });
NativeScriptLoadingService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9sb2FkaW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHeEMsTUFBTSxPQUFPLDBCQUEwQjtJQUR2QztRQUVVLHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RELG9CQUFlLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsdUJBQWtCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7S0ErQjNFO0lBN0JDOzs7T0FHRztJQUNILGlCQUFpQjtRQUNmLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7T0FFRztJQUNILG9CQUFvQjtRQUNsQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ0QsaUJBQWlCO1FBQ2YsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVEOzs7T0FHRztJQUNILHNCQUFzQjtRQUNwQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7WUFsQ0YsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTmF0aXZlU2NyaXB0TG9hZGluZ1NlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIG1haW5Nb2R1bGVSZWFkeSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcbiAgcmVhZHlUb0Rlc3Ryb3kkID0gbmV3IEJlaGF2aW9yU3ViamVjdCh0cnVlKTtcbiAgb25NYWluTW9kdWxlUmVhZHkkID0gdGhpcy5tYWluTW9kdWxlUmVhZHkkLnBpcGUoZmlsdGVyKChyZWFkeSkgPT4gcmVhZHkpKTtcblxuICAvKipcbiAgICogZGVsYXlzIGRlc3Ryb3lpbmcgdGhpcyBtb2R1bGUgdW50aWwgYG5vdGlmeVJlYWR5VG9EZXN0cm95KClgLlxuICAgKiByZW1lbWJlciB0byBjYWxsIGBub3RpZnlSZWFkeVRvRGVzdHJveSgpYCB3aGVuIGRvbmUhXG4gICAqL1xuICB3YWl0VW50aWxOb3RpZmllZCgpIHtcbiAgICB0aGlzLnJlYWR5VG9EZXN0cm95JC5uZXh0KGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBub3RpZmllcyB0aGlzIG1vZHVsZSBpcyByZWFkeSB0byBiZSBkZXN0cm95ZWRcbiAgICovXG4gIG5vdGlmeVJlYWR5VG9EZXN0cm95KCkge1xuICAgIHRoaXMucmVhZHlUb0Rlc3Ryb3kkLm5leHQodHJ1ZSk7XG4gIH1cbiAgaXNNYWluTW9kdWxlUmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFpbk1vZHVsZVJlYWR5JC52YWx1ZTtcbiAgfVxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlYWR5VG9EZXN0cm95JC5jb21wbGV0ZSgpO1xuICAgIHRoaXMubWFpbk1vZHVsZVJlYWR5JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY2lvbiBpcyBjYWxsZWQgYnkgdGhlIGJvb3RzdHJhcCBjb2RlIHdoZW4gdGhlIGFwcCBpcyByZWFkeVxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9ub3RpZnlNYWluTW9kdWxlUmVhZHkoKSB7XG4gICAgdGhpcy5tYWluTW9kdWxlUmVhZHkkLm5leHQodHJ1ZSk7XG4gIH1cbn1cbiJdfQ==