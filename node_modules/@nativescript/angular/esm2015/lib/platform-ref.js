import { PlatformRef } from '@angular/core';
import { runNativeScriptAngularApp } from './application';
export class NativeScriptPlatformRefProxy extends PlatformRef {
    constructor(platform, launchView) {
        super();
        this.platform = platform;
        this.launchView = launchView;
    }
    bootstrapModuleFactory(moduleFactory) {
        this.options = {
            appModuleBootstrap: () => this.platform.bootstrapModuleFactory(moduleFactory),
            launchView: () => this.launchView,
        };
        runNativeScriptAngularApp(this.options);
        return null;
    }
    bootstrapModule(moduleType, compilerOptions) {
        this.options = {
            appModuleBootstrap: () => this.platform.bootstrapModule(moduleType, compilerOptions),
        };
        runNativeScriptAngularApp(this.options);
        return null;
    }
    onDestroy(callback) {
        this.platform.onDestroy(callback);
    }
    get injector() {
        return this.platform.injector;
    }
    destroy() {
        this.platform.destroy();
    }
    get destroyed() {
        return this.platform.destroyed;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0tcmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9wbGF0Zm9ybS1yZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFrRCxXQUFXLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFFbEcsT0FBTyxFQUFnQyx5QkFBeUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQXdEeEYsTUFBTSxPQUFPLDRCQUE2QixTQUFRLFdBQVc7SUFFM0QsWUFBb0IsUUFBcUIsRUFBVSxVQUEwQjtRQUMzRSxLQUFLLEVBQUUsQ0FBQztRQURVLGFBQVEsR0FBUixRQUFRLENBQWE7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFnQjtJQUU3RSxDQUFDO0lBRUQsc0JBQXNCLENBQUksYUFBaUM7UUFDekQsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsYUFBYSxDQUFDO1lBQzdFLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVTtTQUNsQyxDQUFDO1FBRUYseUJBQXlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXhDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNELGVBQWUsQ0FBSSxVQUFtQixFQUFFLGVBQWtHO1FBQ3hJLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixrQkFBa0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFDO1NBQ3JGLENBQUM7UUFFRix5QkFBeUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFeEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsU0FBUyxDQUFDLFFBQW9CO1FBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztJQUNqQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21waWxlck9wdGlvbnMsIEluamVjdG9yLCBOZ01vZHVsZVJlZiwgTmdab25lLCBQbGF0Zm9ybVJlZiwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgybVOZ01vZHVsZUZhY3RvcnkgYXMgTmdNb2R1bGVGYWN0b3J5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBMYXVuY2hWaWV3LCBBcHBSdW5PcHRpb25zLCBydW5OYXRpdmVTY3JpcHRBbmd1bGFyQXBwIH0gZnJvbSAnLi9hcHBsaWNhdGlvbic7XG5cbi8qKlxuICogUHJvdmlkZXMgYWRkaXRpb25hbCBvcHRpb25zIHRvIHRoZSBib290c3RyYXBpbmcgcHJvY2Vzcy5cbiAqXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJvb3RzdHJhcE9wdGlvbnMge1xuICAvKipcbiAgICogT3B0aW9uYWxseSBzcGVjaWZ5IHdoaWNoIGBOZ1pvbmVgIHNob3VsZCBiZSB1c2VkLlxuICAgKlxuICAgKiAtIFByb3ZpZGUgeW91ciBvd24gYE5nWm9uZWAgaW5zdGFuY2UuXG4gICAqIC0gYHpvbmUuanNgIC0gVXNlIGRlZmF1bHQgYE5nWm9uZWAgd2hpY2ggcmVxdWlyZXMgYFpvbmUuanNgLlxuICAgKiAtIGBub29wYCAtIFVzZSBgTm9vcE5nWm9uZWAgd2hpY2ggZG9lcyBub3RoaW5nLlxuICAgKi9cbiAgbmdab25lPzogTmdab25lIHwgJ3pvbmUuanMnIHwgJ25vb3AnO1xuICAvKipcbiAgICogT3B0aW9uYWxseSBzcGVjaWZ5IGNvYWxlc2NpbmcgZXZlbnQgY2hhbmdlIGRldGVjdGlvbnMgb3Igbm90LlxuICAgKiBDb25zaWRlciB0aGUgZm9sbG93aW5nIGNhc2UuXG4gICAqXG4gICAqIDxkaXYgKGNsaWNrKT1cImRvU29tZXRoaW5nKClcIj5cbiAgICogICA8YnV0dG9uIChjbGljayk9XCJkb1NvbWV0aGluZ0Vsc2UoKVwiPjwvYnV0dG9uPlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogV2hlbiBidXR0b24gaXMgY2xpY2tlZCwgYmVjYXVzZSBvZiB0aGUgZXZlbnQgYnViYmxpbmcsIGJvdGhcbiAgICogZXZlbnQgaGFuZGxlcnMgd2lsbCBiZSBjYWxsZWQgYW5kIDIgY2hhbmdlIGRldGVjdGlvbnMgd2lsbCBiZVxuICAgKiB0cmlnZ2VyZWQuIFdlIGNhbiBjb2xlc2NlIHN1Y2gga2luZCBvZiBldmVudHMgdG8gb25seSB0cmlnZ2VyXG4gICAqIGNoYW5nZSBkZXRlY3Rpb24gb25seSBvbmNlLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCB0aGlzIG9wdGlvbiB3aWxsIGJlIGZhbHNlLiBTbyB0aGUgZXZlbnRzIHdpbGwgbm90IGJlXG4gICAqIGNvYWxlc2NlZCBhbmQgdGhlIGNoYW5nZSBkZXRlY3Rpb24gd2lsbCBiZSB0cmlnZ2VyZWQgbXVsdGlwbGUgdGltZXMuXG4gICAqIEFuZCBpZiB0aGlzIG9wdGlvbiBiZSBzZXQgdG8gdHJ1ZSwgdGhlIGNoYW5nZSBkZXRlY3Rpb24gd2lsbCBiZVxuICAgKiB0cmlnZ2VyZWQgYXN5bmMgYnkgc2NoZWR1bGluZyBhIGFuaW1hdGlvbiBmcmFtZS4gU28gaW4gdGhlIGNhc2UgYWJvdmUsXG4gICAqIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgb25jZS5cbiAgICovXG4gIG5nWm9uZUV2ZW50Q29hbGVzY2luZz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBPcHRpb25hbGx5IHNwZWNpZnkgaWYgYE5nWm9uZSNydW4oKWAgbWV0aG9kIGludm9jYXRpb25zIHNob3VsZCBiZSBjb2FsZXNjZWRcbiAgICogaW50byBhIHNpbmdsZSBjaGFuZ2UgZGV0ZWN0aW9uLlxuICAgKlxuICAgKiBDb25zaWRlciB0aGUgZm9sbG93aW5nIGNhc2UuXG4gICAqXG4gICAqIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKyspIHtcbiAgICogICBuZ1pvbmUucnVuKCgpID0+IHtcbiAgICogICAgIC8vIGRvIHNvbWV0aGluZ1xuICAgKiAgIH0pO1xuICAgKiB9XG4gICAqXG4gICAqIFRoaXMgY2FzZSB0cmlnZ2VycyB0aGUgY2hhbmdlIGRldGVjdGlvbiBtdWx0aXBsZSB0aW1lcy5cbiAgICogV2l0aCBuZ1pvbmVSdW5Db2FsZXNjaW5nIG9wdGlvbnMsIGFsbCBjaGFuZ2UgZGV0ZWN0aW9ucyBpbiBhbiBldmVudCBsb29wIHRyaWdnZXIgb25seSBvbmNlLlxuICAgKiBJbiBhZGRpdGlvbiwgdGhlIGNoYW5nZSBkZXRlY3Rpb24gZXhlY3V0ZXMgaW4gcmVxdWVzdEFuaW1hdGlvbi5cbiAgICpcbiAgICovXG4gIG5nWm9uZVJ1bkNvYWxlc2Npbmc/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgTmF0aXZlU2NyaXB0UGxhdGZvcm1SZWZQcm94eSBleHRlbmRzIFBsYXRmb3JtUmVmIHtcbiAgb3B0aW9uczogQXBwUnVuT3B0aW9uczxhbnksIGFueT47XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGxhdGZvcm06IFBsYXRmb3JtUmVmLCBwcml2YXRlIGxhdW5jaFZpZXc/OiBBcHBMYXVuY2hWaWV3KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGJvb3RzdHJhcE1vZHVsZUZhY3Rvcnk8TT4obW9kdWxlRmFjdG9yeTogTmdNb2R1bGVGYWN0b3J5PE0+KTogUHJvbWlzZTxOZ01vZHVsZVJlZjxNPj4ge1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGFwcE1vZHVsZUJvb3RzdHJhcDogKCkgPT4gdGhpcy5wbGF0Zm9ybS5ib290c3RyYXBNb2R1bGVGYWN0b3J5KG1vZHVsZUZhY3RvcnkpLFxuICAgICAgbGF1bmNoVmlldzogKCkgPT4gdGhpcy5sYXVuY2hWaWV3LFxuICAgIH07XG5cbiAgICBydW5OYXRpdmVTY3JpcHRBbmd1bGFyQXBwKHRoaXMub3B0aW9ucyk7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBib290c3RyYXBNb2R1bGU8TT4obW9kdWxlVHlwZTogVHlwZTxNPiwgY29tcGlsZXJPcHRpb25zPzogKENvbXBpbGVyT3B0aW9ucyAmIEJvb3RzdHJhcE9wdGlvbnMpIHwgQXJyYXk8Q29tcGlsZXJPcHRpb25zICYgQm9vdHN0cmFwT3B0aW9ucz4pOiBQcm9taXNlPE5nTW9kdWxlUmVmPE0+PiB7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgYXBwTW9kdWxlQm9vdHN0cmFwOiAoKSA9PiB0aGlzLnBsYXRmb3JtLmJvb3RzdHJhcE1vZHVsZShtb2R1bGVUeXBlLCBjb21waWxlck9wdGlvbnMpLFxuICAgIH07XG5cbiAgICBydW5OYXRpdmVTY3JpcHRBbmd1bGFyQXBwKHRoaXMub3B0aW9ucyk7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG9uRGVzdHJveShjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMucGxhdGZvcm0ub25EZXN0cm95KGNhbGxiYWNrKTtcbiAgfVxuXG4gIGdldCBpbmplY3RvcigpOiBJbmplY3RvciB7XG4gICAgcmV0dXJuIHRoaXMucGxhdGZvcm0uaW5qZWN0b3I7XG4gIH1cblxuICBkZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMucGxhdGZvcm0uZGVzdHJveSgpO1xuICB9XG5cbiAgZ2V0IGRlc3Ryb3llZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wbGF0Zm9ybS5kZXN0cm95ZWQ7XG4gIH1cbn1cbiJdfQ==