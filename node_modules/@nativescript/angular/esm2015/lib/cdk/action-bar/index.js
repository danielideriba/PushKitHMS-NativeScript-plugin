import { Directive, Component, ElementRef, Optional } from '@angular/core';
import { ActionBar, ActionItem, NavigationButton, Page } from '@nativescript/core';
import { isBlank } from '../../utils/lang-facade';
import { isInvisibleNode, isView } from '../../views/utils';
import { registerElement } from '../../element-registry';
export function isActionItem(view) {
    return view instanceof ActionItem;
}
export function isNavigationButton(view) {
    return view instanceof NavigationButton;
}
const ɵ0 = (parent, child, next) => {
    if (isInvisibleNode(child)) {
        return;
    }
    else if (isNavigationButton(child)) {
        parent.navigationButton = child;
        child.parentNode = parent;
    }
    else if (isActionItem(child)) {
        addActionItem(parent, child, next);
        child.parentNode = parent;
    }
    else if (isView(child)) {
        parent.titleView = child;
    }
}, ɵ1 = (parent, child) => {
    if (isInvisibleNode(child)) {
        return;
    }
    else if (isNavigationButton(child)) {
        if (parent.navigationButton === child) {
            parent.navigationButton = null;
        }
        child.parentNode = null;
    }
    else if (isActionItem(child)) {
        parent.actionItems.removeItem(child);
        child.parentNode = null;
    }
    else if (isView(child) && parent.titleView && parent.titleView === child) {
        parent.titleView = null;
    }
};
export const actionBarMeta = {
    skipAddToDom: true,
    insertChild: ɵ0,
    removeChild: ɵ1,
};
registerElement('ActionBar', () => ActionBar, actionBarMeta);
registerElement('ActionItem', () => ActionItem);
registerElement('NavigationButton', () => NavigationButton);
const addActionItem = (bar, item, next) => {
    if (next) {
        insertActionItemBefore(bar, item, next);
    }
    else {
        appendActionItem(bar, item);
    }
};
const ɵ2 = addActionItem;
const insertActionItemBefore = (bar, item, next) => {
    const actionItems = bar.actionItems;
    const actionItemsCollection = actionItems.getItems();
    const indexToInsert = actionItemsCollection.indexOf(next);
    actionItemsCollection.splice(indexToInsert, 0, item);
    actionItems.setItems(actionItemsCollection);
};
const ɵ3 = insertActionItemBefore;
const appendActionItem = (bar, item) => {
    bar.actionItems.addItem(item);
};
const ɵ4 = appendActionItem;
export class ActionBarComponent {
    constructor(element, page) {
        this.element = element;
        this.page = page;
        if (!this.page) {
            throw new Error('Inside ActionBarComponent but no Page found in DI.');
        }
        if (isBlank(this.page.actionBarHidden)) {
            this.page.actionBarHidden = false;
        }
        this.page.actionBar = this.element.nativeElement;
        this.page.actionBar.update();
    }
}
ActionBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ActionBar',
                template: '<ng-content></ng-content>'
            },] }
];
ActionBarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Page }
];
export class ActionBarScope {
    // tslint:disable-line:component-class-suffix
    constructor(page) {
        this.page = page;
        if (!this.page) {
            throw new Error('Inside ActionBarScope but no Page found in DI.');
        }
    }
    onNavButtonInit(navBtn) {
        this.page.actionBar.navigationButton = navBtn.element.nativeElement;
    }
    onNavButtonDestroy(navBtn) {
        const nav = navBtn.element.nativeElement;
        if (nav && this.page.actionBar.navigationButton === nav) {
            this.page.actionBar.navigationButton = null;
        }
    }
    onActionInit(item) {
        this.page.actionBar.actionItems.addItem(item.element.nativeElement);
    }
    onActionDestroy(item) {
        if (item.element.nativeElement.actionBar) {
            this.page.actionBar.actionItems.removeItem(item.element.nativeElement);
        }
    }
}
ActionBarScope.decorators = [
    { type: Component, args: [{
                selector: 'ActionBarExtension',
                template: ''
            },] }
];
ActionBarScope.ctorParameters = () => [
    { type: Page }
];
export class ActionItemDirective {
    constructor(element, ownerScope) {
        this.element = element;
        this.ownerScope = ownerScope;
        if (this.ownerScope) {
            this.ownerScope.onActionInit(this);
        }
    }
    ngOnDestroy() {
        if (this.ownerScope) {
            this.ownerScope.onActionDestroy(this);
        }
    }
}
ActionItemDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ActionItem', // tslint:disable-line:directive-selector
            },] }
];
ActionItemDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ActionBarScope, decorators: [{ type: Optional }] }
];
export class NavigationButtonDirective {
    constructor(element, ownerScope) {
        this.element = element;
        this.ownerScope = ownerScope;
        if (this.ownerScope) {
            this.ownerScope.onNavButtonInit(this);
        }
    }
    ngOnDestroy() {
        if (this.ownerScope) {
            this.ownerScope.onNavButtonDestroy(this);
        }
    }
}
NavigationButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: 'NavigationButton', // tslint:disable-line:directive-selector
            },] }
];
NavigationButtonDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ActionBarScope, decorators: [{ type: Optional }] }
];
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,