import { Component, ElementRef, Input, Renderer2 } from '@angular/core';
import { Frame, Page } from '@nativescript/core';
import { frameMeta, registerElement } from '../../element-registry';
import { PageService } from './page.service';
export function customFrameComponentFactory(v) {
    return v.element.nativeElement;
}
export function customPageFactoryFromFrame(v) {
    return v.page;
}
registerElement('FramePage', () => Frame, {
    insertChild: (parent, child) => {
        if (child instanceof Page) {
            frameMeta.insertChild(parent, child);
            return;
        }
        parent['__ng_page__'].content = child;
    },
});
export class FramePageComponent {
    constructor(element, renderer) {
        this.element = element;
        this.actionBarHidden = false;
        this.page = renderer.createElement('Page');
        element.nativeElement['__ng_page__'] = this.page;
        renderer.appendChild(element.nativeElement, this.page);
    }
    ngOnChanges(changes) {
        if (changes.actionBarHidden && changes.actionBarHidden.previousValue !== changes.actionBarHidden.currentValue) {
            if (this.page) {
                this.page.actionBarHidden = !!this.actionBarHidden;
            }
        }
    }
    ngAfterViewInit() {
        if (this.page) {
            this.page.actionBarHidden = !!this.actionBarHidden;
        }
    }
}
FramePageComponent.decorators = [
    { type: Component, args: [{
                // eslint-disable-next-line @angular-eslint/component-selector
                selector: 'FramePage',
                template: `<ng-content></ng-content>`,
                providers: [
                    {
                        provide: Frame,
                        useFactory: customFrameComponentFactory,
                        deps: [FramePageComponent],
                    },
                    {
                        provide: Page,
                        useFactory: customPageFactoryFromFrame,
                        deps: [FramePageComponent],
                    },
                    PageService,
                ]
            },] }
];
FramePageComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
FramePageComponent.propDecorators = {
    actionBarHidden: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWUtcGFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2Nkay9mcmFtZS1wYWdlL2ZyYW1lLXBhZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQWEsU0FBUyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUM1SCxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBUSxNQUFNLG9CQUFvQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE1BQU0sVUFBVSwyQkFBMkIsQ0FBQyxDQUFxQjtJQUMvRCxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ2pDLENBQUM7QUFFRCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsQ0FBcUI7SUFDOUQsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxlQUFlLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRTtJQUN4QyxXQUFXLEVBQUUsQ0FBQyxNQUFhLEVBQUUsS0FBVyxFQUFFLEVBQUU7UUFDMUMsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFO1lBQ3pCLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3JDLE9BQU87U0FDUjtRQUNELE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3hDLENBQUM7Q0FDRixDQUFDLENBQUM7QUFtQkgsTUFBTSxPQUFPLGtCQUFrQjtJQUs3QixZQUFtQixPQUEwQixFQUFFLFFBQW1CO1FBQS9DLFlBQU8sR0FBUCxPQUFPLENBQW1CO1FBRnBDLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBRy9CLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQVMsQ0FBQztRQUNuRCxPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDakQsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLGFBQWEsS0FBSyxPQUFPLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRTtZQUM3RyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7YUFDcEQ7U0FDRjtJQUNILENBQUM7SUFDRCxlQUFlO1FBQ2IsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7U0FDcEQ7SUFDSCxDQUFDOzs7WUF4Q0YsU0FBUyxTQUFDO2dCQUNULDhEQUE4RDtnQkFDOUQsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsS0FBSzt3QkFDZCxVQUFVLEVBQUUsMkJBQTJCO3dCQUN2QyxJQUFJLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztxQkFDM0I7b0JBQ0Q7d0JBQ0UsT0FBTyxFQUFFLElBQUk7d0JBQ2IsVUFBVSxFQUFFLDBCQUEwQjt3QkFDdEMsSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUM7cUJBQzNCO29CQUNELFdBQVc7aUJBQ1o7YUFDRjs7O1lBdkNrQyxVQUFVO1lBQW9CLFNBQVM7Ozs4QkEyQ3ZFLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkNoYW5nZXMsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcywgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGcmFtZSwgUGFnZSwgVmlldyB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBmcmFtZU1ldGEsIHJlZ2lzdGVyRWxlbWVudCB9IGZyb20gJy4uLy4uL2VsZW1lbnQtcmVnaXN0cnknO1xuaW1wb3J0IHsgUGFnZVNlcnZpY2UgfSBmcm9tICcuL3BhZ2Uuc2VydmljZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21GcmFtZUNvbXBvbmVudEZhY3RvcnkodjogRnJhbWVQYWdlQ29tcG9uZW50KSB7XG4gIHJldHVybiB2LmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbVBhZ2VGYWN0b3J5RnJvbUZyYW1lKHY6IEZyYW1lUGFnZUNvbXBvbmVudCkge1xuICByZXR1cm4gdi5wYWdlO1xufVxuXG5yZWdpc3RlckVsZW1lbnQoJ0ZyYW1lUGFnZScsICgpID0+IEZyYW1lLCB7XG4gIGluc2VydENoaWxkOiAocGFyZW50OiBGcmFtZSwgY2hpbGQ6IFZpZXcpID0+IHtcbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBQYWdlKSB7XG4gICAgICBmcmFtZU1ldGEuaW5zZXJ0Q2hpbGQocGFyZW50LCBjaGlsZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHBhcmVudFsnX19uZ19wYWdlX18nXS5jb250ZW50ID0gY2hpbGQ7XG4gIH0sXG59KTtcbkBDb21wb25lbnQoe1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ0ZyYW1lUGFnZScsXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEZyYW1lLFxuICAgICAgdXNlRmFjdG9yeTogY3VzdG9tRnJhbWVDb21wb25lbnRGYWN0b3J5LFxuICAgICAgZGVwczogW0ZyYW1lUGFnZUNvbXBvbmVudF0sXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBQYWdlLFxuICAgICAgdXNlRmFjdG9yeTogY3VzdG9tUGFnZUZhY3RvcnlGcm9tRnJhbWUsXG4gICAgICBkZXBzOiBbRnJhbWVQYWdlQ29tcG9uZW50XSxcbiAgICB9LFxuICAgIFBhZ2VTZXJ2aWNlLFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBGcmFtZVBhZ2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xuICBwYWdlOiBQYWdlO1xuXG4gIEBJbnB1dCgpIGFjdGlvbkJhckhpZGRlbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50OiBFbGVtZW50UmVmPEZyYW1lPiwgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHRoaXMucGFnZSA9IHJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ1BhZ2UnKSBhcyBQYWdlO1xuICAgIGVsZW1lbnQubmF0aXZlRWxlbWVudFsnX19uZ19wYWdlX18nXSA9IHRoaXMucGFnZTtcbiAgICByZW5kZXJlci5hcHBlbmRDaGlsZChlbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHRoaXMucGFnZSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuYWN0aW9uQmFySGlkZGVuICYmIGNoYW5nZXMuYWN0aW9uQmFySGlkZGVuLnByZXZpb3VzVmFsdWUgIT09IGNoYW5nZXMuYWN0aW9uQmFySGlkZGVuLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgaWYgKHRoaXMucGFnZSkge1xuICAgICAgICB0aGlzLnBhZ2UuYWN0aW9uQmFySGlkZGVuID0gISF0aGlzLmFjdGlvbkJhckhpZGRlbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnBhZ2UpIHtcbiAgICAgIHRoaXMucGFnZS5hY3Rpb25CYXJIaWRkZW4gPSAhIXRoaXMuYWN0aW9uQmFySGlkZGVuO1xuICAgIH1cbiAgfVxufVxuIl19