import { ElementRef, Injectable, Optional } from '@angular/core';
import { Page, ViewBase } from '@nativescript/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
export class PageService {
    constructor(page, elRef, view) {
        var _a;
        this._pageEvents$ = new Subject();
        if (page) {
            this.page = page;
        }
        else {
            view = view || elRef.nativeElement;
            while (view) {
                if (view instanceof Page) {
                    this.page = view;
                    break;
                }
                view = view.parent;
            }
        }
        this._inPage$ = new BehaviorSubject(!!((_a = this.page) === null || _a === void 0 ? void 0 : _a.isLoaded));
        if (this.page) {
            this.page.on('navigatedFrom', this.pageEvent, this);
            this.page.on('navigatedTo', this.pageEvent, this);
            this.page.on('navigatingFrom', this.pageEvent, this);
            this.page.on('navigatingTo', this.pageEvent, this);
        }
    }
    get inPage() {
        return this._inPage$.value;
    }
    get inPage$() {
        return this._inPage$.pipe(distinctUntilChanged());
    }
    get pageEvents$() {
        return this._pageEvents$.asObservable();
    }
    ngOnDestroy() {
        if (this.page) {
            this.page.off('navigatedFrom', this.pageEvent, this);
            this.page.off('navigatedTo', this.pageEvent, this);
            this.page.off('navigatingFrom', this.pageEvent, this);
            this.page.off('navigatingTo', this.pageEvent, this);
        }
        this._inPage$.complete();
        this._pageEvents$.complete();
    }
    pageEvent(evt) {
        this._pageEvents$.next(evt);
        switch (evt.eventName) {
            case 'navigatedTo':
                this._inPage$.next(true);
                break;
            case 'navigatedFrom':
                this._inPage$.next(false);
                break;
            default:
        }
    }
}
PageService.decorators = [
    { type: Injectable }
];
PageService.ctorParameters = () => [
    { type: Page, decorators: [{ type: Optional }] },
    { type: ElementRef, decorators: [{ type: Optional }] },
    { type: ViewBase, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jZGsvZnJhbWUtcGFnZS9wYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBVSxVQUFVLEVBQWEsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BGLE9BQU8sRUFBaUIsSUFBSSxFQUFRLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxlQUFlLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3RELE1BQU0sT0FBTyxXQUFXO0lBY3RCLFlBQXdCLElBQVcsRUFBYyxLQUE0QixFQUFjLElBQWU7O1FBWGxHLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQWlCLENBQUM7UUFZbEQsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNsQjthQUFNO1lBQ0wsSUFBSSxHQUFHLElBQUksSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDO1lBQ25DLE9BQU8sSUFBSSxFQUFFO2dCQUNYLElBQUksSUFBSSxZQUFZLElBQUksRUFBRTtvQkFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7b0JBQ2pCLE1BQU07aUJBQ1A7Z0JBQ0QsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDcEI7U0FDRjtRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxlQUFlLENBQVUsQ0FBQyxDQUFDLENBQUEsTUFBQSxJQUFJLENBQUMsSUFBSSwwQ0FBRSxRQUFRLENBQUEsQ0FBQyxDQUFDO1FBQ3BFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDcEQ7SUFDSCxDQUFDO0lBN0JELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUNELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFDRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUMsQ0FBQztJQXVCRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN0RCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNyRDtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU8sU0FBUyxDQUFDLEdBQWtCO1FBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLFFBQVEsR0FBRyxDQUFDLFNBQVMsRUFBRTtZQUNyQixLQUFLLGFBQWE7Z0JBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN6QixNQUFNO1lBQ1IsS0FBSyxlQUFlO2dCQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDMUIsTUFBTTtZQUNSLFFBQVE7U0FDVDtJQUNILENBQUM7OztZQTNERixVQUFVOzs7WUFKYSxJQUFJLHVCQW1CYixRQUFRO1lBcEJkLFVBQVUsdUJBb0JxQixRQUFRO1lBbkJaLFFBQVEsdUJBbUJzQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlLCBPbkRlc3Ryb3ksIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYXZpZ2F0ZWREYXRhLCBQYWdlLCBWaWV3LCBWaWV3QmFzZSB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGFnZVNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwYWdlOiBQYWdlO1xuICBwcml2YXRlIF9pblBhZ2UkOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj47XG4gIHByaXZhdGUgX3BhZ2VFdmVudHMkID0gbmV3IFN1YmplY3Q8TmF2aWdhdGVkRGF0YT4oKTtcblxuICBnZXQgaW5QYWdlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pblBhZ2UkLnZhbHVlO1xuICB9XG4gIGdldCBpblBhZ2UkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLl9pblBhZ2UkLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gIH1cbiAgZ2V0IHBhZ2VFdmVudHMkKCk6IE9ic2VydmFibGU8TmF2aWdhdGVkRGF0YT4ge1xuICAgIHJldHVybiB0aGlzLl9wYWdlRXZlbnRzJC5hc09ic2VydmFibGUoKTtcbiAgfVxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwYWdlPzogUGFnZSwgQE9wdGlvbmFsKCkgZWxSZWY/OiBFbGVtZW50UmVmPFZpZXdCYXNlPiwgQE9wdGlvbmFsKCkgdmlldz86IFZpZXdCYXNlKSB7XG4gICAgaWYgKHBhZ2UpIHtcbiAgICAgIHRoaXMucGFnZSA9IHBhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZXcgPSB2aWV3IHx8IGVsUmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICB3aGlsZSAodmlldykge1xuICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIFBhZ2UpIHtcbiAgICAgICAgICB0aGlzLnBhZ2UgPSB2aWV3O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHZpZXcgPSB2aWV3LnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5faW5QYWdlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oISF0aGlzLnBhZ2U/LmlzTG9hZGVkKTtcbiAgICBpZiAodGhpcy5wYWdlKSB7XG4gICAgICB0aGlzLnBhZ2Uub24oJ25hdmlnYXRlZEZyb20nLCB0aGlzLnBhZ2VFdmVudCwgdGhpcyk7XG4gICAgICB0aGlzLnBhZ2Uub24oJ25hdmlnYXRlZFRvJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgICAgdGhpcy5wYWdlLm9uKCduYXZpZ2F0aW5nRnJvbScsIHRoaXMucGFnZUV2ZW50LCB0aGlzKTtcbiAgICAgIHRoaXMucGFnZS5vbignbmF2aWdhdGluZ1RvJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnBhZ2UpIHtcbiAgICAgIHRoaXMucGFnZS5vZmYoJ25hdmlnYXRlZEZyb20nLCB0aGlzLnBhZ2VFdmVudCwgdGhpcyk7XG4gICAgICB0aGlzLnBhZ2Uub2ZmKCduYXZpZ2F0ZWRUbycsIHRoaXMucGFnZUV2ZW50LCB0aGlzKTtcbiAgICAgIHRoaXMucGFnZS5vZmYoJ25hdmlnYXRpbmdGcm9tJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgICAgdGhpcy5wYWdlLm9mZignbmF2aWdhdGluZ1RvJywgdGhpcy5wYWdlRXZlbnQsIHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLl9pblBhZ2UkLmNvbXBsZXRlKCk7XG4gICAgdGhpcy5fcGFnZUV2ZW50cyQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgcGFnZUV2ZW50KGV2dDogTmF2aWdhdGVkRGF0YSkge1xuICAgIHRoaXMuX3BhZ2VFdmVudHMkLm5leHQoZXZ0KTtcbiAgICBzd2l0Y2ggKGV2dC5ldmVudE5hbWUpIHtcbiAgICAgIGNhc2UgJ25hdmlnYXRlZFRvJzpcbiAgICAgICAgdGhpcy5faW5QYWdlJC5uZXh0KHRydWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ25hdmlnYXRlZEZyb20nOlxuICAgICAgICB0aGlzLl9pblBhZ2UkLm5leHQoZmFsc2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG59XG4iXX0=