import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Host, HostListener, Inject, InjectionToken, Input, IterableDiffers, NgZone, Output, TemplateRef, ViewChild, ViewContainerRef, ɵisListLikeIterable as isListLikeIterable, ɵmarkDirty } from '@angular/core';
import { LayoutBase, ObservableArray, profile } from '@nativescript/core';
import { extractSingleViewRecursive } from '../../element-registry/registry';
import { NativeScriptDebug } from '../../trace';
const NG_VIEW = '_ngViewRef';
export const TEMPLATED_ITEMS_COMPONENT = new InjectionToken('TemplatedItemsComponent');
export class ItemContext {
    constructor($implicit, item, index, even, odd) {
        this.$implicit = $implicit;
        this.item = item;
        this.index = index;
        this.even = even;
        this.odd = odd;
    }
}
export class NsTemplatedItem {
    constructor(template, location, onCreate) {
        this.template = template;
        this.location = location;
        this.onCreate = onCreate;
    }
    create(context) {
        const viewRef = this.location.createEmbeddedView(this.template, context ? this.setupItemContext(context) : new ItemContext());
        viewRef.detach(); // create detached, just beware this doesn't always work and the view might run the first CD anyway.
        const resultView = getItemViewRoot(viewRef);
        resultView[NG_VIEW] = viewRef;
        if (this.onCreate) {
            this.onCreate(resultView);
        }
        return resultView;
    }
    update(view, context) {
        const viewRef = this.getEmbeddedViewRef(view);
        this.setupItemContext(context, viewRef);
        viewRef === null || viewRef === void 0 ? void 0 : viewRef.detectChanges();
    }
    attach(view) {
        const viewRef = this.getEmbeddedViewRef(view);
        viewRef === null || viewRef === void 0 ? void 0 : viewRef.reattach();
        viewRef === null || viewRef === void 0 ? void 0 : viewRef.detectChanges();
    }
    detach(view) {
        const viewRef = this.getEmbeddedViewRef(view);
        viewRef === null || viewRef === void 0 ? void 0 : viewRef.detach();
    }
    dispose(view) {
        const viewRef = this.getEmbeddedViewRef(view);
        viewRef === null || viewRef === void 0 ? void 0 : viewRef.destroy();
    }
    getEmbeddedViewRef(view) {
        let viewRef = view[NG_VIEW];
        // Getting angular view from original element (in cases when ProxyViewContainer
        // is used NativeScript internally wraps it in a StackLayout)
        if (!viewRef && view instanceof LayoutBase && view.getChildrenCount() > 0) {
            viewRef = view.getChildAt(0)[NG_VIEW];
        }
        return viewRef;
    }
    isValid(view) {
        return !!this.getEmbeddedViewRef(view);
    }
    setupItemContext({ index, data }, oldView) {
        const context = oldView ? oldView.context : new ItemContext();
        context.$implicit = data;
        context.item = data;
        context.index = index;
        context.even = index % 2 === 0;
        context.odd = !context.even;
        return context;
    }
}
export class ListViewComponent {
    constructor(_elementRef, _iterableDiffers, zone) {
        this._iterableDiffers = _iterableDiffers;
        this.zone = zone;
        this._viewToTemplate = new WeakMap();
        this.setupItemView = new EventEmitter();
        this.templatedItemsView = _elementRef.nativeElement;
    }
    get nativeElement() {
        return this.templatedItemsView;
    }
    get items() {
        return this._items;
    }
    set items(value) {
        this._items = value;
        let needDiffer = true;
        if (value instanceof ObservableArray) {
            needDiffer = false;
        }
        if (needDiffer && !this._differ && isListLikeIterable(value)) {
            this._differ = this._iterableDiffers.find(this._items).create((_index, item) => {
                return item;
            });
        }
        this.templatedItemsView.items = this._items;
    }
    ngAfterContentInit() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.listViewLog('TemplatedItemsView.ngAfterContentInit()');
        }
        this.setItemTemplates();
    }
    ngOnDestroy() {
        this.templatedItemsView = null;
        if (this._templateMap) {
            this._templateMap.clear();
        }
    }
    setItemTemplates() {
        var _a;
        // The itemTemplateQuery may be changed after list items are added that contain <template> inside,
        // so cache and use only the original template to avoid errors.
        this.fallbackItemTemplate = this.itemTemplateQuery;
        if (this.fallbackItemTemplate && !((_a = this._templateMap) === null || _a === void 0 ? void 0 : _a.has('default'))) {
            // apparently you can create a Core ListView without a template...
            // we also add a fallback default for when the user sets multiple templates but no templateSelector
            this.registerTemplate('default', this.fallbackItemTemplate);
        }
        if (this._templateMap) {
            // sometimes templates are registered before loader is ready, so we update here
            this._templateMap.forEach((t) => (t.location = this.loader));
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.listViewLog('Setting templates');
            }
            const templates = [];
            this._templateMap.forEach((value, key) => {
                templates.push({
                    createView: () => null,
                    key,
                });
            });
            this.templatedItemsView.itemTemplates = templates;
        }
    }
    registerTemplate(key, template) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.listViewLog(`registerTemplate for key: ${key}, ${this.loader}`);
        }
        if (!this._templateMap) {
            this._templateMap = new Map();
        }
        this._templateMap.set(key, new NsTemplatedItem(template, this.loader, (v) => this._viewToTemplate.set(v, key)));
    }
    onItemLoading(args) {
        if (!this._templateMap) {
            return;
        }
        const index = args.index;
        const lview = args.object;
        const items = lview.items;
        const currentItem = 'getItem' in items && typeof items.getItem === 'function' ? items.getItem(index) : items[index];
        let template;
        if (args.view) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.listViewLog(`onItemLoading: ${index} - Reusing existing view`);
            }
            let templateKey = this._viewToTemplate.get(args.view);
            if (!templateKey && args.view instanceof LayoutBase && args.view.getChildrenCount() > 0) {
                templateKey = this._viewToTemplate.get(args.view.getChildAt(0));
            }
            if (!templateKey) {
                // this template was not created by us
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.listViewError(`ViewReference not found for item ${index}. View recycling is not working`);
                }
                return;
            }
            template = this._templateMap.get(templateKey);
            template.update(args.view, { index, data: currentItem });
        }
        else {
            // this should never enter if it creates the view
            const templateKey = typeof lview.itemTemplateSelector === 'function' ? lview.itemTemplateSelector(currentItem, index, items) : 'default';
            template = this._templateMap.get(templateKey);
            if (!template) {
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.listViewError(`Template for key '${templateKey}' not found.`);
                }
                return;
            }
            args.view = template.create({ index, data: currentItem });
        }
        this.setupViewRef(template.getEmbeddedViewRef(args.view), currentItem, index, args.view);
        template.attach(args.view);
        ɵmarkDirty(this);
    }
    setupViewRef(viewRef, data, index, nativeElement) {
        const context = viewRef.context;
        this.setupItemView.next({ view: viewRef, nativeElement, data: data, index: index, context: context });
    }
    ngDoCheck() {
        if (this._differ) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.listViewLog('ngDoCheck() - execute differ');
            }
            const changes = this._differ.diff(this._items);
            if (changes) {
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.listViewLog('ngDoCheck() - refresh');
                }
                this.templatedItemsView.refresh();
            }
        }
    }
}
ListViewComponent.decorators = [
    { type: Component, args: [{
                // eslint-disable-next-line @angular-eslint/component-selector
                selector: 'ListView',
                template: `<DetachedContainer>
    <ng-container #loader></ng-container>
  </DetachedContainer>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: TEMPLATED_ITEMS_COMPONENT, useExisting: forwardRef(() => ListViewComponent) }]
            },] }
];
ListViewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IterableDiffers },
    { type: NgZone }
];
ListViewComponent.propDecorators = {
    loader: [{ type: ViewChild, args: ['loader', { read: ViewContainerRef, static: true },] }],
    setupItemView: [{ type: Output }],
    itemTemplateQuery: [{ type: ContentChild, args: [TemplateRef, { read: TemplateRef, static: false },] }],
    items: [{ type: Input }],
    onItemLoading: [{ type: HostListener, args: ['itemLoading', ['$event'],] }]
};
__decorate([
    profile
], ListViewComponent.prototype, "onItemLoading", null);
export function getItemViewRoot(viewRef, rootLocator = extractSingleViewRecursive) {
    const rootView = rootLocator(viewRef.rootNodes, 0);
    return rootView;
}
// eslint-disable-next-line @angular-eslint/directive-selector
export class TemplateKeyDirective {
    constructor(templateRef, comp) {
        this.templateRef = templateRef;
        this.comp = comp;
    }
    set nsTemplateKey(value) {
        if (this.comp && this.templateRef) {
            this.comp.registerTemplate(value, this.templateRef);
        }
    }
    set nsTemplateKeys(values) {
        // single template with multiple keys
        if (this.comp && this.templateRef && values) {
            values.forEach((value) => this.comp.registerTemplate(value, this.templateRef));
        }
    }
}
TemplateKeyDirective.decorators = [
    { type: Directive, args: [{ selector: '[nsTemplateKey],[nsTemplateKeys]' },] }
];
TemplateKeyDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: undefined, decorators: [{ type: Host }, { type: Inject, args: [TEMPLATED_ITEMS_COMPONENT,] }] }
];
TemplateKeyDirective.propDecorators = {
    nsTemplateKey: [{ type: Input }],
    nsTemplateKeys: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY2RrL2xpc3Qtdmlldy9saXN0LXZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQW9CLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFXLFVBQVUsRUFBbUIsWUFBWSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFrQixlQUFlLEVBQUUsTUFBTSxFQUFhLE1BQU0sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixJQUFJLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5WCxPQUFPLEVBQWdDLFVBQVUsRUFBWSxlQUFlLEVBQUUsT0FBTyxFQUFRLE1BQU0sb0JBQW9CLENBQUM7QUFFeEgsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR2hELE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQztBQU03QixNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLGNBQWMsQ0FBcUIseUJBQXlCLENBQUMsQ0FBQztBQUUzRyxNQUFNLE9BQU8sV0FBVztJQUN0QixZQUFtQixTQUFhLEVBQVMsSUFBUSxFQUFTLEtBQWMsRUFBUyxJQUFjLEVBQVMsR0FBYTtRQUFsRyxjQUFTLEdBQVQsU0FBUyxDQUFJO1FBQVMsU0FBSSxHQUFKLElBQUksQ0FBSTtRQUFTLFVBQUssR0FBTCxLQUFLLENBQVM7UUFBUyxTQUFJLEdBQUosSUFBSSxDQUFVO1FBQVMsUUFBRyxHQUFILEdBQUcsQ0FBVTtJQUFHLENBQUM7Q0FDMUg7QUFFRCxNQUFNLE9BQU8sZUFBZTtJ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LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIERpcmVjdGl2ZSwgRG9DaGVjaywgRWxlbWVudFJlZiwgRW1iZWRkZWRWaWV3UmVmLCBFdmVudEVtaXR0ZXIsIGZvcndhcmRSZWYsIEhvc3QsIEhvc3RMaXN0ZW5lciwgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiwgSW5wdXQsIEl0ZXJhYmxlRGlmZmVyLCBJdGVyYWJsZURpZmZlcnMsIE5nWm9uZSwgT25EZXN0cm95LCBPdXRwdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWYsIMm1aXNMaXN0TGlrZUl0ZXJhYmxlIGFzIGlzTGlzdExpa2VJdGVyYWJsZSwgybVtYXJrRGlydHkgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEl0ZW1FdmVudERhdGEsIEtleWVkVGVtcGxhdGUsIExheW91dEJhc2UsIExpc3RWaWV3LCBPYnNlcnZhYmxlQXJyYXksIHByb2ZpbGUsIFZpZXcgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuXG5pbXBvcnQgeyBleHRyYWN0U2luZ2xlVmlld1JlY3Vyc2l2ZSB9IGZyb20gJy4uLy4uL2VsZW1lbnQtcmVnaXN0cnkvcmVnaXN0cnknO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0RGVidWcgfSBmcm9tICcuLi8uLi90cmFjZSc7XG5pbXBvcnQgeyBOZ1ZpZXdUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL3ZpZXctcmVmcyc7XG5cbmNvbnN0IE5HX1ZJRVcgPSAnX25nVmlld1JlZic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVkSXRlbXNIb3N0PFQgPSBhbnk+IHtcbiAgcmVnaXN0ZXJUZW1wbGF0ZShrZXk6IHN0cmluZywgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPFQ+KTtcbn1cblxuZXhwb3J0IGNvbnN0IFRFTVBMQVRFRF9JVEVNU19DT01QT05FTlQgPSBuZXcgSW5qZWN0aW9uVG9rZW48VGVtcGxhdGVkSXRlbXNIb3N0PignVGVtcGxhdGVkSXRlbXNDb21wb25lbnQnKTtcblxuZXhwb3J0IGNsYXNzIEl0ZW1Db250ZXh0PFQ+IHtcbiAgY29uc3RydWN0b3IocHVibGljICRpbXBsaWNpdD86IFQsIHB1YmxpYyBpdGVtPzogVCwgcHVibGljIGluZGV4PzogbnVtYmVyLCBwdWJsaWMgZXZlbj86IGJvb2xlYW4sIHB1YmxpYyBvZGQ/OiBib29sZWFuKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgTnNUZW1wbGF0ZWRJdGVtPFQ+IGltcGxlbWVudHMgTmdWaWV3VGVtcGxhdGU8eyBpbmRleDogbnVtYmVyOyBkYXRhOiBUIH0+IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8SXRlbUNvbnRleHQ8VD4+LCBwdWJsaWMgbG9jYXRpb246IFZpZXdDb250YWluZXJSZWYsIHByaXZhdGUgb25DcmVhdGU/OiAodmlldzogVmlldykgPT4gdm9pZCkge31cbiAgY3JlYXRlKGNvbnRleHQ/OiB7IGluZGV4OiBudW1iZXI7IGRhdGE6IFQgfSk6IFZpZXcge1xuICAgIGNvbnN0IHZpZXdSZWYgPSB0aGlzLmxvY2F0aW9uLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlLCBjb250ZXh0ID8gdGhpcy5zZXR1cEl0ZW1Db250ZXh0KGNvbnRleHQpIDogbmV3IEl0ZW1Db250ZXh0KCkpO1xuICAgIHZpZXdSZWYuZGV0YWNoKCk7IC8vIGNyZWF0ZSBkZXRhY2hlZCwganVzdCBiZXdhcmUgdGhpcyBkb2Vzbid0IGFsd2F5cyB3b3JrIGFuZCB0aGUgdmlldyBtaWdodCBydW4gdGhlIGZpcnN0IENEIGFueXdheS5cbiAgICBjb25zdCByZXN1bHRWaWV3ID0gZ2V0SXRlbVZpZXdSb290KHZpZXdSZWYpO1xuICAgIHJlc3VsdFZpZXdbTkdfVklFV10gPSB2aWV3UmVmO1xuICAgIGlmICh0aGlzLm9uQ3JlYXRlKSB7XG4gICAgICB0aGlzLm9uQ3JlYXRlKHJlc3VsdFZpZXcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0VmlldztcbiAgfVxuICB1cGRhdGUodmlldzogVmlldywgY29udGV4dD86IHsgaW5kZXg6IG51bWJlcjsgZGF0YTogVCB9KTogdm9pZCB7XG4gICAgY29uc3Qgdmlld1JlZiA9IHRoaXMuZ2V0RW1iZWRkZWRWaWV3UmVmKHZpZXcpO1xuICAgIHRoaXMuc2V0dXBJdGVtQ29udGV4dChjb250ZXh0LCB2aWV3UmVmKTtcbiAgICB2aWV3UmVmPy5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cbiAgYXR0YWNoKHZpZXc6IFZpZXcpOiB2b2lkIHtcbiAgICBjb25zdCB2aWV3UmVmID0gdGhpcy5nZXRFbWJlZGRlZFZpZXdSZWYodmlldyk7XG4gICAgdmlld1JlZj8ucmVhdHRhY2goKTtcbiAgICB2aWV3UmVmPy5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cbiAgZGV0YWNoKHZpZXc6IFZpZXcpOiB2b2lkIHtcbiAgICBjb25zdCB2aWV3UmVmID0gdGhpcy5nZXRFbWJlZGRlZFZpZXdSZWYodmlldyk7XG4gICAgdmlld1JlZj8uZGV0YWNoKCk7XG4gIH1cbiAgZGlzcG9zZSh2aWV3OiBWaWV3KTogdm9pZCB7XG4gICAgY29uc3Qgdmlld1JlZiA9IHRoaXMuZ2V0RW1iZWRkZWRWaWV3UmVmKHZpZXcpO1xuICAgIHZpZXdSZWY/LmRlc3Ryb3koKTtcbiAgfVxuXG4gIGdldEVtYmVkZGVkVmlld1JlZih2aWV3OiBWaWV3KTogRW1iZWRkZWRWaWV3UmVmPEl0ZW1Db250ZXh0PFQ+PiB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IHZpZXdSZWYgPSB2aWV3W05HX1ZJRVddO1xuXG4gICAgLy8gR2V0dGluZyBhbmd1bGFyIHZpZXcgZnJvbSBvcmlnaW5hbCBlbGVtZW50IChpbiBjYXNlcyB3aGVuIFByb3h5Vmlld0NvbnRhaW5lclxuICAgIC8vIGlzIHVzZWQgTmF0aXZlU2NyaXB0IGludGVybmFsbHkgd3JhcHMgaXQgaW4gYSBTdGFja0xheW91dClcbiAgICBpZiAoIXZpZXdSZWYgJiYgdmlldyBpbnN0YW5jZW9mIExheW91dEJhc2UgJiYgdmlldy5nZXRDaGlsZHJlbkNvdW50KCkgPiAwKSB7XG4gICAgICB2aWV3UmVmID0gdmlldy5nZXRDaGlsZEF0KDApW05HX1ZJRVddO1xuICAgIH1cbiAgICByZXR1cm4gdmlld1JlZjtcbiAgfVxuXG4gIGlzVmFsaWQodmlldzogVmlldykge1xuICAgIHJldHVybiAhIXRoaXMuZ2V0RW1iZWRkZWRWaWV3UmVmKHZpZXcpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXR1cEl0ZW1Db250ZXh0KHsgaW5kZXgsIGRhdGEgfTogeyBpbmRleDogbnVtYmVyOyBkYXRhOiBUIH0sIG9sZFZpZXc/OiBFbWJlZGRlZFZpZXdSZWY8SXRlbUNvbnRleHQ8VD4+KTogSXRlbUNvbnRleHQ8VD4ge1xuICAgIGNvbnN0IGNvbnRleHQ6IEl0ZW1Db250ZXh0PFQ+ID0gb2xkVmlldyA/IG9sZFZpZXcuY29udGV4dCA6IG5ldyBJdGVtQ29udGV4dDxUPigpO1xuICAgIGNvbnRleHQuJGltcGxpY2l0ID0gZGF0YTtcbiAgICBjb250ZXh0Lml0ZW0gPSBkYXRhO1xuICAgIGNvbnRleHQuaW5kZXggPSBpbmRleDtcbiAgICBjb250ZXh0LmV2ZW4gPSBpbmRleCAlIDIgPT09IDA7XG4gICAgY29udGV4dC5vZGQgPSAhY29udGV4dC5ldmVuO1xuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dXBJdGVtVmlld0FyZ3M8VD4ge1xuICB2aWV3OiBFbWJlZGRlZFZpZXdSZWY8SXRlbUNvbnRleHQ8VD4+O1xuICBuYXRpdmVFbGVtZW50OiBWaWV3O1xuICBkYXRhOiBUO1xuICBpbmRleDogbnVtYmVyO1xuICBjb250ZXh0OiBJdGVtQ29udGV4dDxUPjtcbn1cblxuQENvbXBvbmVudCh7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnTGlzdFZpZXcnLFxuICB0ZW1wbGF0ZTogYDxEZXRhY2hlZENvbnRhaW5lcj5cbiAgICA8bmctY29udGFpbmVyICNsb2FkZXI+PC9uZy1jb250YWluZXI+XG4gIDwvRGV0YWNoZWRDb250YWluZXI+YCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVEVNUExBVEVEX0lURU1TX0NPTVBPTkVOVCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTGlzdFZpZXdDb21wb25lbnQpIH1dLFxufSlcbmV4cG9ydCBjbGFzcyBMaXN0Vmlld0NvbXBvbmVudDxUID0gYW55PiBpbXBsZW1lbnRzIERvQ2hlY2ssIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCwgVGVtcGxhdGVkSXRlbXNIb3N0IHtcbiAgcHVibGljIGdldCBuYXRpdmVFbGVtZW50KCk6IExpc3RWaWV3IHtcbiAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZWRJdGVtc1ZpZXc7XG4gIH1cblxuICBwcm90ZWN0ZWQgdGVtcGxhdGVkSXRlbXNWaWV3OiBMaXN0VmlldztcbiAgcHJvdGVjdGVkIF9pdGVtczogVFtdIHwgT2JzZXJ2YWJsZUFycmF5PFQ+O1xuICBwcm90ZWN0ZWQgX2RpZmZlcjogSXRlcmFibGVEaWZmZXI8VD47XG4gIHByb3RlY3RlZCBfdGVtcGxhdGVNYXA6IE1hcDxzdHJpbmcsIE5zVGVtcGxhdGVkSXRlbTxUPj47XG4gIHByb3RlY3RlZCBfdmlld1RvVGVtcGxhdGU6IFdlYWtNYXA8Vmlldywgc3RyaW5nPiA9IG5ldyBXZWFrTWFwPFZpZXcsIHN0cmluZz4oKTtcblxuICBAVmlld0NoaWxkKCdsb2FkZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYsIHN0YXRpYzogdHJ1ZSB9KSBsb2FkZXI6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgQE91dHB1dCgpIHB1YmxpYyBzZXR1cEl0ZW1WaWV3ID0gbmV3IEV2ZW50RW1pdHRlcjxTZXR1cEl0ZW1WaWV3QXJnczxUPj4oKTtcblxuICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IGZhbHNlIH0pIGl0ZW1UZW1wbGF0ZVF1ZXJ5OiBUZW1wbGF0ZVJlZjxJdGVtQ29udGV4dDxUPj47XG5cbiAgZmFsbGJhY2tJdGVtVGVtcGxhdGU6IFRlbXBsYXRlUmVmPEl0ZW1Db250ZXh0PFQ+PjtcblxuICBASW5wdXQoKVxuICBnZXQgaXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xuICB9XG5cbiAgc2V0IGl0ZW1zKHZhbHVlOiBUW10gfCBPYnNlcnZhYmxlQXJyYXk8VD4pIHtcbiAgICB0aGlzLl9pdGVtcyA9IHZhbHVlO1xuICAgIGxldCBuZWVkRGlmZmVyID0gdHJ1ZTtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYnNlcnZhYmxlQXJyYXkpIHtcbiAgICAgIG5lZWREaWZmZXIgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5lZWREaWZmZXIgJiYgIXRoaXMuX2RpZmZlciAmJiBpc0xpc3RMaWtlSXRlcmFibGUodmFsdWUpKSB7XG4gICAgICB0aGlzLl9kaWZmZXIgPSB0aGlzLl9pdGVyYWJsZURpZmZlcnMuZmluZCh0aGlzLl9pdGVtcykuY3JlYXRlKChfaW5kZXgsIGl0ZW0pID0+IHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnRlbXBsYXRlZEl0ZW1zVmlldy5pdGVtcyA9IHRoaXMuX2l0ZW1zO1xuICB9XG5cbiAgY29uc3RydWN0b3IoX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgX2l0ZXJhYmxlRGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBwcml2YXRlIHpvbmU6IE5nWm9uZSkge1xuICAgIHRoaXMudGVtcGxhdGVkSXRlbXNWaWV3ID0gX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgIE5hdGl2ZVNjcmlwdERlYnVnLmxpc3RWaWV3TG9nKCdUZW1wbGF0ZWRJdGVtc1ZpZXcubmdBZnRlckNvbnRlbnRJbml0KCknKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldEl0ZW1UZW1wbGF0ZXMoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMudGVtcGxhdGVkSXRlbXNWaWV3ID0gbnVsbDtcblxuICAgIGlmICh0aGlzLl90ZW1wbGF0ZU1hcCkge1xuICAgICAgdGhpcy5fdGVtcGxhdGVNYXAuY2xlYXIoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldEl0ZW1UZW1wbGF0ZXMoKSB7XG4gICAgLy8gVGhlIGl0ZW1UZW1wbGF0ZVF1ZXJ5IG1heSBiZSBjaGFuZ2VkIGFmdGVyIGxpc3QgaXRlbXMgYXJlIGFkZGVkIHRoYXQgY29udGFpbiA8dGVtcGxhdGU+IGluc2lkZSxcbiAgICAvLyBzbyBjYWNoZSBhbmQgdXNlIG9ubHkgdGhlIG9yaWdpbmFsIHRlbXBsYXRlIHRvIGF2b2lkIGVycm9ycy5cbiAgICB0aGlzLmZhbGxiYWNrSXRlbVRlbXBsYXRlID0gdGhpcy5pdGVtVGVtcGxhdGVRdWVyeTtcbiAgICBpZiAodGhpcy5mYWxsYmFja0l0ZW1UZW1wbGF0ZSAmJiAhdGhpcy5fdGVtcGxhdGVNYXA/LmhhcygnZGVmYXVsdCcpKSB7XG4gICAgICAvLyBhcHBhcmVudGx5IHlvdSBjYW4gY3JlYXRlIGEgQ29yZSBMaXN0VmlldyB3aXRob3V0IGEgdGVtcGxhdGUuLi5cbiAgICAgIC8vIHdlIGFsc28gYWRkIGEgZmFsbGJhY2sgZGVmYXVsdCBmb3Igd2hlbiB0aGUgdXNlciBzZXRzIG11bHRpcGxlIHRlbXBsYXRlcyBidXQgbm8gdGVtcGxhdGVTZWxlY3RvclxuICAgICAgdGhpcy5yZWdpc3RlclRlbXBsYXRlKCdkZWZhdWx0JywgdGhpcy5mYWxsYmFja0l0ZW1UZW1wbGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RlbXBsYXRlTWFwKSB7XG4gICAgICAvLyBzb21ldGltZXMgdGVtcGxhdGVzIGFyZSByZWdpc3RlcmVkIGJlZm9yZSBsb2FkZXIgaXMgcmVhZHksIHNvIHdlIHVwZGF0ZSBoZXJlXG4gICAgICB0aGlzLl90ZW1wbGF0ZU1hcC5mb3JFYWNoKCh0KSA9PiAodC5sb2NhdGlvbiA9IHRoaXMubG9hZGVyKSk7XG4gICAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgICAgTmF0aXZlU2NyaXB0RGVidWcubGlzdFZpZXdMb2coJ1NldHRpbmcgdGVtcGxhdGVzJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlczogS2V5ZWRUZW1wbGF0ZVtdID0gW107XG4gICAgICB0aGlzLl90ZW1wbGF0ZU1hcC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgIHRlbXBsYXRlcy5wdXNoKHtcbiAgICAgICAgICBjcmVhdGVWaWV3OiAoKSA9PiBudWxsLCAvLyB3ZSdsbCBoYW5kbGUgY3JlYXRpb24gbGF0ZXIsIG90aGVyd2lzZSBjb3JlIHdpbGwgY3JlYXRlIGFuIGludmFsaWQgdGVtcGxhdGVcbiAgICAgICAgICBrZXksXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnRlbXBsYXRlZEl0ZW1zVmlldy5pdGVtVGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlclRlbXBsYXRlKGtleTogc3RyaW5nLCB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8SXRlbUNvbnRleHQ8VD4+KSB7XG4gICAgaWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG4gICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5saXN0Vmlld0xvZyhgcmVnaXN0ZXJUZW1wbGF0ZSBmb3Iga2V5OiAke2tleX0sICR7dGhpcy5sb2FkZXJ9YCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl90ZW1wbGF0ZU1hcCkge1xuICAgICAgdGhpcy5fdGVtcGxhdGVNYXAgPSBuZXcgTWFwPHN0cmluZywgTnNUZW1wbGF0ZWRJdGVtPFQ+PigpO1xuICAgIH1cblxuICAgIHRoaXMuX3RlbXBsYXRlTWFwLnNldChcbiAgICAgIGtleSxcbiAgICAgIG5ldyBOc1RlbXBsYXRlZEl0ZW08VD4odGVtcGxhdGUsIHRoaXMubG9hZGVyLCAodikgPT4gdGhpcy5fdmlld1RvVGVtcGxhdGUuc2V0KHYsIGtleSkpXG4gICAgKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2l0ZW1Mb2FkaW5nJywgWyckZXZlbnQnXSlcbiAgQHByb2ZpbGVcbiAgcHVibGljIG9uSXRlbUxvYWRpbmcoYXJnczogSXRlbUV2ZW50RGF0YSkge1xuICAgIGlmICghdGhpcy5fdGVtcGxhdGVNYXApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IGFyZ3MuaW5kZXg7XG4gICAgY29uc3QgbHZpZXc6IExpc3RWaWV3ID0gPExpc3RWaWV3PmFyZ3Mub2JqZWN0O1xuICAgIGNvbnN0IGl0ZW1zID0gbHZpZXcuaXRlbXM7XG4gICAgY29uc3QgY3VycmVudEl0ZW0gPSAnZ2V0SXRlbScgaW4gaXRlbXMgJiYgdHlwZW9mIGl0ZW1zLmdldEl0ZW0gPT09ICdmdW5jdGlvbicgPyBpdGVtcy5nZXRJdGVtKGluZGV4KSA6IGl0ZW1zW2luZGV4XTtcblxuICAgIGxldCB0ZW1wbGF0ZTogTnNUZW1wbGF0ZWRJdGVtPFQ+O1xuXG4gICAgaWYgKGFyZ3Mudmlldykge1xuICAgICAgaWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG4gICAgICAgIE5hdGl2ZVNjcmlwdERlYnVnLmxpc3RWaWV3TG9nKGBvbkl0ZW1Mb2FkaW5nOiAke2luZGV4fSAtIFJldXNpbmcgZXhpc3Rpbmcgdmlld2ApO1xuICAgICAgfVxuXG4gICAgICBsZXQgdGVtcGxhdGVLZXkgPSB0aGlzLl92aWV3VG9UZW1wbGF0ZS5nZXQoYXJncy52aWV3KTtcbiAgICAgIGlmICghdGVtcGxhdGVLZXkgJiYgYXJncy52aWV3IGluc3RhbmNlb2YgTGF5b3V0QmFzZSAmJiBhcmdzLnZpZXcuZ2V0Q2hpbGRyZW5Db3VudCgpID4gMCkge1xuICAgICAgICB0ZW1wbGF0ZUtleSA9IHRoaXMuX3ZpZXdUb1RlbXBsYXRlLmdldChhcmdzLnZpZXcuZ2V0Q2hpbGRBdCgwKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRlbXBsYXRlS2V5KSB7XG4gICAgICAgIC8vIHRoaXMgdGVtcGxhdGUgd2FzIG5vdCBjcmVhdGVkIGJ5IHVzXG4gICAgICAgIGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuICAgICAgICAgIE5hdGl2ZVNjcmlwdERlYnVnLmxpc3RWaWV3RXJyb3IoYFZpZXdSZWZlcmVuY2Ugbm90IGZvdW5kIGZvciBpdGVtICR7aW5kZXh9LiBWaWV3IHJlY3ljbGluZyBpcyBub3Qgd29ya2luZ2ApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRlbXBsYXRlID0gdGhpcy5fdGVtcGxhdGVNYXAuZ2V0KHRlbXBsYXRlS2V5KTtcbiAgICAgIHRlbXBsYXRlLnVwZGF0ZShhcmdzLnZpZXcsIHsgaW5kZXgsIGRhdGE6IGN1cnJlbnRJdGVtIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aGlzIHNob3VsZCBuZXZlciBlbnRlciBpZiBpdCBjcmVhdGVzIHRoZSB2aWV3XG4gICAgICBjb25zdCB0ZW1wbGF0ZUtleSA9IHR5cGVvZiBsdmlldy5pdGVtVGVtcGxhdGVTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJyA/IGx2aWV3Lml0ZW1UZW1wbGF0ZVNlbGVjdG9yKGN1cnJlbnRJdGVtLCBpbmRleCwgaXRlbXMpIDogJ2RlZmF1bHQnO1xuICAgICAgdGVtcGxhdGUgPSB0aGlzLl90ZW1wbGF0ZU1hcC5nZXQodGVtcGxhdGVLZXkpO1xuICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5saXN0Vmlld0Vycm9yKGBUZW1wbGF0ZSBmb3Iga2V5ICcke3RlbXBsYXRlS2V5fScgbm90IGZvdW5kLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFyZ3MudmlldyA9IHRlbXBsYXRlLmNyZWF0ZSh7IGluZGV4LCBkYXRhOiBjdXJyZW50SXRlbSB9KTtcbiAgICB9XG4gICAgdGhpcy5zZXR1cFZpZXdSZWYodGVtcGxhdGUuZ2V0RW1iZWRkZWRWaWV3UmVmKGFyZ3MudmlldyksIGN1cnJlbnRJdGVtLCBpbmRleCwgYXJncy52aWV3KTtcblxuICAgIHRlbXBsYXRlLmF0dGFjaChhcmdzLnZpZXcpO1xuICAgIMm1bWFya0RpcnR5KHRoaXMpO1xuICB9XG5cbiAgcHVibGljIHNldHVwVmlld1JlZih2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8SXRlbUNvbnRleHQ8VD4+LCBkYXRhOiBULCBpbmRleDogbnVtYmVyLCBuYXRpdmVFbGVtZW50OiBWaWV3KTogdm9pZCB7XG4gICAgY29uc3QgY29udGV4dCA9IHZpZXdSZWYuY29udGV4dDtcbiAgICB0aGlzLnNldHVwSXRlbVZpZXcubmV4dCh7IHZpZXc6IHZpZXdSZWYsIG5hdGl2ZUVsZW1lbnQsIGRhdGE6IGRhdGEsIGluZGV4OiBpbmRleCwgY29udGV4dDogY29udGV4dCB9KTtcbiAgfVxuXG4gIG5nRG9DaGVjaygpIHtcbiAgICBpZiAodGhpcy5fZGlmZmVyKSB7XG4gICAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgICAgTmF0aXZlU2NyaXB0RGVidWcubGlzdFZpZXdMb2coJ25nRG9DaGVjaygpIC0gZXhlY3V0ZSBkaWZmZXInKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2hhbmdlcyA9IHRoaXMuX2RpZmZlci5kaWZmKHRoaXMuX2l0ZW1zIGFzIFRbXSk7XG4gICAgICBpZiAoY2hhbmdlcykge1xuICAgICAgICBpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcbiAgICAgICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5saXN0Vmlld0xvZygnbmdEb0NoZWNrKCkgLSByZWZyZXNoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRlbXBsYXRlZEl0ZW1zVmlldy5yZWZyZXNoKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB0eXBlIFJvb3RMb2NhdG9yID0gKG5vZGVzOiBBcnJheTx1bmtub3duPiwgbmVzdExldmVsOiBudW1iZXIpID0+IFZpZXc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJdGVtVmlld1Jvb3Qodmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPHVua25vd24+LCByb290TG9jYXRvcjogUm9vdExvY2F0b3IgPSBleHRyYWN0U2luZ2xlVmlld1JlY3Vyc2l2ZSk6IFZpZXcge1xuICBjb25zdCByb290VmlldyA9IHJvb3RMb2NhdG9yKHZpZXdSZWYucm9vdE5vZGVzLCAwKTtcbiAgcmV0dXJuIHJvb3RWaWV3O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2RpcmVjdGl2ZS1zZWxlY3RvclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW25zVGVtcGxhdGVLZXldLFtuc1RlbXBsYXRlS2V5c10nIH0pXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVLZXlEaXJlY3RpdmU8VD4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxUPiwgQEhvc3QoKSBASW5qZWN0KFRFTVBMQVRFRF9JVEVNU19DT01QT05FTlQpIHByaXZhdGUgY29tcDogVGVtcGxhdGVkSXRlbXNIb3N0PFQ+KSB7fVxuXG4gIEBJbnB1dCgpXG4gIHNldCBuc1RlbXBsYXRlS2V5KHZhbHVlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5jb21wICYmIHRoaXMudGVtcGxhdGVSZWYpIHtcbiAgICAgIHRoaXMuY29tcC5yZWdpc3RlclRlbXBsYXRlKHZhbHVlLCB0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICB9XG4gIH1cbiAgQElucHV0KClcbiAgc2V0IG5zVGVtcGxhdGVLZXlzKHZhbHVlczogc3RyaW5nW10pIHtcbiAgICAvLyBzaW5nbGUgdGVtcGxhdGUgd2l0aCBtdWx0aXBsZSBrZXlzXG4gICAgaWYgKHRoaXMuY29tcCAmJiB0aGlzLnRlbXBsYXRlUmVmICYmIHZhbHVlcykge1xuICAgICAgdmFsdWVzLmZvckVhY2goKHZhbHVlKSA9PiB0aGlzLmNvbXAucmVnaXN0ZXJUZW1wbGF0ZSh2YWx1ZSwgdGhpcy50ZW1wbGF0ZVJlZikpO1xuICAgIH1cbiAgfVxufVxuIl19