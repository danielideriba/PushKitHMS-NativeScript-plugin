import { ApplicationRef, ComponentFactoryResolver, Injector, Optional, ɵmarkDirty } from '@angular/core';
import { ContentView, Application, Frame } from '@nativescript/core';
import { fromEvent, Subject } from 'rxjs';
import { take } from 'rxjs/operators';
import { AppHostAsyncView, AppHostView } from '../../app-host-view';
import { NSLocationStrategy } from '../../legacy/router/ns-location-strategy';
import { once } from '../../utils/general';
import { DetachedLoader } from '../detached-loader';
import { NativeScriptDomPortalOutlet } from '../portal/nsdom-portal-outlet';
import { NativeDialogConfig } from './dialog-config';
import { NgViewRef } from '../../view-refs';
export class NativeModalRef {
    constructor(_config, _injector, location) {
        var _a;
        this._config = _config;
        this._injector = _injector;
        this.location = location;
        this.stateChanged = new Subject();
        this.onDismiss = new Subject();
        let parentView = ((_a = this._config.viewContainerRef) === null || _a === void 0 ? void 0 : _a.element.nativeElement) || Application.getRootView();
        if ((parentView instanceof AppHostView || parentView instanceof AppHostAsyncView) && parentView.ngAppRoot) {
            parentView = parentView.ngAppRoot;
        }
        // _ngDialogRoot is the first child of the previously detached proxy.
        // It should have 'viewController' (iOS) or '_dialogFragment' (Android) available for
        // presenting future modal views.
        if (parentView._ngDialogRoot) {
            parentView = parentView._ngDialogRoot;
        }
        this.parentView = parentView;
        this._closeCallback = once(() => {
            var _a, _b, _c;
            this.stateChanged.next({ state: 'closing' });
            (_a = this.modalViewRef.firstNativeLikeView) === null || _a === void 0 ? void 0 : _a.closeModal();
            (_b = this.location) === null || _b === void 0 ? void 0 : _b._closeModalNavigation();
            // this.detachedLoaderRef?.destroy();
            if ((_c = this.modalViewRef) === null || _c === void 0 ? void 0 : _c.firstNativeLikeView.isLoaded) {
                fromEvent(this.modalViewRef.firstNativeLikeView, 'unloaded')
                    .pipe(take(1))
                    .subscribe(() => this.stateChanged.next({ state: 'closed' }));
            }
            else {
                this.stateChanged.next({ state: 'closed' });
            }
        });
    }
    _generateDetachedContainer(vcRef) {
        var _a;
        const detachedFactory = (this._config.componentFactoryResolver || this._injector.get(ComponentFactoryResolver)).resolveComponentFactory(DetachedLoader);
        if (vcRef) {
            this.detachedLoaderRef = vcRef.createComponent(detachedFactory);
        }
        else {
            this.detachedLoaderRef = detachedFactory.create(((_a = this._config.viewContainerRef) === null || _a === void 0 ? void 0 : _a.injector) || this._injector);
            this._injector.get(ApplicationRef).attachView(this.detachedLoaderRef.hostView);
        }
        this.detachedLoaderRef.changeDetectorRef.detectChanges();
    }
    attachTemplatePortal(portal) {
        this.startModalNavigation();
        const vcRef = portal.viewContainerRef || this._config.viewContainerRef;
        this._generateDetachedContainer(vcRef);
        portal.viewContainerRef = this.detachedLoaderRef.instance.vc;
        const targetView = new ContentView();
        this.portalOutlet = new NativeScriptDomPortalOutlet(targetView, this._config.componentFactoryResolver || this._injector.get(ComponentFactoryResolver), this._injector.get(ApplicationRef), this._injector);
        const templateRef = this.portalOutlet.attach(portal);
        this.modalViewRef = new NgViewRef(templateRef);
        this.modalViewRef.firstNativeLikeView['__ng_modal_id__'] = this._id;
        // if we don't detach the view from its parent, ios gets mad
        this.modalViewRef.detachNativeLikeView();
        const userOptions = this._config.nativeOptions || {};
        this.parentView.showModal(this.modalViewRef.firstNativeLikeView, Object.assign(Object.assign({ context: null }, userOptions), { closeCallback: () => {
                var _a;
                (_a = this.location) === null || _a === void 0 ? void 0 : _a._closeModalNavigation();
                this.onDismiss.next();
                this.onDismiss.complete();
            }, cancelable: !this._config.disableClose }));
        //   if (this.modalView !== templateRef.rootNodes[0]) {
        //     componentRef.location.nativeElement._ngDialogRoot = this.modalView;
        //   }
        return templateRef;
    }
    attachComponentPortal(portal) {
        this.startModalNavigation();
        const targetView = new ContentView();
        this.portalOutlet = new NativeScriptDomPortalOutlet(targetView, this._config.componentFactoryResolver || this._injector.get(ComponentFactoryResolver), this._injector.get(ApplicationRef), this._injector);
        const componentRef = this.portalOutlet.attach(portal);
        ɵmarkDirty(componentRef.instance);
        this.modalViewRef = new NgViewRef(componentRef);
        if (this.modalViewRef.firstNativeLikeView !== this.modalViewRef.view) {
            this.modalViewRef.view._ngDialogRoot = this.modalViewRef.firstNativeLikeView;
        }
        this.modalViewRef.firstNativeLikeView['__ng_modal_id__'] = this._id;
        // if we don't detach the view from its parent, ios gets mad
        this.modalViewRef.detachNativeLikeView();
        const userOptions = this._config.nativeOptions || {};
        this.parentView.showModal(this.modalViewRef.firstNativeLikeView, Object.assign(Object.assign({ context: null }, userOptions), { closeCallback: () => {
                var _a;
                (_a = this.location) === null || _a === void 0 ? void 0 : _a._closeModalNavigation();
                this.onDismiss.next();
                this.onDismiss.complete();
            }, cancelable: !this._config.disableClose }));
        return componentRef;
    }
    _startExitAnimation() {
        this._closeCallback();
    }
    dispose() {
        this.portalOutlet.dispose();
    }
    startModalNavigation() {
        var _a, _b, _c;
        const frame = this.parentView instanceof Frame ? this.parentView : ((_b = (_a = this.parentView) === null || _a === void 0 ? void 0 : _a.page) === null || _b === void 0 ? void 0 : _b.frame) || Frame.topmost();
        (_c = this.location) === null || _c === void 0 ? void 0 : _c._beginModalNavigation(frame);
    }
}
NativeModalRef.ctorParameters = () => [
    { type: NativeDialogConfig },
    { type: Injector },
    { type: NSLocationStrategy, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,