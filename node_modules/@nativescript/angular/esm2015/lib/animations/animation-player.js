import { View } from '@nativescript/core';
import { createKeyframeAnimation } from './utils';
import { NativeScriptDebug } from '../trace';
export class NativeScriptAnimationPlayer {
    constructor(target, keyframes, duration, delay, easing) {
        this.target = target;
        this.duration = duration;
        this.delay = delay;
        this.parentPlayer = null;
        this._startSubscriptions = [];
        this._doneSubscriptions = [];
        this._finished = false;
        this._started = false;
        this.initKeyframeAnimation(keyframes, duration, delay, easing);
    }
    get totalTime() {
        return this.delay + this.duration;
    }
    init() { }
    hasStarted() {
        return this._started;
    }
    onStart(fn) {
        this._startSubscriptions.push(fn);
    }
    onDone(fn) {
        this._doneSubscriptions.push(fn);
    }
    onDestroy(fn) {
        this._doneSubscriptions.push(fn);
    }
    play() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.play`);
        }
        if (!this.animation) {
            return;
        }
        if (!this._started) {
            this._started = true;
            this._startSubscriptions.forEach((fn) => fn());
            this._startSubscriptions = [];
        }
        // When this issue https://github.com/NativeScript/NativeScript/issues/7984 is fixes in @nativescript/core
        // we can change this fix and apply the one that is recommended in that issue.
        if (this.target.isLoaded) {
            this.playAnimation();
        }
        else {
            this.target.on(View.loadedEvent, this.onTargetLoaded.bind(this));
        }
    }
    onTargetLoaded(args) {
        this.target.off(View.loadedEvent, this.onTargetLoaded);
        this.playAnimation();
    }
    playAnimation() {
        this.animation
            .play(this.target)
            .then(() => this.onFinish())
            .catch((_e) => { });
    }
    pause() { }
    finish() {
        this.onFinish();
    }
    reset() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.reset`);
        }
        if (this.animation && this.animation.isPlaying) {
            this.animation.cancel();
        }
    }
    restart() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.restart`);
        }
        this.reset();
        this.play();
    }
    destroy() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.destroy`);
        }
        this.onFinish();
    }
    setPosition(_p) {
        throw new Error('AnimationPlayer.setPosition method is not supported!');
    }
    getPosition() {
        return 0;
    }
    initKeyframeAnimation(keyframes, duration, delay, easing) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.initKeyframeAnimation`);
        }
        this.animation = createKeyframeAnimation(keyframes, duration, delay, easing);
    }
    onFinish() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.animationsLog(`NativeScriptAnimationPlayer.onFinish`);
        }
        if (this._finished) {
            return;
        }
        this._finished = true;
        this._started = false;
        this._doneSubscriptions.forEach((fn) => fn());
        this._doneSubscriptions = [];
    }
}
//# sourceMappingURL=data:application/json;base64,