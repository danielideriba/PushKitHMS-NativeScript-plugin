import { KeyframeAnimation, parseKeyframeDeclarations, animationTimingFunctionConverter } from '@nativescript/core';
const DASH_CASE_REGEXP = /-+([a-z0-9])/g;
export function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
}
export function createKeyframeAnimation(styles, duration, delay, easing) {
    const info = createKeyframeAnimationInfo(styles, duration, delay, easing);
    return KeyframeAnimation.keyframeAnimationFromInfo(info);
}
const createKeyframeAnimationInfo = (styles, duration, delay, easing) => ({
    isForwards: true,
    duration: duration || 0.01,
    delay,
    curve: getCurve(easing),
    keyframes: styles.map(parseAnimationKeyframe),
});
const ɵ0 = createKeyframeAnimationInfo;
const getCurve = (value) => animationTimingFunctionConverter(value);
const ɵ1 = getCurve;
const parseAnimationKeyframe = (styles) => ({
    duration: getKeyframeDuration(styles),
    declarations: getDeclarations(styles),
});
const ɵ2 = parseAnimationKeyframe;
const getKeyframeDuration = (styles) => styles.offset;
const ɵ3 = getKeyframeDuration;
function getDeclarations(styles) {
    const unparsedDeclarations = Object.keys(styles).map((property) => ({ property, value: styles[property] }));
    return parseKeyframeDeclarations(unparsedDeclarations);
}
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2FuaW1hdGlvbnMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUE0RCx5QkFBeUIsRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBTzlLLE1BQU0sZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO0FBQ3pDLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxLQUFhO0lBQy9DLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUM5RSxDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUFDLE1BQWtCLEVBQUUsUUFBZ0IsRUFBRSxLQUFhLEVBQUUsTUFBYztJQUN6RyxNQUFNLElBQUksR0FBRywyQkFBMkIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxRSxPQUFPLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFFRCxNQUFNLDJCQUEyQixHQUFHLENBQUMsTUFBa0IsRUFBRSxRQUFnQixFQUFFLEtBQWEsRUFBRSxNQUFjLEVBQXlCLEVBQUUsQ0FBQyxDQUFDO0lBQ25JLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLFFBQVEsRUFBRSxRQUFRLElBQUksSUFBSTtJQUMxQixLQUFLO0lBQ0wsS0FBSyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDdkIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUM7Q0FDOUMsQ0FBQyxDQUFDOztBQUVILE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFNUUsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLE1BQWdCLEVBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxNQUFNLENBQUM7SUFDckMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUM7Q0FDdEMsQ0FBQyxDQUFDOztBQUVILE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxNQUFnQixFQUFVLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDOztBQUV4RSxTQUFTLGVBQWUsQ0FBQyxNQUFnQjtJQUN2QyxNQUFNLG9CQUFvQixHQUEwQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRW5JLE9BQU8seUJBQXlCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUN6RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2V5ZnJhbWVBbmltYXRpb24sIEtleWZyYW1lQW5pbWF0aW9uSW5mbywgS2V5ZnJhbWVEZWNsYXJhdGlvbiwgS2V5ZnJhbWVJbmZvLCBwYXJzZUtleWZyYW1lRGVjbGFyYXRpb25zLCBhbmltYXRpb25UaW1pbmdGdW5jdGlvbkNvbnZlcnRlciB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2V5ZnJhbWUge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXI7XG4gIG9mZnNldDogbnVtYmVyO1xufVxuXG5jb25zdCBEQVNIX0NBU0VfUkVHRVhQID0gLy0rKFthLXowLTldKS9nO1xuZXhwb3J0IGZ1bmN0aW9uIGRhc2hDYXNlVG9DYW1lbENhc2UoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKERBU0hfQ0FTRV9SRUdFWFAsICguLi5tOiBhbnlbXSkgPT4gbVsxXS50b1VwcGVyQ2FzZSgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUtleWZyYW1lQW5pbWF0aW9uKHN0eWxlczogS2V5ZnJhbWVbXSwgZHVyYXRpb246IG51bWJlciwgZGVsYXk6IG51bWJlciwgZWFzaW5nOiBzdHJpbmcpOiBLZXlmcmFtZUFuaW1hdGlvbiB7XG4gIGNvbnN0IGluZm8gPSBjcmVhdGVLZXlmcmFtZUFuaW1hdGlvbkluZm8oc3R5bGVzLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZyk7XG4gIHJldHVybiBLZXlmcmFtZUFuaW1hdGlvbi5rZXlmcmFtZUFuaW1hdGlvbkZyb21JbmZvKGluZm8pO1xufVxuXG5jb25zdCBjcmVhdGVLZXlmcmFtZUFuaW1hdGlvbkluZm8gPSAoc3R5bGVzOiBLZXlmcmFtZVtdLCBkdXJhdGlvbjogbnVtYmVyLCBkZWxheTogbnVtYmVyLCBlYXNpbmc6IHN0cmluZyk6IEtleWZyYW1lQW5pbWF0aW9uSW5mbyA9PiAoe1xuICBpc0ZvcndhcmRzOiB0cnVlLFxuICBkdXJhdGlvbjogZHVyYXRpb24gfHwgMC4wMSxcbiAgZGVsYXksXG4gIGN1cnZlOiBnZXRDdXJ2ZShlYXNpbmcpLFxuICBrZXlmcmFtZXM6IHN0eWxlcy5tYXAocGFyc2VBbmltYXRpb25LZXlmcmFtZSksXG59KTtcblxuY29uc3QgZ2V0Q3VydmUgPSAodmFsdWU6IHN0cmluZykgPT4gYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25Db252ZXJ0ZXIodmFsdWUpO1xuXG5jb25zdCBwYXJzZUFuaW1hdGlvbktleWZyYW1lID0gKHN0eWxlczogS2V5ZnJhbWUpOiBLZXlmcmFtZUluZm8gPT4gKHtcbiAgZHVyYXRpb246IGdldEtleWZyYW1lRHVyYXRpb24oc3R5bGVzKSxcbiAgZGVjbGFyYXRpb25zOiBnZXREZWNsYXJhdGlvbnMoc3R5bGVzKSxcbn0pO1xuXG5jb25zdCBnZXRLZXlmcmFtZUR1cmF0aW9uID0gKHN0eWxlczogS2V5ZnJhbWUpOiBudW1iZXIgPT4gc3R5bGVzLm9mZnNldDtcblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25zKHN0eWxlczogS2V5ZnJhbWUpOiBLZXlmcmFtZURlY2xhcmF0aW9uW10ge1xuICBjb25zdCB1bnBhcnNlZERlY2xhcmF0aW9uczogS2V5ZnJhbWVEZWNsYXJhdGlvbltdID0gT2JqZWN0LmtleXMoc3R5bGVzKS5tYXAoKHByb3BlcnR5KSA9PiAoeyBwcm9wZXJ0eSwgdmFsdWU6IHN0eWxlc1twcm9wZXJ0eV0gfSkpO1xuXG4gIHJldHVybiBwYXJzZUtleWZyYW1lRGVjbGFyYXRpb25zKHVucGFyc2VkRGVjbGFyYXRpb25zKTtcbn1cbiJdfQ==