import { NgModule, Injectable, Inject, NgZone, RendererFactory2, Optional, SkipSelf } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { AnimationBuilder } from '@angular/animations';
import { AnimationDriver, ɵAnimationStyleNormalizer as AnimationStyleNormalizer, ɵWebAnimationsStyleNormalizer as WebAnimationsStyleNormalizer, ɵAnimationEngine as AnimationEngine } from '@angular/animations/browser';
import { ɵAnimationRendererFactory as AnimationRendererFactory, ɵBrowserAnimationBuilder as BrowserAnimationBuilder } from '@angular/platform-browser/animations';
// import { NativeScriptModule } from "../nativescript.module";
import { NativeScriptRendererFactory } from '../nativescript-renderer';
import { NativeScriptAnimationDriver } from './animation-driver';
import { throwIfAlreadyLoaded } from '../utils/general';
import { NativeScriptCommonModule } from '../nativescript-common.module';
export class InjectableAnimationEngine extends AnimationEngine {
    constructor(doc, driver, normalizer) {
        super(doc.body, driver, normalizer);
    }
}
InjectableAnimationEngine.decorators = [
    { type: Injectable }
];
InjectableAnimationEngine.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: AnimationDriver },
    { type: AnimationStyleNormalizer }
];
export function instantiateSupportedAnimationDriver() {
    return new NativeScriptAnimationDriver();
}
export function instantiateRendererFactory(renderer, engine, zone) {
    return new AnimationRendererFactory(renderer, engine, zone);
}
export function instantiateDefaultStyleNormalizer() {
    return new WebAnimationsStyleNormalizer();
}
export class NativeScriptAnimationsModule {
    constructor(parentModule) {
        // Prevents NativeScriptAnimationsModule from getting imported multiple times
        throwIfAlreadyLoaded(parentModule, 'NativeScriptAnimationsModule');
    }
}
NativeScriptAnimationsModule.decorators = [
    { type: NgModule, args: [{
                imports: [NativeScriptCommonModule],
                providers: [
                    {
                        provide: AnimationDriver,
                        useFactory: instantiateSupportedAnimationDriver,
                    },
                    { provide: AnimationBuilder, useClass: BrowserAnimationBuilder },
                    {
                        provide: AnimationStyleNormalizer,
                        useFactory: instantiateDefaultStyleNormalizer,
                    },
                    { provide: AnimationEngine, useClass: InjectableAnimationEngine },
                    {
                        provide: RendererFactory2,
                        useFactory: instantiateRendererFactory,
                        deps: [NativeScriptRendererFactory, AnimationEngine, NgZone],
                    },
                ],
            },] }
];
NativeScriptAnimationsModule.ctorParameters = () => [
    { type: NativeScriptAnimationsModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9ucy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2FuaW1hdGlvbnMvYW5pbWF0aW9ucy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLHlCQUF5QixJQUFJLHdCQUF3QixFQUFFLDZCQUE2QixJQUFJLDRCQUE0QixFQUFFLGdCQUFnQixJQUFJLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXpOLE9BQU8sRUFBRSx5QkFBeUIsSUFBSSx3QkFBd0IsRUFBRSx3QkFBd0IsSUFBSSx1QkFBdUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRWxLLCtEQUErRDtBQUMvRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUd6RSxNQUFNLE9BQU8seUJBQTBCLFNBQVEsZUFBZTtJQUM1RCxZQUE4QixHQUFRLEVBQUUsTUFBdUIsRUFBRSxVQUFvQztRQUNuRyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7O1lBSkYsVUFBVTs7OzRDQUVJLE1BQU0sU0FBQyxRQUFRO1lBWnJCLGVBQWU7WUFBK0Isd0JBQXdCOztBQWlCL0UsTUFBTSxVQUFVLG1DQUFtQztJQUNqRCxPQUFPLElBQUksMkJBQTJCLEVBQUUsQ0FBQztBQUMzQyxDQUFDO0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLFFBQXFDLEVBQUUsTUFBdUIsRUFBRSxJQUFZO0lBQ3JILE9BQU8sSUFBSSx3QkFBd0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFFRCxNQUFNLFVBQVUsaUNBQWlDO0lBQy9DLE9BQU8sSUFBSSw0QkFBNEIsRUFBRSxDQUFDO0FBQzVDLENBQUM7QUFzQkQsTUFBTSxPQUFPLDRCQUE0QjtJQUN2QyxZQUFvQyxZQUEwQztRQUM1RSw2RUFBNkU7UUFDN0Usb0JBQW9CLENBQUMsWUFBWSxFQUFFLDhCQUE4QixDQUFDLENBQUM7SUFDckUsQ0FBQzs7O1lBeEJGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztnQkFDbkMsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxlQUFlO3dCQUN4QixVQUFVLEVBQUUsbUNBQW1DO3FCQUNoRDtvQkFDRCxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUU7b0JBQ2hFO3dCQUNFLE9BQU8sRUFBRSx3QkFBd0I7d0JBQ2pDLFVBQVUsRUFBRSxpQ0FBaUM7cUJBQzlDO29CQUNELEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUseUJBQXlCLEVBQUU7b0JBQ2pFO3dCQUNFLE9BQU8sRUFBRSxnQkFBZ0I7d0JBQ3pCLFVBQVUsRUFBRSwwQkFBMEI7d0JBQ3RDLElBQUksRUFBRSxDQUFDLDJCQUEyQixFQUFFLGVBQWUsRUFBRSxNQUFNLENBQUM7cUJBQzdEO2lCQUNGO2FBQ0Y7OztZQUVtRCw0QkFBNEIsdUJBQWpFLFFBQVEsWUFBSSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIEluamVjdGFibGUsIEluamVjdCwgTmdab25lLCBSZW5kZXJlckZhY3RvcnkyLCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEFuaW1hdGlvbkJ1aWxkZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuaW1wb3J0IHsgQW5pbWF0aW9uRHJpdmVyLCDJtUFuaW1hdGlvblN0eWxlTm9ybWFsaXplciBhcyBBbmltYXRpb25TdHlsZU5vcm1hbGl6ZXIsIMm1V2ViQW5pbWF0aW9uc1N0eWxlTm9ybWFsaXplciBhcyBXZWJBbmltYXRpb25zU3R5bGVOb3JtYWxpemVyLCDJtUFuaW1hdGlvbkVuZ2luZSBhcyBBbmltYXRpb25FbmdpbmUgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zL2Jyb3dzZXInO1xuXG5pbXBvcnQgeyDJtUFuaW1hdGlvblJlbmRlcmVyRmFjdG9yeSBhcyBBbmltYXRpb25SZW5kZXJlckZhY3RvcnksIMm1QnJvd3NlckFuaW1hdGlvbkJ1aWxkZXIgYXMgQnJvd3NlckFuaW1hdGlvbkJ1aWxkZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2FuaW1hdGlvbnMnO1xuXG4vLyBpbXBvcnQgeyBOYXRpdmVTY3JpcHRNb2R1bGUgfSBmcm9tIFwiLi4vbmF0aXZlc2NyaXB0Lm1vZHVsZVwiO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0UmVuZGVyZXJGYWN0b3J5IH0gZnJvbSAnLi4vbmF0aXZlc2NyaXB0LXJlbmRlcmVyJztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdEFuaW1hdGlvbkRyaXZlciB9IGZyb20gJy4vYW5pbWF0aW9uLWRyaXZlcic7XG5pbXBvcnQgeyB0aHJvd0lmQWxyZWFkeUxvYWRlZCB9IGZyb20gJy4uL3V0aWxzL2dlbmVyYWwnO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0Q29tbW9uTW9kdWxlIH0gZnJvbSAnLi4vbmF0aXZlc2NyaXB0LWNvbW1vbi5tb2R1bGUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW5qZWN0YWJsZUFuaW1hdGlvbkVuZ2luZSBleHRlbmRzIEFuaW1hdGlvbkVuZ2luZSB7XG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIGRvYzogYW55LCBkcml2ZXI6IEFuaW1hdGlvbkRyaXZlciwgbm9ybWFsaXplcjogQW5pbWF0aW9uU3R5bGVOb3JtYWxpemVyKSB7XG4gICAgc3VwZXIoZG9jLmJvZHksIGRyaXZlciwgbm9ybWFsaXplcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbnRpYXRlU3VwcG9ydGVkQW5pbWF0aW9uRHJpdmVyKCkge1xuICByZXR1cm4gbmV3IE5hdGl2ZVNjcmlwdEFuaW1hdGlvbkRyaXZlcigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFudGlhdGVSZW5kZXJlckZhY3RvcnkocmVuZGVyZXI6IE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSwgZW5naW5lOiBBbmltYXRpb25FbmdpbmUsIHpvbmU6IE5nWm9uZSkge1xuICByZXR1cm4gbmV3IEFuaW1hdGlvblJlbmRlcmVyRmFjdG9yeShyZW5kZXJlciwgZW5naW5lLCB6b25lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbnRpYXRlRGVmYXVsdFN0eWxlTm9ybWFsaXplcigpIHtcbiAgcmV0dXJuIG5ldyBXZWJBbmltYXRpb25zU3R5bGVOb3JtYWxpemVyKCk7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtOYXRpdmVTY3JpcHRDb21tb25Nb2R1bGVdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBBbmltYXRpb25Ecml2ZXIsXG4gICAgICB1c2VGYWN0b3J5OiBpbnN0YW50aWF0ZVN1cHBvcnRlZEFuaW1hdGlvbkRyaXZlcixcbiAgICB9LFxuICAgIHsgcHJvdmlkZTogQW5pbWF0aW9uQnVpbGRlciwgdXNlQ2xhc3M6IEJyb3dzZXJBbmltYXRpb25CdWlsZGVyIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogQW5pbWF0aW9uU3R5bGVOb3JtYWxpemVyLFxuICAgICAgdXNlRmFjdG9yeTogaW5zdGFudGlhdGVEZWZhdWx0U3R5bGVOb3JtYWxpemVyLFxuICAgIH0sXG4gICAgeyBwcm92aWRlOiBBbmltYXRpb25FbmdpbmUsIHVzZUNsYXNzOiBJbmplY3RhYmxlQW5pbWF0aW9uRW5naW5lIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogUmVuZGVyZXJGYWN0b3J5MixcbiAgICAgIHVzZUZhY3Rvcnk6IGluc3RhbnRpYXRlUmVuZGVyZXJGYWN0b3J5LFxuICAgICAgZGVwczogW05hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSwgQW5pbWF0aW9uRW5naW5lLCBOZ1pvbmVdLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdEFuaW1hdGlvbnNNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU6IE5hdGl2ZVNjcmlwdEFuaW1hdGlvbnNNb2R1bGUpIHtcbiAgICAvLyBQcmV2ZW50cyBOYXRpdmVTY3JpcHRBbmltYXRpb25zTW9kdWxlIGZyb20gZ2V0dGluZyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lc1xuICAgIHRocm93SWZBbHJlYWR5TG9hZGVkKHBhcmVudE1vZHVsZSwgJ05hdGl2ZVNjcmlwdEFuaW1hdGlvbnNNb2R1bGUnKTtcbiAgfVxufVxuIl19