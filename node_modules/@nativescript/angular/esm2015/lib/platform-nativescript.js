import { Sanitizer, createPlatformFactory, platformCore } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NativeScriptPlatformRefProxy } from './platform-ref';
import { AppHostView } from './app-host-view';
import { Color, GridLayout } from '@nativescript/core';
import { defaultPageFactory, PAGE_FACTORY } from './tokens';
const ɵ0 = defaultPageFactory;
export const defaultPageFactoryProvider = { provide: PAGE_FACTORY, useValue: ɵ0 };
export class NativeScriptSanitizer extends Sanitizer {
    sanitize(_context, value) {
        return value;
    }
}
// TODO: when angular finally exports their scheduler token for ivy CD, provide our own with queueMacroTask
// export function schedulerFactory() {
//   return (fn: any) => {
//     console.log('SCHEDULER');
//     setTimeout(fn, 0);
//   };
// }
export class NativeScriptDocument {
    constructor() {
        // Required by the AnimationDriver
        this.body = {
            isOverride: true,
        };
    }
    createElement(tag) {
        throw new Error('NativeScriptDocument is not DOM Document. There is no createElement() method.');
    }
}
export const COMMON_PROVIDERS = [defaultPageFactoryProvider, { provide: Sanitizer, useClass: NativeScriptSanitizer, deps: [] }, { provide: DOCUMENT, useClass: NativeScriptDocument, deps: [] }];
export const platformNativeScript = createPlatformFactory(platformCore, 'nativescriptDynamic', COMMON_PROVIDERS);
/**
 * @deprecated use runNativeScriptAngularApp instead
 */
export const platformNativeScriptDynamic = function (options, extraProviders) {
    console.log('platformNativeScriptDynamic is deprecated, use runNativeScriptAngularApp instead');
    options = options || {};
    extraProviders = extraProviders || [];
    const ngRootView = new AppHostView(new Color(options.backgroundColor || 'white'));
    let launchView = options.launchView;
    if (!launchView && options.async) {
        launchView = new GridLayout();
        launchView.backgroundColor = options.backgroundColor || 'white';
    }
    return new NativeScriptPlatformRefProxy(platformNativeScript([...extraProviders]), launchView);
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0tbmF0aXZlc2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9wbGF0Zm9ybS1uYXRpdmVzY3JpcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUE0RixTQUFTLEVBQWtDLHFCQUFxQixFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6TSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztXQUdpQixrQkFBa0I7QUFBL0YsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsSUFBb0IsRUFBRSxDQUFDO0FBQ2xHLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxTQUFTO0lBQ2xELFFBQVEsQ0FBQyxRQUFhLEVBQUUsS0FBYTtRQUNuQyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRjtBQUNELDJHQUEyRztBQUMzRyx1Q0FBdUM7QUFDdkMsMEJBQTBCO0FBQzFCLGdDQUFnQztBQUNoQyx5QkFBeUI7QUFDekIsT0FBTztBQUNQLElBQUk7QUFFSixNQUFNLE9BQU8sb0JBQW9CO0lBQWpDO1FBQ0Usa0NBQWtDO1FBQzNCLFNBQUksR0FBUTtZQUNqQixVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDO0lBS0osQ0FBQztJQUhDLGFBQWEsQ0FBQyxHQUFXO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0VBQStFLENBQUMsQ0FBQztJQUNuRyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLDBCQUEwQixFQUFFLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFak0sTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcscUJBQXFCLENBQUMsWUFBWSxFQUFFLHFCQUFxQixFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFvQ2pIOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsVUFBVSxPQUFvQixFQUFFLGNBQWlDO0lBQzFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0ZBQWtGLENBQUMsQ0FBQztJQUNoRyxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUN4QixjQUFjLEdBQUcsY0FBYyxJQUFJLEVBQUUsQ0FBQztJQUV0QyxNQUFNLFVBQVUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbEYsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUNwQyxJQUFJLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7UUFDaEMsVUFBVSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7UUFDOUIsVUFBVSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQztLQUNqRTtJQUNELE9BQU8sSUFBSSw0QkFBNEIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNqRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlLCBJbmplY3RvciwgQ29tcGlsZXJPcHRpb25zLCBQbGF0Zm9ybVJlZiwgTmdNb2R1bGVGYWN0b3J5LCBOZ01vZHVsZVJlZiwgRXZlbnRFbWl0dGVyLCBTYW5pdGl6ZXIsIEluamVjdGlvblRva2VuLCBTdGF0aWNQcm92aWRlciwgY3JlYXRlUGxhdGZvcm1GYWN0b3J5LCBwbGF0Zm9ybUNvcmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdFBsYXRmb3JtUmVmUHJveHkgfSBmcm9tICcuL3BsYXRmb3JtLXJlZic7XG5pbXBvcnQgeyBBcHBIb3N0VmlldyB9IGZyb20gJy4vYXBwLWhvc3Qtdmlldyc7XG5pbXBvcnQgeyBDb2xvciwgR3JpZExheW91dCB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBkZWZhdWx0UGFnZUZhY3RvcnksIFBBR0VfRkFDVE9SWSB9IGZyb20gJy4vdG9rZW5zJztcbmltcG9ydCB7IEFwcExhdW5jaFZpZXcgfSBmcm9tICcuL2FwcGxpY2F0aW9uJztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRQYWdlRmFjdG9yeVByb3ZpZGVyID0geyBwcm92aWRlOiBQQUdFX0ZBQ1RPUlksIHVzZVZhbHVlOiBkZWZhdWx0UGFnZUZhY3RvcnkgfTtcbmV4cG9ydCBjbGFzcyBOYXRpdmVTY3JpcHRTYW5pdGl6ZXIgZXh0ZW5kcyBTYW5pdGl6ZXIge1xuICBzYW5pdGl6ZShfY29udGV4dDogYW55LCB2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbi8vIFRPRE86IHdoZW4gYW5ndWxhciBmaW5hbGx5IGV4cG9ydHMgdGhlaXIgc2NoZWR1bGVyIHRva2VuIGZvciBpdnkgQ0QsIHByb3ZpZGUgb3VyIG93biB3aXRoIHF1ZXVlTWFjcm9UYXNrXG4vLyBleHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVyRmFjdG9yeSgpIHtcbi8vICAgcmV0dXJuIChmbjogYW55KSA9PiB7XG4vLyAgICAgY29uc29sZS5sb2coJ1NDSEVEVUxFUicpO1xuLy8gICAgIHNldFRpbWVvdXQoZm4sIDApO1xuLy8gICB9O1xuLy8gfVxuXG5leHBvcnQgY2xhc3MgTmF0aXZlU2NyaXB0RG9jdW1lbnQge1xuICAvLyBSZXF1aXJlZCBieSB0aGUgQW5pbWF0aW9uRHJpdmVyXG4gIHB1YmxpYyBib2R5OiBhbnkgPSB7XG4gICAgaXNPdmVycmlkZTogdHJ1ZSxcbiAgfTtcblxuICBjcmVhdGVFbGVtZW50KHRhZzogc3RyaW5nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOYXRpdmVTY3JpcHREb2N1bWVudCBpcyBub3QgRE9NIERvY3VtZW50LiBUaGVyZSBpcyBubyBjcmVhdGVFbGVtZW50KCkgbWV0aG9kLicpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDT01NT05fUFJPVklERVJTID0gW2RlZmF1bHRQYWdlRmFjdG9yeVByb3ZpZGVyLCB7IHByb3ZpZGU6IFNhbml0aXplciwgdXNlQ2xhc3M6IE5hdGl2ZVNjcmlwdFNhbml0aXplciwgZGVwczogW10gfSwgeyBwcm92aWRlOiBET0NVTUVOVCwgdXNlQ2xhc3M6IE5hdGl2ZVNjcmlwdERvY3VtZW50LCBkZXBzOiBbXSB9XTtcblxuZXhwb3J0IGNvbnN0IHBsYXRmb3JtTmF0aXZlU2NyaXB0ID0gY3JlYXRlUGxhdGZvcm1GYWN0b3J5KHBsYXRmb3JtQ29yZSwgJ25hdGl2ZXNjcmlwdER5bmFtaWMnLCBDT01NT05fUFJPVklERVJTKTtcblxuZXhwb3J0IGludGVyZmFjZSBIbXJPcHRpb25zIHtcbiAgLyoqXG4gICAqIEEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyIE1vZHVsZSB0eXBlIG9yIE5nTW9kdWxlRmFjdG9yeSB0eXBlLlxuICAgKiBUaGlzIG5lZWRzIHRvIGJlIGEgZmFjdG9yeSBmdW5jdGlvbiBhcyB0aGUgdHlwZXMgd2lsbCBjaGFuZ2Ugd2hlbiBtb2R1bGVzIGFyZSByZXBsYWNlZC5cbiAgICovXG4gIG1vZHVsZVR5cGVGYWN0b3J5PzogKCkgPT4gVHlwZTxhbnk+IHwgTmdNb2R1bGVGYWN0b3J5PGFueT47XG5cbiAgLyoqXG4gICAqIEEgbGl2ZXN5bmMgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBsaXZlc3luYy5cbiAgICogSXQgZ2l2ZXMgdGhlIEhNUiBhIGhvb2sgdG8gYXBwbHkgdGhlIG1vZHVsZSByZXBsYWNlbWVudC5cbiAgICogQHBhcmFtIGJvb3RzdHJhcFBsYXRmb3JtIC0gQSBib290c3RyYXAgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIGFmdGVyIEhNUiBpcyBkb25lLiBJdCB3aWxsIGJvb3RzdHJhcCBhIG5ldyBhbmd1bGFyIGFwcCB3aXRoaW4gdGhlIGV4aXNpdGluZyBwbGF0Zm9ybSwgdXNpbmcgdGhlIG1vZHVsZVR5cGVGYWN0b3J5IHRvIGdldCB0aGUgTW9kdWxlIG9yIE5nTW9kdWxlRmFjdG9yeSB0byBiZSB1c2VkLlxuICAgKi9cbiAgbGl2ZXN5bmNDYWxsYmFjazogKGJvb3RzdHJhcFBsYXRmb3JtOiAoKSA9PiB2b2lkKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcE9wdGlvbnMge1xuICBjc3NGaWxlPzogc3RyaW5nO1xuICBzdGFydFBhZ2VBY3Rpb25CYXJIaWRkZW4/OiBib29sZWFuO1xuICBobXJPcHRpb25zPzogSG1yT3B0aW9ucztcbiAgLyoqXG4gICAqIEJhY2tncm91bmQgY29sb3Igb2YgdGhlIHJvb3Qgdmlld1xuICAgKi9cbiAgYmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xuICAvKipcbiAgICogVXNlIGFuaW1hdGVkIGxhdW5jaCB2aWV3IChhc3luYyBieSBkZWZhdWx0KVxuICAgKi9cbiAgbGF1bmNoVmlldz86IEFwcExhdW5jaFZpZXc7XG4gIC8qKlxuICAgKiBXaGVuIHVzaW5nIEFzeW5jIEFQUF9JTklUSUFMSVpFUiwgc2V0IHRoaXMgdG8gYHRydWVgLlxuICAgKiAoTm90IG5lZWRlZCB3aGVuIHVzaW5nIGxhdW5jaFZpZXcpXG4gICAqL1xuICBhc3luYz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHJ1bk5hdGl2ZVNjcmlwdEFuZ3VsYXJBcHAgaW5zdGVhZFxuICovXG5leHBvcnQgY29uc3QgcGxhdGZvcm1OYXRpdmVTY3JpcHREeW5hbWljID0gZnVuY3Rpb24gKG9wdGlvbnM/OiBBcHBPcHRpb25zLCBleHRyYVByb3ZpZGVycz86IFN0YXRpY1Byb3ZpZGVyW10pIHtcbiAgY29uc29sZS5sb2coJ3BsYXRmb3JtTmF0aXZlU2NyaXB0RHluYW1pYyBpcyBkZXByZWNhdGVkLCB1c2UgcnVuTmF0aXZlU2NyaXB0QW5ndWxhckFwcCBpbnN0ZWFkJyk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBleHRyYVByb3ZpZGVycyA9IGV4dHJhUHJvdmlkZXJzIHx8IFtdO1xuXG4gIGNvbnN0IG5nUm9vdFZpZXcgPSBuZXcgQXBwSG9zdFZpZXcobmV3IENvbG9yKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yIHx8ICd3aGl0ZScpKTtcbiAgbGV0IGxhdW5jaFZpZXcgPSBvcHRpb25zLmxhdW5jaFZpZXc7XG4gIGlmICghbGF1bmNoVmlldyAmJiBvcHRpb25zLmFzeW5jKSB7XG4gICAgbGF1bmNoVmlldyA9IG5ldyBHcmlkTGF5b3V0KCk7XG4gICAgbGF1bmNoVmlldy5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvciB8fCAnd2hpdGUnO1xuICB9XG4gIHJldHVybiBuZXcgTmF0aXZlU2NyaXB0UGxhdGZvcm1SZWZQcm94eShwbGF0Zm9ybU5hdGl2ZVNjcmlwdChbLi4uZXh0cmFQcm92aWRlcnNdKSwgbGF1bmNoVmlldyk7XG59O1xuIl19