import { Trace } from '@nativescript/core';
export class NativeScriptDebug {
    static isLogEnabled() {
        return Trace.isEnabled();
    }
    static animationsLog(message) {
        Trace.write(message, NativeScriptDebug.animationsTraceCategory);
    }
    static rendererLog(msg) {
        Trace.write(msg, NativeScriptDebug.rendererTraceCategory);
    }
    static rendererError(message) {
        Trace.write(message, NativeScriptDebug.rendererTraceCategory, Trace.messageType.error);
    }
    static viewUtilLog(msg) {
        Trace.write(msg, NativeScriptDebug.viewUtilCategory);
    }
    static routerLog(message) {
        Trace.write(message, NativeScriptDebug.routerTraceCategory);
    }
    static routerError(message) {
        Trace.write(message, NativeScriptDebug.routerTraceCategory, Trace.messageType.error);
    }
    static routeReuseStrategyLog(message) {
        Trace.write(message, NativeScriptDebug.routeReuseStrategyTraceCategory);
    }
    static styleError(message) {
        Trace.write(message, Trace.categories.Style, Trace.messageType.error);
    }
    static listViewLog(message) {
        Trace.write(message, NativeScriptDebug.listViewTraceCategory);
    }
    static listViewError(message) {
        Trace.write(message, NativeScriptDebug.listViewTraceCategory, Trace.messageType.error);
    }
    static bootstrapLog(message) {
        Trace.write(message, NativeScriptDebug.bootstrapCategory);
    }
    static bootstrapLogError(message) {
        Trace.write(message, NativeScriptDebug.bootstrapCategory, Trace.messageType.error);
    }
}
NativeScriptDebug.animationsTraceCategory = 'ns-animations';
NativeScriptDebug.rendererTraceCategory = 'ns-renderer';
NativeScriptDebug.viewUtilCategory = 'ns-view-util';
NativeScriptDebug.routerTraceCategory = 'ns-router';
NativeScriptDebug.routeReuseStrategyTraceCategory = 'ns-route-reuse-strategy';
NativeScriptDebug.listViewTraceCategory = 'ns-list-view';
NativeScriptDebug.bootstrapCategory = 'bootstrap';
// TODO: migrate all usage to this - avoids extraneous method executions
NativeScriptDebug.enabled = Trace.isEnabled();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3RyYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUzQyxNQUFNLE9BQU8saUJBQWlCO0lBVzVCLE1BQU0sQ0FBQyxZQUFZO1FBQ2pCLE9BQU8sS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxNQUFNLENBQUMsYUFBYSxDQUFDLE9BQWU7UUFDbEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHO1FBQ3BCLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBZTtRQUNsQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUc7UUFDcEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFlO1FBQzlCLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBZTtRQUNoQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxNQUFNLENBQUMscUJBQXFCLENBQUMsT0FBZTtRQUMxQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQWU7UUFDL0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFlO1FBQ2hDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBZTtRQUNsQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQWU7UUFDakMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLE9BQWU7UUFDdEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRixDQUFDOztBQTVEZSx5Q0FBdUIsR0FBRyxlQUFlLENBQUM7QUFDMUMsdUNBQXFCLEdBQUcsYUFBYSxDQUFDO0FBQ3RDLGtDQUFnQixHQUFHLGNBQWMsQ0FBQztBQUNsQyxxQ0FBbUIsR0FBRyxXQUFXLENBQUM7QUFDbEMsaURBQStCLEdBQUcseUJBQXlCLENBQUM7QUFDNUQsdUNBQXFCLEdBQUcsY0FBYyxDQUFDO0FBQ3ZDLG1DQUFpQixHQUFHLFdBQVcsQ0FBQztBQUNoRCx3RUFBd0U7QUFDeEQseUJBQU8sR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFjZSB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBOYXRpdmVTY3JpcHREZWJ1ZyB7XG4gIHN0YXRpYyByZWFkb25seSBhbmltYXRpb25zVHJhY2VDYXRlZ29yeSA9ICducy1hbmltYXRpb25zJztcbiAgc3RhdGljIHJlYWRvbmx5IHJlbmRlcmVyVHJhY2VDYXRlZ29yeSA9ICducy1yZW5kZXJlcic7XG4gIHN0YXRpYyByZWFkb25seSB2aWV3VXRpbENhdGVnb3J5ID0gJ25zLXZpZXctdXRpbCc7XG4gIHN0YXRpYyByZWFkb25seSByb3V0ZXJUcmFjZUNhdGVnb3J5ID0gJ25zLXJvdXRlcic7XG4gIHN0YXRpYyByZWFkb25seSByb3V0ZVJldXNlU3RyYXRlZ3lUcmFjZUNhdGVnb3J5ID0gJ25zLXJvdXRlLXJldXNlLXN0cmF0ZWd5JztcbiAgc3RhdGljIHJlYWRvbmx5IGxpc3RWaWV3VHJhY2VDYXRlZ29yeSA9ICducy1saXN0LXZpZXcnO1xuICBzdGF0aWMgcmVhZG9ubHkgYm9vdHN0cmFwQ2F0ZWdvcnkgPSAnYm9vdHN0cmFwJztcbiAgLy8gVE9ETzogbWlncmF0ZSBhbGwgdXNhZ2UgdG8gdGhpcyAtIGF2b2lkcyBleHRyYW5lb3VzIG1ldGhvZCBleGVjdXRpb25zXG4gIHN0YXRpYyByZWFkb25seSBlbmFibGVkID0gVHJhY2UuaXNFbmFibGVkKCk7XG5cbiAgc3RhdGljIGlzTG9nRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gVHJhY2UuaXNFbmFibGVkKCk7XG4gIH1cblxuICBzdGF0aWMgYW5pbWF0aW9uc0xvZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBUcmFjZS53cml0ZShtZXNzYWdlLCBOYXRpdmVTY3JpcHREZWJ1Zy5hbmltYXRpb25zVHJhY2VDYXRlZ29yeSk7XG4gIH1cblxuICBzdGF0aWMgcmVuZGVyZXJMb2cobXNnKTogdm9pZCB7XG4gICAgVHJhY2Uud3JpdGUobXNnLCBOYXRpdmVTY3JpcHREZWJ1Zy5yZW5kZXJlclRyYWNlQ2F0ZWdvcnkpO1xuICB9XG5cbiAgc3RhdGljIHJlbmRlcmVyRXJyb3IobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgVHJhY2Uud3JpdGUobWVzc2FnZSwgTmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJUcmFjZUNhdGVnb3J5LCBUcmFjZS5tZXNzYWdlVHlwZS5lcnJvcik7XG4gIH1cblxuICBzdGF0aWMgdmlld1V0aWxMb2cobXNnKTogdm9pZCB7XG4gICAgVHJhY2Uud3JpdGUobXNnLCBOYXRpdmVTY3JpcHREZWJ1Zy52aWV3VXRpbENhdGVnb3J5KTtcbiAgfVxuXG4gIHN0YXRpYyByb3V0ZXJMb2cobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgVHJhY2Uud3JpdGUobWVzc2FnZSwgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyVHJhY2VDYXRlZ29yeSk7XG4gIH1cblxuICBzdGF0aWMgcm91dGVyRXJyb3IobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgVHJhY2Uud3JpdGUobWVzc2FnZSwgTmF0aXZlU2NyaXB0RGVidWcucm91dGVyVHJhY2VDYXRlZ29yeSwgVHJhY2UubWVzc2FnZVR5cGUuZXJyb3IpO1xuICB9XG5cbiAgc3RhdGljIHJvdXRlUmV1c2VTdHJhdGVneUxvZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBUcmFjZS53cml0ZShtZXNzYWdlLCBOYXRpdmVTY3JpcHREZWJ1Zy5yb3V0ZVJldXNlU3RyYXRlZ3lUcmFjZUNhdGVnb3J5KTtcbiAgfVxuXG4gIHN0YXRpYyBzdHlsZUVycm9yKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIFRyYWNlLndyaXRlKG1lc3NhZ2UsIFRyYWNlLmNhdGVnb3JpZXMuU3R5bGUsIFRyYWNlLm1lc3NhZ2VUeXBlLmVycm9yKTtcbiAgfVxuXG4gIHN0YXRpYyBsaXN0Vmlld0xvZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBUcmFjZS53cml0ZShtZXNzYWdlLCBOYXRpdmVTY3JpcHREZWJ1Zy5saXN0Vmlld1RyYWNlQ2F0ZWdvcnkpO1xuICB9XG5cbiAgc3RhdGljIGxpc3RWaWV3RXJyb3IobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgVHJhY2Uud3JpdGUobWVzc2FnZSwgTmF0aXZlU2NyaXB0RGVidWcubGlzdFZpZXdUcmFjZUNhdGVnb3J5LCBUcmFjZS5tZXNzYWdlVHlwZS5lcnJvcik7XG4gIH1cblxuICBzdGF0aWMgYm9vdHN0cmFwTG9nKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIFRyYWNlLndyaXRlKG1lc3NhZ2UsIE5hdGl2ZVNjcmlwdERlYnVnLmJvb3RzdHJhcENhdGVnb3J5KTtcbiAgfVxuXG4gIHN0YXRpYyBib290c3RyYXBMb2dFcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBUcmFjZS53cml0ZShtZXNzYWdlLCBOYXRpdmVTY3JpcHREZWJ1Zy5ib290c3RyYXBDYXRlZ29yeSwgVHJhY2UubWVzc2FnZVR5cGUuZXJyb3IpO1xuICB9XG59XG4iXX0=