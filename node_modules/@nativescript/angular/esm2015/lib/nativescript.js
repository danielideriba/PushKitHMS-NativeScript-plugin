import { ViewportScroller, XhrFactory, ɵNullViewportScroller as NullViewportScroller } from '@angular/common';
import { ApplicationModule, ErrorHandler, Inject, NgModule, NO_ERRORS_SCHEMA, Optional, RendererFactory2, SkipSelf, ɵINJECTOR_SCOPE as INJECTOR_SCOPE } from '@angular/core';
import { Color, Device } from '@nativescript/core';
import { AppHostView } from './app-host-view';
import { NativescriptXhrFactory } from './nativescript-xhr-factory';
import { NativeScriptRendererFactory } from './nativescript-renderer';
import { PlatformNamespaceFilter, NAMESPACE_FILTERS } from './property-filter';
import { APP_ROOT_VIEW, DEVICE, ENABLE_REUSABE_VIEWS, NATIVESCRIPT_ROOT_MODULE_ID } from './tokens';
import { ViewUtil } from './view-util';
import { DetachedLoader } from './cdk/detached-loader';
import { NativeScriptCommonModule } from './nativescript-common.module';
export function generateFallbackRootView(parentRootView) {
    if (parentRootView) {
        return parentRootView;
    }
    return new AppHostView(new Color('white'));
}
export function errorHandler() {
    return new ErrorHandler();
}
export function generateRandomId() {
    return `${Date.now()}` + '_' + Math.random().toString(36).substr(2, 9);
}
const ɵ0 = Device;
export const NATIVESCRIPT_MODULE_STATIC_PROVIDERS = [
    { provide: APP_ROOT_VIEW, useFactory: generateFallbackRootView, deps: [[new Optional(), new SkipSelf(), APP_ROOT_VIEW]] },
    { provide: INJECTOR_SCOPE, useValue: 'root' },
    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },
    { provide: ViewUtil, useClass: ViewUtil, deps: [NAMESPACE_FILTERS, [new Optional(), ENABLE_REUSABE_VIEWS]] },
    {
        provide: NativeScriptRendererFactory,
        useClass: NativeScriptRendererFactory,
        deps: [APP_ROOT_VIEW, NAMESPACE_FILTERS, NATIVESCRIPT_ROOT_MODULE_ID, [new Optional(), ENABLE_REUSABE_VIEWS]],
    },
    { provide: NATIVESCRIPT_ROOT_MODULE_ID, useFactory: generateRandomId },
    { provide: RendererFactory2, useExisting: NativeScriptRendererFactory },
    { provide: NAMESPACE_FILTERS, useClass: PlatformNamespaceFilter, deps: [DEVICE], multi: true },
    { provide: DEVICE, useValue: ɵ0 },
    { provide: XhrFactory, useClass: NativescriptXhrFactory, deps: [] },
];
export const NATIVESCRIPT_MODULE_PROVIDERS = [{ provide: ViewportScroller, useClass: NullViewportScroller }];
export class NativeScriptModule {
    constructor(parentModule) {
        if (parentModule) {
            throw new Error(`NativeScriptModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);
        }
    }
}
NativeScriptModule.decorators = [
    { type: NgModule, args: [{
                imports: [ApplicationModule, NativeScriptCommonModule],
                declarations: [DetachedLoader],
                providers: [...NATIVESCRIPT_MODULE_STATIC_PROVIDERS, ...NATIVESCRIPT_MODULE_PROVIDERS],
                exports: [ApplicationModule, DetachedLoader, NativeScriptCommonModule],
                schemas: [NO_ERRORS_SCHEMA],
            },] }
];
NativeScriptModule.ctorParameters = () => [
    { type: NativeScriptModule, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [NativeScriptModule,] }] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlc2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9uYXRpdmVzY3JpcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxxQkFBcUIsSUFBSSxvQkFBb0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQVksZ0JBQWdCLEVBQUUsUUFBUSxFQUFrQixlQUFlLElBQUksY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZNLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFRLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLG9CQUFvQixFQUFFLDJCQUEyQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXhFLE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxjQUFxQjtJQUM1RCxJQUFJLGNBQWMsRUFBRTtRQUNsQixPQUFPLGNBQWMsQ0FBQztLQUN2QjtJQUNELE9BQU8sSUFBSSxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVk7SUFDMUIsT0FBTyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzVCLENBQUM7QUFDRCxNQUFNLFVBQVUsZ0JBQWdCO0lBQzlCLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3pFLENBQUM7V0FlOEIsTUFBTTtBQWJyQyxNQUFNLENBQUMsTUFBTSxvQ0FBb0MsR0FBcUI7SUFDcEUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUFFO0lBQ3pILEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO0lBQzdDLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7SUFDN0QsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLG9CQUFvQixDQUFDLENBQUMsRUFBRTtJQUM1RztRQUNFLE9BQU8sRUFBRSwyQkFBMkI7UUFDcEMsUUFBUSxFQUFFLDJCQUEyQjtRQUNyQyxJQUFJLEVBQUUsQ0FBQyxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsMkJBQTJCLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLG9CQUFvQixDQUFDLENBQUM7S0FDOUc7SUFDRCxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUU7SUFDdEUsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLDJCQUEyQixFQUFFO0lBQ3ZFLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSx1QkFBdUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0lBQzlGLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLElBQVEsRUFBRTtJQUNyQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7Q0FDcEUsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFlLENBQUMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQztBQVN6SCxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCLFlBQWdFLFlBQXVDO1FBQ3JHLElBQUksWUFBWSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0tBQW9LLENBQUMsQ0FBQztTQUN2TDtJQUNILENBQUM7OztZQVpGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSx3QkFBd0IsQ0FBQztnQkFDdEQsWUFBWSxFQUFFLENBQUMsY0FBYyxDQUFDO2dCQUM5QixTQUFTLEVBQUUsQ0FBQyxHQUFHLG9DQUFvQyxFQUFFLEdBQUcsNkJBQTZCLENBQUM7Z0JBQ3RGLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLGNBQWMsRUFBRSx3QkFBd0IsQ0FBQztnQkFDdEUsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7YUFDNUI7OztZQUUrRSxrQkFBa0IsdUJBQW5GLFFBQVEsWUFBSSxRQUFRLFlBQUksTUFBTSxTQUFDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdwb3J0U2Nyb2xsZXIsIFhockZhY3RvcnksIMm1TnVsbFZpZXdwb3J0U2Nyb2xsZXIgYXMgTnVsbFZpZXdwb3J0U2Nyb2xsZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQXBwbGljYXRpb25Nb2R1bGUsIEVycm9ySGFuZGxlciwgSW5qZWN0LCBOZ01vZHVsZSwgTk9fRVJST1JTX1NDSEVNQSwgT3B0aW9uYWwsIFByb3ZpZGVyLCBSZW5kZXJlckZhY3RvcnkyLCBTa2lwU2VsZiwgU3RhdGljUHJvdmlkZXIsIMm1SU5KRUNUT1JfU0NPUEUgYXMgSU5KRUNUT1JfU0NPUEUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbG9yLCBEZXZpY2UsIFZpZXcgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuaW1wb3J0IHsgQXBwSG9zdFZpZXcgfSBmcm9tICcuL2FwcC1ob3N0LXZpZXcnO1xuaW1wb3J0IHsgTmF0aXZlc2NyaXB0WGhyRmFjdG9yeSB9IGZyb20gJy4vbmF0aXZlc2NyaXB0LXhoci1mYWN0b3J5JztcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSB9IGZyb20gJy4vbmF0aXZlc2NyaXB0LXJlbmRlcmVyJztcbmltcG9ydCB7IFBsYXRmb3JtTmFtZXNwYWNlRmlsdGVyLCBOQU1FU1BBQ0VfRklMVEVSUyB9IGZyb20gJy4vcHJvcGVydHktZmlsdGVyJztcbmltcG9ydCB7IEFQUF9ST09UX1ZJRVcsIERFVklDRSwgRU5BQkxFX1JFVVNBQkVfVklFV1MsIE5BVElWRVNDUklQVF9ST09UX01PRFVMRV9JRCB9IGZyb20gJy4vdG9rZW5zJztcbmltcG9ydCB7IFZpZXdVdGlsIH0gZnJvbSAnLi92aWV3LXV0aWwnO1xuaW1wb3J0IHsgRGV0YWNoZWRMb2FkZXIgfSBmcm9tICcuL2Nkay9kZXRhY2hlZC1sb2FkZXInO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0Q29tbW9uTW9kdWxlIH0gZnJvbSAnLi9uYXRpdmVzY3JpcHQtY29tbW9uLm1vZHVsZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUZhbGxiYWNrUm9vdFZpZXcocGFyZW50Um9vdFZpZXc/OiBWaWV3KSB7XG4gIGlmIChwYXJlbnRSb290Vmlldykge1xuICAgIHJldHVybiBwYXJlbnRSb290VmlldztcbiAgfVxuICByZXR1cm4gbmV3IEFwcEhvc3RWaWV3KG5ldyBDb2xvcignd2hpdGUnKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcnJvckhhbmRsZXIoKSB7XG4gIHJldHVybiBuZXcgRXJyb3JIYW5kbGVyKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21JZCgpIHtcbiAgcmV0dXJuIGAke0RhdGUubm93KCl9YCArICdfJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KTtcbn1cblxuZXhwb3J0IGNvbnN0IE5BVElWRVNDUklQVF9NT0RVTEVfU1RBVElDX1BST1ZJREVSUzogU3RhdGljUHJvdmlkZXJbXSA9IFtcbiAgeyBwcm92aWRlOiBBUFBfUk9PVF9WSUVXLCB1c2VGYWN0b3J5OiBnZW5lcmF0ZUZhbGxiYWNrUm9vdFZpZXcsIGRlcHM6IFtbbmV3IE9wdGlvbmFsKCksIG5ldyBTa2lwU2VsZigpLCBBUFBfUk9PVF9WSUVXXV0gfSxcbiAgeyBwcm92aWRlOiBJTkpFQ1RPUl9TQ09QRSwgdXNlVmFsdWU6ICdyb290JyB9LFxuICB7IHByb3ZpZGU6IEVycm9ySGFuZGxlciwgdXNlRmFjdG9yeTogZXJyb3JIYW5kbGVyLCBkZXBzOiBbXSB9LFxuICB7IHByb3ZpZGU6IFZpZXdVdGlsLCB1c2VDbGFzczogVmlld1V0aWwsIGRlcHM6IFtOQU1FU1BBQ0VfRklMVEVSUywgW25ldyBPcHRpb25hbCgpLCBFTkFCTEVfUkVVU0FCRV9WSUVXU11dIH0sXG4gIHtcbiAgICBwcm92aWRlOiBOYXRpdmVTY3JpcHRSZW5kZXJlckZhY3RvcnksXG4gICAgdXNlQ2xhc3M6IE5hdGl2ZVNjcmlwdFJlbmRlcmVyRmFjdG9yeSxcbiAgICBkZXBzOiBbQVBQX1JPT1RfVklFVywgTkFNRVNQQUNFX0ZJTFRFUlMsIE5BVElWRVNDUklQVF9ST09UX01PRFVMRV9JRCwgW25ldyBPcHRpb25hbCgpLCBFTkFCTEVfUkVVU0FCRV9WSUVXU11dLFxuICB9LFxuICB7IHByb3ZpZGU6IE5BVElWRVNDUklQVF9ST09UX01PRFVMRV9JRCwgdXNlRmFjdG9yeTogZ2VuZXJhdGVSYW5kb21JZCB9LFxuICB7IHByb3ZpZGU6IFJlbmRlcmVyRmFjdG9yeTIsIHVzZUV4aXN0aW5nOiBOYXRpdmVTY3JpcHRSZW5kZXJlckZhY3RvcnkgfSxcbiAgeyBwcm92aWRlOiBOQU1FU1BBQ0VfRklMVEVSUywgdXNlQ2xhc3M6IFBsYXRmb3JtTmFtZXNwYWNlRmlsdGVyLCBkZXBzOiBbREVWSUNFXSwgbXVsdGk6IHRydWUgfSxcbiAgeyBwcm92aWRlOiBERVZJQ0UsIHVzZVZhbHVlOiBEZXZpY2UgfSxcbiAgeyBwcm92aWRlOiBYaHJGYWN0b3J5LCB1c2VDbGFzczogTmF0aXZlc2NyaXB0WGhyRmFjdG9yeSwgZGVwczogW10gfSxcbl07XG5leHBvcnQgY29uc3QgTkFUSVZFU0NSSVBUX01PRFVMRV9QUk9WSURFUlM6IFByb3ZpZGVyW10gPSBbeyBwcm92aWRlOiBWaWV3cG9ydFNjcm9sbGVyLCB1c2VDbGFzczogTnVsbFZpZXdwb3J0U2Nyb2xsZXIgfV07XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtBcHBsaWNhdGlvbk1vZHVsZSwgTmF0aXZlU2NyaXB0Q29tbW9uTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbRGV0YWNoZWRMb2FkZXJdLFxuICBwcm92aWRlcnM6IFsuLi5OQVRJVkVTQ1JJUFRfTU9EVUxFX1NUQVRJQ19QUk9WSURFUlMsIC4uLk5BVElWRVNDUklQVF9NT0RVTEVfUFJPVklERVJTXSxcbiAgZXhwb3J0czogW0FwcGxpY2F0aW9uTW9kdWxlLCBEZXRhY2hlZExvYWRlciwgTmF0aXZlU2NyaXB0Q29tbW9uTW9kdWxlXSxcbiAgc2NoZW1hczogW05PX0VSUk9SU19TQ0hFTUFdLFxufSlcbmV4cG9ydCBjbGFzcyBOYXRpdmVTY3JpcHRNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBASW5qZWN0KE5hdGl2ZVNjcmlwdE1vZHVsZSkgcGFyZW50TW9kdWxlOiBOYXRpdmVTY3JpcHRNb2R1bGUgfCBudWxsKSB7XG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBOYXRpdmVTY3JpcHRNb2R1bGUgaGFzIGFscmVhZHkgYmVlbiBsb2FkZWQuIElmIHlvdSBuZWVkIGFjY2VzcyB0byBjb21tb24gZGlyZWN0aXZlcyBzdWNoIGFzIE5nSWYgYW5kIE5nRm9yIGZyb20gYSBsYXp5IGxvYWRlZCBtb2R1bGUsIGltcG9ydCBDb21tb25Nb2R1bGUgaW5zdGVhZC5gKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==