import { NgModule } from '@angular/core';
import { Application, ContentView, RootLayout } from '@nativescript/core';
import { APP_ROOT_VIEW, DISABLE_ROOT_VIEW_HANDLING } from './tokens';
export class RootViewProxy extends ContentView {
    constructor(parentRootLayout) {
        super();
        this.parentRootLayout = parentRootLayout;
    }
    _addView(view, atIndex) {
        super._addView(view, atIndex);
        if (this.parentRootLayout.getChildIndex(this) < 0) {
            this.parentRootLayout.insertChild(this, 0);
        }
    }
    _removeView(view) {
        super._removeView(view);
        this.parentRootLayout.removeChild(this);
    }
}
/**
 * This generates a RootLayout and returns a RootViewProxy.
 * Setting RootViewProxy.content will add the view to the bottom of the RootLayout
 * Setting RootViewProxy.content = null will remove the view from the RootLayout
 * @returns RootViewProxy that will insert content into the start of the RootLayout
 */
export function generateRootLayoutAndProxy() {
    let rootView = Application.getRootView();
    if (!rootView || !(rootView instanceof RootLayout)) {
        rootView = new RootLayout();
        Application.resetRootView({ create: () => rootView });
    }
    const viewProxy = new RootViewProxy(rootView);
    // (rootView as RootLayout).insertChild(viewProxy, 0);
    return viewProxy;
}
export class RootCompositeModule {
}
RootCompositeModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    { provide: DISABLE_ROOT_VIEW_HANDLING, useValue: true },
                    { provide: APP_ROOT_VIEW, useFactory: generateRootLayoutAndProxy },
                ],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdGNvbXBvc2l0ZS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3Jvb3Rjb21wb3NpdGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFRLE1BQU0sb0JBQW9CLENBQUM7QUFDaEYsT0FBTyxFQUFFLGFBQWEsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVyRSxNQUFNLE9BQU8sYUFBYyxTQUFRLFdBQVc7SUFDNUMsWUFBb0IsZ0JBQTRCO1FBQzlDLEtBQUssRUFBRSxDQUFDO1FBRFUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFZO0lBRWhELENBQUM7SUFFRCxRQUFRLENBQUMsSUFBVSxFQUFFLE9BQWdCO1FBQ25DLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDakQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDNUM7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQVU7UUFDcEIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDRjtBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLDBCQUEwQjtJQUN4QyxJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDekMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsUUFBUSxZQUFZLFVBQVUsQ0FBQyxFQUFFO1FBQ2xELFFBQVEsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQzVCLFdBQVcsQ0FBQyxhQUFhLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN2RDtJQUNELE1BQU0sU0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLFFBQXNCLENBQUMsQ0FBQztJQUM1RCxzREFBc0Q7SUFDdEQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQVFELE1BQU0sT0FBTyxtQkFBbUI7OztZQU4vQixRQUFRLFNBQUM7Z0JBQ1IsU0FBUyxFQUFFO29CQUNULEVBQUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7b0JBQ3ZELEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsMEJBQTBCLEVBQUU7aUJBQ25FO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwbGljYXRpb24sIENvbnRlbnRWaWV3LCBSb290TGF5b3V0LCBWaWV3IH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IEFQUF9ST09UX1ZJRVcsIERJU0FCTEVfUk9PVF9WSUVXX0hBTkRMSU5HIH0gZnJvbSAnLi90b2tlbnMnO1xuXG5leHBvcnQgY2xhc3MgUm9vdFZpZXdQcm94eSBleHRlbmRzIENvbnRlbnRWaWV3IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwYXJlbnRSb290TGF5b3V0OiBSb290TGF5b3V0KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIF9hZGRWaWV3KHZpZXc6IFZpZXcsIGF0SW5kZXg/OiBudW1iZXIpIHtcbiAgICBzdXBlci5fYWRkVmlldyh2aWV3LCBhdEluZGV4KTtcbiAgICBpZiAodGhpcy5wYXJlbnRSb290TGF5b3V0LmdldENoaWxkSW5kZXgodGhpcykgPCAwKSB7XG4gICAgICB0aGlzLnBhcmVudFJvb3RMYXlvdXQuaW5zZXJ0Q2hpbGQodGhpcywgMCk7XG4gICAgfVxuICB9XG5cbiAgX3JlbW92ZVZpZXcodmlldzogVmlldykge1xuICAgIHN1cGVyLl9yZW1vdmVWaWV3KHZpZXcpO1xuICAgIHRoaXMucGFyZW50Um9vdExheW91dC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgZ2VuZXJhdGVzIGEgUm9vdExheW91dCBhbmQgcmV0dXJucyBhIFJvb3RWaWV3UHJveHkuXG4gKiBTZXR0aW5nIFJvb3RWaWV3UHJveHkuY29udGVudCB3aWxsIGFkZCB0aGUgdmlldyB0byB0aGUgYm90dG9tIG9mIHRoZSBSb290TGF5b3V0XG4gKiBTZXR0aW5nIFJvb3RWaWV3UHJveHkuY29udGVudCA9IG51bGwgd2lsbCByZW1vdmUgdGhlIHZpZXcgZnJvbSB0aGUgUm9vdExheW91dFxuICogQHJldHVybnMgUm9vdFZpZXdQcm94eSB0aGF0IHdpbGwgaW5zZXJ0IGNvbnRlbnQgaW50byB0aGUgc3RhcnQgb2YgdGhlIFJvb3RMYXlvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUm9vdExheW91dEFuZFByb3h5KCkge1xuICBsZXQgcm9vdFZpZXcgPSBBcHBsaWNhdGlvbi5nZXRSb290VmlldygpO1xuICBpZiAoIXJvb3RWaWV3IHx8ICEocm9vdFZpZXcgaW5zdGFuY2VvZiBSb290TGF5b3V0KSkge1xuICAgIHJvb3RWaWV3ID0gbmV3IFJvb3RMYXlvdXQoKTtcbiAgICBBcHBsaWNhdGlvbi5yZXNldFJvb3RWaWV3KHsgY3JlYXRlOiAoKSA9PiByb290VmlldyB9KTtcbiAgfVxuICBjb25zdCB2aWV3UHJveHkgPSBuZXcgUm9vdFZpZXdQcm94eShyb290VmlldyBhcyBSb290TGF5b3V0KTtcbiAgLy8gKHJvb3RWaWV3IGFzIFJvb3RMYXlvdXQpLmluc2VydENoaWxkKHZpZXdQcm94eSwgMCk7XG4gIHJldHVybiB2aWV3UHJveHk7XG59XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW1xuICAgIHsgcHJvdmlkZTogRElTQUJMRV9ST09UX1ZJRVdfSEFORExJTkcsIHVzZVZhbHVlOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBBUFBfUk9PVF9WSUVXLCB1c2VGYWN0b3J5OiBnZW5lcmF0ZVJvb3RMYXlvdXRBbmRQcm94eSB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBSb290Q29tcG9zaXRlTW9kdWxlIHt9XG4iXX0=