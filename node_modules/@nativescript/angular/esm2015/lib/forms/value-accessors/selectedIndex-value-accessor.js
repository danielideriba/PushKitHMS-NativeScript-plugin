import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
const SELECTED_INDEX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => SelectedIndexValueAccessor),
    multi: true,
};
/**
 * The accessor for setting a selectedIndex and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <SegmentedBar [(ngModel)]="model.test">
 *  ```
 */
export class SelectedIndexValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:max-line-length directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value);
        this.value = normalized;
        if (this.viewInitialized) {
            this.view.selectedIndex = this.value;
        }
    }
    ngAfterViewInit() {
        this.viewInitialized = true;
        this.view.selectedIndex = this.value;
    }
}
SelectedIndexValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'SegmentedBar[ngModel],SegmentedBar[formControlName],SegmentedBar[formControl],' +
                    'segmentedBar[ngModel],segmentedBar[formControlName],segmentedBar[formControl],' +
                    'segmentedbar[ngModel],segmentedbar[formControlName],segmentedbar[formControl],' +
                    'segmented-bar[ngModel],segmented-bar[formControlName],segmented-bar[formControl],' +
                    'ListPicker[ngModel],ListPicker[formControlName],ListPicker[formControl],' +
                    'listPicker[ngModel],listPicker[formControlName],listPicker[formControl],' +
                    'listpicker[ngModel],listpicker[formControlName],listpicker[formControl],' +
                    'list-picker[ngModel],list-picker[formControlName],list-picker[formControl],' +
                    'TabView[ngModel],TabView[formControlName],TabView[formControl],' +
                    'tabView[ngModel],tabView[formControlName],tabView[formControl],' +
                    'tabview[ngModel],tabview[formControlName],tabview[formControl],' +
                    'tab-view[ngModel],tab-view[formControlName],tab-view[formControl]',
                providers: [SELECTED_INDEX_VALUE_ACCESSOR],
                host: {
                    '(selectedIndexChange)': 'onChange($event.value)',
                },
            },] }
];
SelectedIndexValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0ZWRJbmRleC12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZm9ybXMvdmFsdWUtYWNjZXNzb3JzL3NlbGVjdGVkSW5kZXgtdmFsdWUtYWNjZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNqRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxNQUFNLDZCQUE2QixHQUFHO0lBQ3BDLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztJQUN6RCxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUM7QUFJRjs7Ozs7Ozs7R0FRRztBQW9CSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsaUJBQWlDO0lBQy9FLDZEQUE2RDtJQUM3RCxZQUFZLFVBQXNCO1FBQ2hDLEtBQUssQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUtELFVBQVUsQ0FBQyxLQUFVO1FBQ25CLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7UUFFeEIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdkMsQ0FBQzs7O1lBeENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQ04sZ0ZBQWdGO29CQUNoRixnRkFBZ0Y7b0JBQ2hGLGdGQUFnRjtvQkFDaEYsbUZBQW1GO29CQUNuRiwwRUFBMEU7b0JBQzFFLDBFQUEwRTtvQkFDMUUsMEVBQTBFO29CQUMxRSw2RUFBNkU7b0JBQzdFLGlFQUFpRTtvQkFDakUsaUVBQWlFO29CQUNqRSxpRUFBaUU7b0JBQ2pFLG1FQUFtRTtnQkFDckUsU0FBUyxFQUFFLENBQUMsNkJBQTZCLENBQUM7Z0JBQzFDLElBQUksRUFBRTtvQkFDSix1QkFBdUIsRUFBRSx3QkFBd0I7aUJBQ2xEO2FBQ0Y7OztZQXhDbUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcbmltcG9ydCB7IEJhc2VWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnLi9iYXNlLXZhbHVlLWFjY2Vzc29yJztcblxuY29uc3QgU0VMRUNURURfSU5ERVhfVkFMVUVfQUNDRVNTT1IgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTZWxlY3RlZEluZGV4VmFsdWVBY2Nlc3NvciksXG4gIG11bHRpOiB0cnVlLFxufTtcblxuZXhwb3J0IHR5cGUgU2VsZWN0YWJsZVZpZXcgPSB7IHNlbGVjdGVkSW5kZXg6IG51bWJlciB9ICYgVmlldztcblxuLyoqXG4gKiBUaGUgYWNjZXNzb3IgZm9yIHNldHRpbmcgYSBzZWxlY3RlZEluZGV4IGFuZCBsaXN0ZW5pbmcgdG8gY2hhbmdlcyB0aGF0IGlzIHVzZWQgYnkgdGhlXG4gKiB7QGxpbmsgTmdNb2RlbH0gZGlyZWN0aXZlcy5cbiAqXG4gKiAgIyMjIEV4YW1wbGVcbiAqICBgYGBcbiAqICA8U2VnbWVudGVkQmFyIFsobmdNb2RlbCldPVwibW9kZWwudGVzdFwiPlxuICogIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6XG4gICAgJ1NlZ21lbnRlZEJhcltuZ01vZGVsXSxTZWdtZW50ZWRCYXJbZm9ybUNvbnRyb2xOYW1lXSxTZWdtZW50ZWRCYXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdzZWdtZW50ZWRCYXJbbmdNb2RlbF0sc2VnbWVudGVkQmFyW2Zvcm1Db250cm9sTmFtZV0sc2VnbWVudGVkQmFyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnc2VnbWVudGVkYmFyW25nTW9kZWxdLHNlZ21lbnRlZGJhcltmb3JtQ29udHJvbE5hbWVdLHNlZ21lbnRlZGJhcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ3NlZ21lbnRlZC1iYXJbbmdNb2RlbF0sc2VnbWVudGVkLWJhcltmb3JtQ29udHJvbE5hbWVdLHNlZ21lbnRlZC1iYXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdMaXN0UGlja2VyW25nTW9kZWxdLExpc3RQaWNrZXJbZm9ybUNvbnRyb2xOYW1lXSxMaXN0UGlja2VyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnbGlzdFBpY2tlcltuZ01vZGVsXSxsaXN0UGlja2VyW2Zvcm1Db250cm9sTmFtZV0sbGlzdFBpY2tlcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ2xpc3RwaWNrZXJbbmdNb2RlbF0sbGlzdHBpY2tlcltmb3JtQ29udHJvbE5hbWVdLGxpc3RwaWNrZXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdsaXN0LXBpY2tlcltuZ01vZGVsXSxsaXN0LXBpY2tlcltmb3JtQ29udHJvbE5hbWVdLGxpc3QtcGlja2VyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnVGFiVmlld1tuZ01vZGVsXSxUYWJWaWV3W2Zvcm1Db250cm9sTmFtZV0sVGFiVmlld1tmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RhYlZpZXdbbmdNb2RlbF0sdGFiVmlld1tmb3JtQ29udHJvbE5hbWVdLHRhYlZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0YWJ2aWV3W25nTW9kZWxdLHRhYnZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0YWJ2aWV3W2Zvcm1Db250cm9sXSwnICtcbiAgICAndGFiLXZpZXdbbmdNb2RlbF0sdGFiLXZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0YWItdmlld1tmb3JtQ29udHJvbF0nLFxuICBwcm92aWRlcnM6IFtTRUxFQ1RFRF9JTkRFWF9WQUxVRV9BQ0NFU1NPUl0sXG4gIGhvc3Q6IHtcbiAgICAnKHNlbGVjdGVkSW5kZXhDaGFuZ2UpJzogJ29uQ2hhbmdlKCRldmVudC52YWx1ZSknLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RlZEluZGV4VmFsdWVBY2Nlc3NvciBleHRlbmRzIEJhc2VWYWx1ZUFjY2Vzc29yPFNlbGVjdGFibGVWaWV3PiBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm1heC1saW5lLWxlbmd0aCBkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICBzdXBlcihlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWx1ZTogbnVtYmVyO1xuICBwcml2YXRlIHZpZXdJbml0aWFsaXplZDogYm9vbGVhbjtcblxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gc3VwZXIubm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgIHRoaXMudmFsdWUgPSBub3JtYWxpemVkO1xuXG4gICAgaWYgKHRoaXMudmlld0luaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLnZpZXcuc2VsZWN0ZWRJbmRleCA9IHRoaXMudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMudmlld0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB0aGlzLnZpZXcuc2VsZWN0ZWRJbmRleCA9IHRoaXMudmFsdWU7XG4gIH1cbn1cbiJdfQ==