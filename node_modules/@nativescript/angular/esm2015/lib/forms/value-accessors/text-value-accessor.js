import { Directive, ElementRef, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseValueAccessor } from './base-value-accessor';
const TEXT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => TextValueAccessor),
    multi: true,
};
/**
 * The accessor for writing a text and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <TextField [(ngModel)]="model.test">
 *  ```
 */
export class TextValueAccessor extends BaseValueAccessor {
    // tslint:disable-line:directive-class-suffix
    constructor(elementRef) {
        super(elementRef.nativeElement);
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value ? `${value}` : value);
        this.view.text = normalized;
    }
}
TextValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'TextField[ngModel],TextField[formControlName],TextField[formControl],' +
                    'textField[ngModel],textField[formControlName],textField[formControl],' +
                    'textfield[ngModel],textfield[formControlName],textfield[formControl],' +
                    'text-field[ngModel],text-field[formControlName],text-field[formControl],' +
                    'TextView[ngModel],TextView[formControlName],TextView[formControl],' +
                    'textView[ngModel],textView[formControlName],textView[formControl],' +
                    'textview[ngModel],textview[formControlName],textview[formControl],' +
                    'text-view[ngModel],text-view[formControlName],text-view[formControl],' +
                    'SearchBar[ngModel],SearchBar[formControlName],SearchBar[formControl],' +
                    'searchBar[ngModel],searchBar[formControlName],searchBar[formControl],' +
                    'searchbar[ngModel],searchbar[formControlName],searchbar[formControl],' +
                    'search-bar[ngModel], search-bar[formControlName],search-bar[formControl]',
                providers: [TEXT_VALUE_ACCESSOR],
                host: {
                    '(blur)': 'onTouched()',
                    '(textChange)': 'onChange($event.value)',
                },
            },] }
];
TextValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC12YWx1ZS1hY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZm9ybXMvdmFsdWUtYWNjZXNzb3JzL3RleHQtdmFsdWUtYWNjZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFELE1BQU0sbUJBQW1CLEdBQUc7SUFDMUIsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hELEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQztBQUlGOzs7Ozs7OztHQVFHO0FBcUJILE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxpQkFBMkI7SUFDaEUsNkNBQTZDO0lBQzdDLFlBQVksVUFBc0I7UUFDaEMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQVU7UUFDbkIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUM5QixDQUFDOzs7WUE3QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFDTix1RUFBdUU7b0JBQ3ZFLHVFQUF1RTtvQkFDdkUsdUVBQXVFO29CQUN2RSwwRUFBMEU7b0JBQzFFLG9FQUFvRTtvQkFDcEUsb0VBQW9FO29CQUNwRSxvRUFBb0U7b0JBQ3BFLHVFQUF1RTtvQkFDdkUsdUVBQXVFO29CQUN2RSx1RUFBdUU7b0JBQ3ZFLHVFQUF1RTtvQkFDdkUsMEVBQTBFO2dCQUM1RSxTQUFTLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztnQkFDaEMsSUFBSSxFQUFFO29CQUNKLFFBQVEsRUFBRSxhQUFhO29CQUN2QixjQUFjLEVBQUUsd0JBQXdCO2lCQUN6QzthQUNGOzs7WUF6Q21CLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBCYXNlVmFsdWVBY2Nlc3NvciB9IGZyb20gJy4vYmFzZS12YWx1ZS1hY2Nlc3Nvcic7XG5cbmNvbnN0IFRFWFRfVkFMVUVfQUNDRVNTT1IgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUZXh0VmFsdWVBY2Nlc3NvciksXG4gIG11bHRpOiB0cnVlLFxufTtcblxuZXhwb3J0IHR5cGUgVGV4dFZpZXcgPSB7IHRleHQ6IHN0cmluZyB9ICYgVmlldztcblxuLyoqXG4gKiBUaGUgYWNjZXNzb3IgZm9yIHdyaXRpbmcgYSB0ZXh0IGFuZCBsaXN0ZW5pbmcgdG8gY2hhbmdlcyB0aGF0IGlzIHVzZWQgYnkgdGhlXG4gKiB7QGxpbmsgTmdNb2RlbH0gZGlyZWN0aXZlcy5cbiAqXG4gKiAgIyMjIEV4YW1wbGVcbiAqICBgYGBcbiAqICA8VGV4dEZpZWxkIFsobmdNb2RlbCldPVwibW9kZWwudGVzdFwiPlxuICogIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6XG4gICAgJ1RleHRGaWVsZFtuZ01vZGVsXSxUZXh0RmllbGRbZm9ybUNvbnRyb2xOYW1lXSxUZXh0RmllbGRbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0ZXh0RmllbGRbbmdNb2RlbF0sdGV4dEZpZWxkW2Zvcm1Db250cm9sTmFtZV0sdGV4dEZpZWxkW2Zvcm1Db250cm9sXSwnICtcbiAgICAndGV4dGZpZWxkW25nTW9kZWxdLHRleHRmaWVsZFtmb3JtQ29udHJvbE5hbWVdLHRleHRmaWVsZFtmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RleHQtZmllbGRbbmdNb2RlbF0sdGV4dC1maWVsZFtmb3JtQ29udHJvbE5hbWVdLHRleHQtZmllbGRbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdUZXh0Vmlld1tuZ01vZGVsXSxUZXh0Vmlld1tmb3JtQ29udHJvbE5hbWVdLFRleHRWaWV3W2Zvcm1Db250cm9sXSwnICtcbiAgICAndGV4dFZpZXdbbmdNb2RlbF0sdGV4dFZpZXdbZm9ybUNvbnRyb2xOYW1lXSx0ZXh0Vmlld1tmb3JtQ29udHJvbF0sJyArXG4gICAgJ3RleHR2aWV3W25nTW9kZWxdLHRleHR2aWV3W2Zvcm1Db250cm9sTmFtZV0sdGV4dHZpZXdbZm9ybUNvbnRyb2xdLCcgK1xuICAgICd0ZXh0LXZpZXdbbmdNb2RlbF0sdGV4dC12aWV3W2Zvcm1Db250cm9sTmFtZV0sdGV4dC12aWV3W2Zvcm1Db250cm9sXSwnICtcbiAgICAnU2VhcmNoQmFyW25nTW9kZWxdLFNlYXJjaEJhcltmb3JtQ29udHJvbE5hbWVdLFNlYXJjaEJhcltmb3JtQ29udHJvbF0sJyArXG4gICAgJ3NlYXJjaEJhcltuZ01vZGVsXSxzZWFyY2hCYXJbZm9ybUNvbnRyb2xOYW1lXSxzZWFyY2hCYXJbZm9ybUNvbnRyb2xdLCcgK1xuICAgICdzZWFyY2hiYXJbbmdNb2RlbF0sc2VhcmNoYmFyW2Zvcm1Db250cm9sTmFtZV0sc2VhcmNoYmFyW2Zvcm1Db250cm9sXSwnICtcbiAgICAnc2VhcmNoLWJhcltuZ01vZGVsXSwgc2VhcmNoLWJhcltmb3JtQ29udHJvbE5hbWVdLHNlYXJjaC1iYXJbZm9ybUNvbnRyb2xdJyxcbiAgcHJvdmlkZXJzOiBbVEVYVF9WQUxVRV9BQ0NFU1NPUl0sXG4gIGhvc3Q6IHtcbiAgICAnKGJsdXIpJzogJ29uVG91Y2hlZCgpJyxcbiAgICAnKHRleHRDaGFuZ2UpJzogJ29uQ2hhbmdlKCRldmVudC52YWx1ZSknLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUZXh0VmFsdWVBY2Nlc3NvciBleHRlbmRzIEJhc2VWYWx1ZUFjY2Vzc29yPFRleHRWaWV3PiB7XG4gIC8vIHRzbGludDpkaXNhYmxlLWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgc3VwZXIoZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBzdXBlci5ub3JtYWxpemVWYWx1ZSh2YWx1ZSA/IGAke3ZhbHVlfWAgOiB2YWx1ZSk7XG4gICAgdGhpcy52aWV3LnRleHQgPSBub3JtYWxpemVkO1xuICB9XG59XG4iXX0=